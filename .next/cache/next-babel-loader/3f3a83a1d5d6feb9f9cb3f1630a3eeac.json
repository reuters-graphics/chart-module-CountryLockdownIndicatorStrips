{"ast":null,"code":"import * as d3 from 'd3'; // Add a couple useful utilities to reorder elements...\n\nd3.selection.prototype.moveToFront = function () {\n  return this.each(function () {\n    this.parentNode.appendChild(this);\n  });\n};\n\nd3.selection.prototype.moveToBack = function () {\n  return this.each(function () {\n    const firstChild = this.parentNode.firstChild;\n\n    if (firstChild) {\n      this.parentNode.insertBefore(this, firstChild);\n    }\n  });\n}; // ... and the important addition. ⬇️⬇️⬇️\n\n/**\n * appendSelect either selects a matching child element of your current\n * selection if one exists or appends that child and selects it. It's useful\n * for writing idempotent chart functions.\n *\n * Use it like this:\n *\n * selection.appendSelect(<query selector>)\n *\n * It can be chained like any normal d3 selection:\n *\n * const g = d3.select(myNode).appendSelect('g', 'viz-group');\n * g.appendSelect('rect')\n *   .attr('x', 0); etc.\n *\n * @param  {string} querySelector  String representation of element to be\n *                                 appended/selected, e.g., div.myClass, svg,\n *                                 button.myClass.anotherClass.\n * @return {object}     d3 selection of child element\n */\n\n\nd3.selection.prototype.appendSelect = function (querySelector) {\n  // Test querySlector w/ classes\n  if (!/^[a-zA-Z]+[0-9]?\\.-?[_a-zA-Z][_a-zA-Z0-9.-]*[a-zA-Z0-9]*$/.test(querySelector)) {\n    // Test querySelector just an element\n    if (!/^[a-zA-Z]+[0-9]?$/.test(querySelector)) {\n      throw new Error(`Invalid query selector passed to appendSelect. Must be an element with zero or more classes: \"div.myClass.another\". Got \"${querySelector}\".`);\n    }\n  }\n\n  const element = querySelector.split('.')[0];\n  const classes = querySelector.split('.').slice(1);\n  let selection = this.select(querySelector);\n  if (!selection.empty()) return selection;\n  selection = this.append(element);\n  classes.forEach(cls => selection.classed(cls, true));\n  return selection;\n};\n\nexport default d3;","map":{"version":3,"sources":["/Users/prasanta/ReutersWork/INTERACTIVES/COVID-APP/chart-module-CountryLockdownIndicatorStrips/src/lib/utils/d3.js"],"names":["d3","selection","prototype","moveToFront","each","parentNode","appendChild","moveToBack","firstChild","insertBefore","appendSelect","querySelector","test","Error","element","split","classes","slice","select","empty","append","forEach","cls","classed"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,IAApB,C,CAEA;;AACAA,EAAE,CAACC,SAAH,CAAaC,SAAb,CAAuBC,WAAvB,GAAqC,YAAW;AAC9C,SAAO,KAAKC,IAAL,CAAU,YAAW;AAC1B,SAAKC,UAAL,CAAgBC,WAAhB,CAA4B,IAA5B;AACD,GAFM,CAAP;AAGD,CAJD;;AAMAN,EAAE,CAACC,SAAH,CAAaC,SAAb,CAAuBK,UAAvB,GAAoC,YAAW;AAC7C,SAAO,KAAKH,IAAL,CAAU,YAAW;AAC1B,UAAMI,UAAU,GAAG,KAAKH,UAAL,CAAgBG,UAAnC;;AACA,QAAIA,UAAJ,EAAgB;AACd,WAAKH,UAAL,CAAgBI,YAAhB,CAA6B,IAA7B,EAAmCD,UAAnC;AACD;AACF,GALM,CAAP;AAMD,CAPD,C,CASA;;AAEA;;;;;;;;;;;;;;;;;;;;;;AAoBAR,EAAE,CAACC,SAAH,CAAaC,SAAb,CAAuBQ,YAAvB,GAAsC,UAASC,aAAT,EAAwB;AAC5D;AACA,MAAI,CAAC,4DAA4DC,IAA5D,CAAiED,aAAjE,CAAL,EAAsF;AACpF;AACA,QAAI,CAAC,oBAAoBC,IAApB,CAAyBD,aAAzB,CAAL,EAA8C;AAC5C,YAAM,IAAIE,KAAJ,CAAW,4HAA2HF,aAAc,IAApJ,CAAN;AACD;AACF;;AACD,QAAMG,OAAO,GAAGH,aAAa,CAACI,KAAd,CAAoB,GAApB,EAAyB,CAAzB,CAAhB;AACA,QAAMC,OAAO,GAAGL,aAAa,CAACI,KAAd,CAAoB,GAApB,EAAyBE,KAAzB,CAA+B,CAA/B,CAAhB;AAEA,MAAIhB,SAAS,GAAG,KAAKiB,MAAL,CAAYP,aAAZ,CAAhB;AACA,MAAI,CAACV,SAAS,CAACkB,KAAV,EAAL,EAAwB,OAAOlB,SAAP;AAExBA,EAAAA,SAAS,GAAG,KAAKmB,MAAL,CAAYN,OAAZ,CAAZ;AACAE,EAAAA,OAAO,CAACK,OAAR,CAAgBC,GAAG,IAAIrB,SAAS,CAACsB,OAAV,CAAkBD,GAAlB,EAAuB,IAAvB,CAAvB;AAEA,SAAOrB,SAAP;AACD,CAlBD;;AAoBA,eAAeD,EAAf","sourcesContent":["import * as d3 from 'd3';\n\n// Add a couple useful utilities to reorder elements...\nd3.selection.prototype.moveToFront = function() {\n  return this.each(function() {\n    this.parentNode.appendChild(this);\n  });\n};\n\nd3.selection.prototype.moveToBack = function() {\n  return this.each(function() {\n    const firstChild = this.parentNode.firstChild;\n    if (firstChild) {\n      this.parentNode.insertBefore(this, firstChild);\n    }\n  });\n};\n\n// ... and the important addition. ⬇️⬇️⬇️\n\n/**\n * appendSelect either selects a matching child element of your current\n * selection if one exists or appends that child and selects it. It's useful\n * for writing idempotent chart functions.\n *\n * Use it like this:\n *\n * selection.appendSelect(<query selector>)\n *\n * It can be chained like any normal d3 selection:\n *\n * const g = d3.select(myNode).appendSelect('g', 'viz-group');\n * g.appendSelect('rect')\n *   .attr('x', 0); etc.\n *\n * @param  {string} querySelector  String representation of element to be\n *                                 appended/selected, e.g., div.myClass, svg,\n *                                 button.myClass.anotherClass.\n * @return {object}     d3 selection of child element\n */\nd3.selection.prototype.appendSelect = function(querySelector) {\n  // Test querySlector w/ classes\n  if (!/^[a-zA-Z]+[0-9]?\\.-?[_a-zA-Z][_a-zA-Z0-9.-]*[a-zA-Z0-9]*$/.test(querySelector)) {\n    // Test querySelector just an element\n    if (!/^[a-zA-Z]+[0-9]?$/.test(querySelector)) {\n      throw new Error(`Invalid query selector passed to appendSelect. Must be an element with zero or more classes: \"div.myClass.another\". Got \"${querySelector}\".`);\n    }\n  }\n  const element = querySelector.split('.')[0];\n  const classes = querySelector.split('.').slice(1);\n\n  let selection = this.select(querySelector);\n  if (!selection.empty()) return selection;\n\n  selection = this.append(element);\n  classes.forEach(cls => selection.classed(cls, true));\n\n  return selection;\n};\n\nexport default d3;\n"]},"metadata":{},"sourceType":"module"}