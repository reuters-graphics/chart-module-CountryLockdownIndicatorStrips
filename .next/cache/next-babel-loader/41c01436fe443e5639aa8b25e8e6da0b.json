{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { formatDateObject, getDates } from './utils/utils';\n/* eslint-disable no-trailing-spaces */\n\nimport ChartComponent from './base/ChartComponent'; // import d3SelectionMulti from 'd3-selection-multi';\n\nimport D3Locale from '@reuters-graphics/d3-locale';\nimport d3 from './utils/d3';\nimport { interpolateHcl } from 'd3'; // see docs on https://github.com/reuters-graphics/graphics-atlas-client\n// import AtlasMetadataClient from '@reuters-graphics/graphics-atlas-client';\n// const atlastClient = new AtlasMetadataClient();\n// const dateFormat_tt = d3.timeFormat('%B %e');\n// const numberFormat_tt = d3.format(',');\n\nvar dateParse = d3.timeParse('%Y-%m-%d');\n\nvar CountryLockdownIndicatorStrips = /*#__PURE__*/function (_ChartComponent) {\n  _inherits(CountryLockdownIndicatorStrips, _ChartComponent);\n\n  var _super = _createSuper(CountryLockdownIndicatorStrips);\n\n  function CountryLockdownIndicatorStrips() {\n    var _this;\n\n    _classCallCheck(this, CountryLockdownIndicatorStrips);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"defaultProps\", {\n      locale: 'en',\n      // See docs https://github.com/reuters-graphics/d3-locale\n      // dateSeries: ['2019-12-31', '2020-07-07'], // yyyy-mm-dd format\n      // dataParams: {\n      //   date: 'date',\n      //   index: 'c1',\n      //   stepValue: 'flag',\n      //   steps: 2, // stepValue = 0, 1...\n      // },\n      height: 150,\n      stripHeight: 50,\n      margin: {\n        top: 10,\n        right: 18,\n        bottom: 10,\n        left: 18\n      },\n      valign: 'center',\n      // start, center, baseline\n      baseColor: 'rgba(255,255,255,0.1)',\n      // stripColor: { // should be numeric values that are mapped from the data\n      //   0: 'rgba(255,255,255,0.25)', // '#4C566A',\n      //   1: 'rgba(255,255,255,0.5)',\n      //   2: 'rgba(255,255,255,0.75)',\n      //   3: 'rgba(255,195,195,1)',\n      // },\n      // legendItems: { // should contain items from stripColor\n      //   null: 'no data',\n      //   stepLegend: {\n      //     0: 'targeted',\n      //     1: 'nationwide',\n      //   },\n      //   indexLegend: {\n      //     0: 'no measures',\n      //     1: 'recommend closing',\n      //     2: 'require closing on some levels',\n      //     3: 'require closing all levels',\n      //   },\n      // },\n      // chartTitle: 'School closing measures',\n      axis: true // markDates: ['2019-12-31', '2020-03-25', '2020-07-07'], // yyyy-mm-dddd\n\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"defaultData\", []);\n\n    return _this;\n  }\n\n  _createClass(CountryLockdownIndicatorStrips, [{\n    key: \"draw\",\n    value: function draw() {\n      var allData = this.data();\n      var props = this.props();\n      var node = this.selection().node(); // date formatters\n\n      var locale = new D3Locale(props.locale);\n      var dateFormat = locale.formatTime('%b %e'); // get date range to be plotted\n\n      if (!props.dateSeries) {\n        props.dateSeries = [dateParse(allData[0].date), dateParse(allData[allData.length - 1].date)];\n      }\n\n      var dateSeries = getDates(props.dateSeries[0], props.dateSeries[1]); // console.log((dateSeries));\n      // set data for the date series\n\n      var data = dateSeries.map(function (d) {\n        var match = allData.find(function (e) {\n          return e[props.dataParams.date] === formatDateObject(d);\n        });\n\n        if (match) {\n          return match;\n        } else {\n          var obj = {};\n          obj[props.dataParams.date] = formatDateObject(d);\n          return obj;\n        }\n      }); // console.log(data);\n      // get country details from AtlasClient from ISO-2\n      // props.country = atlastClient.getCountry(props.countryISO2);\n\n      var _node$getBoundingClie = node.getBoundingClientRect(),\n          width = _node$getBoundingClie.width;\n\n      var transition = d3.transition().duration(750);\n      var stripheight = props.legendItems ? props.stripHeight - props.margin.top : props.height - props.margin.top - props.margin.bottom; // set scales\n\n      var xScale = d3.scaleBand().domain(dateSeries).range([0, width - props.margin.left - props.margin.right]).padding(0);\n      var yScale = d3.scaleLinear().domain([0, props.dataParams.steps - 1]).range([stripheight / props.dataParams.steps, stripheight]);\n      var colorDomain = props.stripColor ? Object.keys(props.stripColor).map(function (d) {\n        return +d;\n      }) : d3.extent(data.map(function (d) {\n        return d[props.dataParams.index];\n      }));\n      var colorRange = props.stripColor ? colorDomain.map(function (d) {\n        return props.stripColor[\"\".concat(d)];\n      }) : ['#333333', '#cccccc'];\n      var colorScale = d3.scaleLinear().domain(colorDomain).range(colorRange).interpolate(interpolateHcl); // main chart container\n\n      var chartDiv = this.selection().appendSelect('div') // see docs in ./utils/d3.js\n      .attr('class', 'CountryLockdownIndicatorStrips').style('width', \"\".concat(width, \"px\")) // .style('height', `${props.height}px`)\n      .appendSelect('div').style('padding-top', \"\".concat(props.margin.top, \"px\")).style('padding-right', \"\".concat(props.margin.right, \"px\")).style('padding-bottom', \"\".concat(props.margin.bottom, \"px\")).style('padding-left', \"\".concat(props.margin.left, \"px\")); // make bars\n\n      var bars = chartDiv.appendSelect('div.bars-container').style('display', 'flex').style('align-items', \"\".concat(props.valign)).style('justify-content', 'center').selectAll('.bar').data(data, function (d, i) {\n        return d[props.dataParams.date];\n      }); // for smooth data updation\n\n      bars.enter().append('div').attr('class', function (d) {\n        return \"bar \".concat(d[props.dataParams.date]);\n      }).style('display', 'inline-block').style('height', function (d) {\n        if (isNaN(d[props.dataParams.stepValue])) {\n          return yScale(0) + 'px';\n        } else {\n          return yScale(d[props.dataParams.stepValue]) + 'px';\n        }\n      }).style('width', xScale.bandwidth() + 'px').style('background', function (d) {\n        var val = parseFloat(d[props.dataParams.index]);\n        return val !== null && !isNaN(val) ? colorScale(val) : props.baseColor;\n      }).merge(bars).transition(transition).style('display', 'inline-block').style('height', function (d) {\n        if (isNaN(d[props.dataParams.stepValue])) {\n          return yScale(0) + 'px';\n        } else {\n          return yScale(d[props.dataParams.stepValue]) + 'px';\n        }\n      }).style('width', xScale.bandwidth() + 'px').style('background', function (d) {\n        var val = parseFloat(d[props.dataParams.index]);\n        return val !== null && !isNaN(val) ? colorScale(val) : props.baseColor;\n      });\n      bars.exit().transition(transition).attr('height', 0).remove(); // add axis\n      // console.log(xScale(dateParse('2020-07-07')));\n\n      if (props.axis) {\n        var stepChange = [];\n\n        if (props.dataParams.steps > 1) {\n          var _loop = function _loop(i) {\n            var match = data.find(function (e) {\n              return e[props.dataParams.stepValue] === i;\n            });\n\n            if (match) {\n              stepChange.push(dateParse(match[props.dataParams.date]));\n            }\n          };\n\n          for (var i = 1; i < props.dataParams.steps; i++) {\n            _loop(i);\n          }\n        }\n\n        var markDates = props.markDates ? props.markDates.map(function (d) {\n          if (!isNaN(xScale(dateParse(d)))) {\n            return dateParse(d);\n          }\n        }).filter(function (d) {\n          return !isNaN(d);\n        }) : [dateSeries[0], dateSeries.slice(-1)[0]].concat(stepChange); // console.log(markDates);\n\n        var xAxis = chartDiv.appendSelect('svg').attr('width', width - props.margin.left - props.margin.right).attr('height', 25).attr('transform', 'translate(0, 0)');\n        xAxis.appendSelect('g.axis-x').attr('class', 'axis-x axis').transition(transition).attr('transform', 'translate(0,0)').call(d3.axisBottom(xScale).tickValues(markDates).tickFormat(dateFormat));\n      } // add chart title\n\n\n      if (props.chartTitle) {\n        chartDiv.appendSelect('div.chart-title').attr('class', 'font-display chart-title').html(\"<h6>\".concat(props.chartTitle, \"</h6>\"));\n      } // chart legend\n\n\n      if (props.legendItems) {\n        // make legend\n        var legendDiv = chartDiv.appendSelect('div.legend-container');\n\n        if (props.legendItems.indexLegend) {\n          var indexLegendItems = [];\n          Object.keys(props.legendItems.indexLegend).forEach(function (d) {\n            var item = {\n              key: d,\n              value: props.legendItems.indexLegend[d]\n            };\n            indexLegendItems.push(item);\n          });\n\n          if (props.legendItems[\"null\"]) {\n            indexLegendItems.unshift({\n              key: 'null',\n              value: props.legendItems[\"null\"]\n            });\n          }\n\n          indexLegendItems.filter(function (d) {\n            return d.value === null;\n          }); // const legendWidth = (width - props.margin.right - props.margin.left) / indexLegendItems.length;\n\n          var indexLegend = legendDiv.appendSelect('div.legend.indexLegend').selectAll('.legend-item').data(indexLegendItems); // for smooth data updation\n\n          indexLegend.enter().append('div').attr('class', 'legend-item').style('display', 'flex').style('margin', function (d) {\n            if (d.key === 'null') {\n              return '1rem 0';\n            }\n          }) // .style('width', `${legendWidth}px`)\n          .html(function (d) {\n            var color = +d.key !== null && !isNaN(+d.key) ? colorScale(+d.key) : props.baseColor;\n            return \"<span style=\\\"width:1.5rem;min-width:1rem; min-height:1rem; background: \".concat(color, \"\\\"></span> <p style=\\\"margin:0 0 0 0.5rem;\\\">\").concat(d.value, \"</p>\");\n          }).merge(indexLegend).style('display', 'flex') // .style('width', `${legendWidth}px`)\n          .html(function (d) {\n            var color = +d.key !== null && !isNaN(+d.key) ? colorScale(+d.key) : props.baseColor;\n            return \"<span style=\\\"width:1.5rem; min-width:1rem; min-height:1rem; background: \".concat(color, \"\\\"></span> <p style=\\\"margin:0 0 0 0.5rem;\\\">\").concat(d.value, \"</p>\");\n          });\n          indexLegend.exit().transition(transition).remove();\n        }\n\n        if (props.legendItems.stepLegend) {\n          // step legend stuff\n          var stepLegendItems = Object.keys(props.legendItems.stepLegend).map(function (d) {\n            return {\n              key: d,\n              value: props.legendItems.stepLegend[d]\n            };\n          }); // console.log(stepLegendItems);\n\n          var stepLegend = legendDiv.appendSelect('div.legend.stepLegend').style('align-items', \"\".concat(props.valign)).selectAll('.legend-item').data(stepLegendItems); // for smooth data updation\n\n          stepLegend.enter().append('div').attr('class', 'legend-item').style('display', 'flex').style('flex-flow', 'column-reverse') // .style('width', `${legendWidth}px`)\n          .html(function (d, i) {\n            var stepSize = stripheight / stepLegendItems.length;\n            return \"<span style=\\\"width:100%; height:\".concat((+d.key + 1) * stepSize, \"px; background-color:\").concat(props.baseColor, \";\\\"></span><p style=\\\"margin:0 0.5rem 0.5rem 0.5rem;\\\">\").concat(d.value, \"</p>\");\n          }).merge(stepLegend).style('display', 'flex').style('flex-flow', 'column-reverse') // .style('width', `${legendWidth}px`)\n          .html(function (d, i) {\n            var stepSize = stripheight / stepLegendItems.length;\n            return \"<span style=\\\"width:100%; height:\".concat((+d.key + 1) * stepSize, \"px; background-color:\").concat(props.baseColor, \";\\\"></span><p style=\\\"margin:0 0.5rem 0.5rem 0.5rem;\\\">\").concat(d.value, \"</p>\");\n          });\n          stepLegend.exit().transition(transition).remove();\n        }\n      }\n\n      return this;\n    }\n  }]);\n\n  return CountryLockdownIndicatorStrips;\n}(ChartComponent); // console.log(this.defaultProps);\n\n\nexport default CountryLockdownIndicatorStrips;","map":{"version":3,"sources":["/Users/prasanta/ReutersWork/INTERACTIVES/COVID-APP/chart-module-CountryLockdownIndicatorStrips/src/lib/chart.js"],"names":["formatDateObject","getDates","ChartComponent","D3Locale","d3","interpolateHcl","dateParse","timeParse","CountryLockdownIndicatorStrips","locale","height","stripHeight","margin","top","right","bottom","left","valign","baseColor","axis","allData","data","props","node","selection","dateFormat","formatTime","dateSeries","date","length","map","d","match","find","e","dataParams","obj","getBoundingClientRect","width","transition","duration","stripheight","legendItems","xScale","scaleBand","domain","range","padding","yScale","scaleLinear","steps","colorDomain","stripColor","Object","keys","extent","index","colorRange","colorScale","interpolate","chartDiv","appendSelect","attr","style","bars","selectAll","i","enter","append","isNaN","stepValue","bandwidth","val","parseFloat","merge","exit","remove","stepChange","push","markDates","filter","slice","concat","xAxis","call","axisBottom","tickValues","tickFormat","chartTitle","html","legendDiv","indexLegend","indexLegendItems","forEach","item","key","value","unshift","color","stepLegend","stepLegendItems","stepSize"],"mappings":"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","sourcesContent":["import { formatDateObject, getDates } from './utils/utils';\n\n/* eslint-disable no-trailing-spaces */\nimport ChartComponent from './base/ChartComponent';\n// import d3SelectionMulti from 'd3-selection-multi';\nimport D3Locale from '@reuters-graphics/d3-locale';\nimport d3 from './utils/d3';\nimport { interpolateHcl } from 'd3';\n\n// see docs on https://github.com/reuters-graphics/graphics-atlas-client\n// import AtlasMetadataClient from '@reuters-graphics/graphics-atlas-client';\n// const atlastClient = new AtlasMetadataClient();\n\n// const dateFormat_tt = d3.timeFormat('%B %e');\n// const numberFormat_tt = d3.format(',');\nconst dateParse = d3.timeParse('%Y-%m-%d');\n\nclass CountryLockdownIndicatorStrips extends ChartComponent {\n    defaultProps = {\n      locale: 'en', // See docs https://github.com/reuters-graphics/d3-locale\n      // dateSeries: ['2019-12-31', '2020-07-07'], // yyyy-mm-dd format\n      // dataParams: {\n      //   date: 'date',\n      //   index: 'c1',\n      //   stepValue: 'flag',\n      //   steps: 2, // stepValue = 0, 1...\n      // },\n      height: 150,\n      stripHeight: 50,\n      margin: {\n        top: 10,\n        right: 18,\n        bottom: 10,\n        left: 18,\n      },\n      valign: 'center', // start, center, baseline\n      baseColor: 'rgba(255,255,255,0.1)',\n      // stripColor: { // should be numeric values that are mapped from the data\n      //   0: 'rgba(255,255,255,0.25)', // '#4C566A',\n      //   1: 'rgba(255,255,255,0.5)',\n      //   2: 'rgba(255,255,255,0.75)',\n      //   3: 'rgba(255,195,195,1)',\n      // },\n      // legendItems: { // should contain items from stripColor\n      //   null: 'no data',\n      //   stepLegend: {\n      //     0: 'targeted',\n      //     1: 'nationwide',\n      //   },\n      //   indexLegend: {\n      //     0: 'no measures',\n      //     1: 'recommend closing',\n      //     2: 'require closing on some levels',\n      //     3: 'require closing all levels',\n      //   },\n      // },\n      // chartTitle: 'School closing measures',\n      axis: true,\n      // markDates: ['2019-12-31', '2020-03-25', '2020-07-07'], // yyyy-mm-dddd\n    };\n\n    defaultData = [];\n\n    draw() {\n      const allData = this.data();\n      const props = this.props();\n      const node = this.selection().node();\n\n      // date formatters\n      const locale = new D3Locale(props.locale);\n      const dateFormat = locale.formatTime('%b %e');\n\n      // get date range to be plotted\n      if (!props.dateSeries) {\n        props.dateSeries = [dateParse(allData[0].date), dateParse(allData[allData.length - 1].date)];\n      }\n      const dateSeries = getDates(props.dateSeries[0], props.dateSeries[1]);\n      // console.log((dateSeries));\n\n      // set data for the date series\n      const data = dateSeries.map((d) => {\n        const match = allData.find((e) => (e[props.dataParams.date]) === (formatDateObject(d)));\n        if (match) {\n          return match;\n        } else {\n          const obj = {};\n          obj[props.dataParams.date] = formatDateObject(d);\n          return obj;\n        }\n      });\n      // console.log(data);\n      // get country details from AtlasClient from ISO-2\n      // props.country = atlastClient.getCountry(props.countryISO2);\n\n      const {\n        width,\n      } = node.getBoundingClientRect();\n\n      const transition = d3.transition()\n        .duration(750);\n\n      const stripheight = props.legendItems ? (props.stripHeight - props.margin.top) : (props.height - props.margin.top - props.margin.bottom);\n\n      // set scales\n\n      const xScale = d3.scaleBand()\n        .domain(dateSeries)\n        .range([0, width - props.margin.left - props.margin.right])\n        .padding(0);\n\n      const yScale = d3.scaleLinear()\n        .domain([0, props.dataParams.steps - 1])\n        .range([stripheight / (props.dataParams.steps), stripheight]);\n\n      const colorDomain = props.stripColor ? (Object.keys(props.stripColor)).map(d => +d) : d3.extent(data.map(d => d[props.dataParams.index]));\n\n      const colorRange = props.stripColor ? colorDomain.map(d => props.stripColor[`${d}`]) : ['#333333', '#cccccc'];\n\n      const colorScale = d3.scaleLinear()\n        .domain(colorDomain)\n        .range(colorRange)\n        .interpolate(interpolateHcl);\n\n      // main chart container\n      const chartDiv = this.selection()\n        .appendSelect('div') // see docs in ./utils/d3.js\n        .attr('class', 'CountryLockdownIndicatorStrips')\n        .style('width', `${width}px`)\n      // .style('height', `${props.height}px`)\n        .appendSelect('div')\n        .style('padding-top', `${props.margin.top}px`)\n        .style('padding-right', `${props.margin.right}px`)\n        .style('padding-bottom', `${props.margin.bottom}px`)\n        .style('padding-left', `${props.margin.left}px`);\n\n      // make bars\n      const bars = chartDiv.appendSelect('div.bars-container')\n        .style('display', 'flex')\n        .style('align-items', `${props.valign}`)\n        .style('justify-content', 'center')\n        .selectAll('.bar')\n        .data(data, (d, i) => d[props.dataParams.date]); // for smooth data updation\n\n      bars.enter().append('div')\n        .attr('class', d => `bar ${d[props.dataParams.date]}`)\n        .style('display', 'inline-block')\n        .style('height', d => {\n          if (isNaN(d[props.dataParams.stepValue])) {\n            return yScale(0) + 'px';\n          } else {\n            return yScale(d[props.dataParams.stepValue]) + 'px';\n          }\n        })\n        .style('width', xScale.bandwidth() + 'px')\n        .style('background', d => {\n          const val = parseFloat(d[props.dataParams.index]);\n          return (val !== null) && !(isNaN(val)) ? colorScale(val) : props.baseColor;\n        })\n        .merge(bars)\n        .transition(transition)\n        .style('display', 'inline-block')\n        .style('height', d => {\n          if (isNaN(d[props.dataParams.stepValue])) {\n            return yScale(0) + 'px';\n          } else {\n            return yScale(d[props.dataParams.stepValue]) + 'px';\n          }\n        })\n        .style('width', xScale.bandwidth() + 'px')\n        .style('background', d => {\n          const val = parseFloat(d[props.dataParams.index]);\n          return (val !== null) && !(isNaN(val)) ? colorScale(val) : props.baseColor;\n        });\n\n      bars.exit()\n        .transition(transition)\n        .attr('height', 0)\n        .remove();\n\n      // add axis\n      // console.log(xScale(dateParse('2020-07-07')));\n      if (props.axis) {\n        const stepChange = [];\n        if (props.dataParams.steps > 1) {\n          for (let i = 1; i < props.dataParams.steps; i++) {\n            const match = data.find((e) => (e[props.dataParams.stepValue]) === i);\n            if (match) {\n              stepChange.push(dateParse(match[props.dataParams.date]));\n            }\n          }\n        }\n        const markDates = props.markDates ?\n          props.markDates.map(d => {\n            if (!isNaN(xScale(dateParse(d)))) {\n              return dateParse(d);\n            }\n          }).filter(d => !isNaN(d)) : [dateSeries[0], dateSeries.slice(-1)[0]].concat(stepChange);\n        // console.log(markDates);\n        const xAxis = chartDiv.appendSelect('svg')\n          .attr('width', width - props.margin.left - props.margin.right)\n          .attr('height', 25)\n          .attr('transform', 'translate(0, 0)');\n\n        xAxis.appendSelect('g.axis-x')\n          .attr('class', 'axis-x axis')\n          .transition(transition)\n          .attr('transform', 'translate(0,0)')\n          .call(\n            d3.axisBottom(xScale)\n              .tickValues(markDates)\n              .tickFormat(dateFormat)\n          );\n      }\n      // add chart title\n      if (props.chartTitle) {\n        chartDiv.appendSelect('div.chart-title')\n          .attr('class', 'font-display chart-title')\n          .html(`<h6>${props.chartTitle}</h6>`);\n      }\n\n      // chart legend\n      if (props.legendItems) {\n        // make legend\n        const legendDiv = chartDiv.appendSelect('div.legend-container');\n        if (props.legendItems.indexLegend) {\n          const indexLegendItems = [];\n          (Object.keys(props.legendItems.indexLegend)).forEach(d => {\n            const item = {\n              key: d,\n              value: props.legendItems.indexLegend[d],\n            };\n            indexLegendItems.push(item);\n          });\n          if (props.legendItems.null) {\n            indexLegendItems.unshift({\n              key: 'null',\n              value: props.legendItems.null,\n            });\n          }\n\n          indexLegendItems.filter(d => d.value === null);\n          // const legendWidth = (width - props.margin.right - props.margin.left) / indexLegendItems.length;\n\n          const indexLegend = legendDiv.appendSelect('div.legend.indexLegend')\n            .selectAll('.legend-item')\n            .data(indexLegendItems); // for smooth data updation\n\n          indexLegend.enter().append('div')\n            .attr('class', 'legend-item')\n            .style('display', 'flex')\n            .style('margin', d => {\n              if (d.key === 'null') { return '1rem 0'; }\n            })\n          // .style('width', `${legendWidth}px`)\n            .html(d => {\n              const color = (+d.key !== null) && !(isNaN(+d.key)) ? colorScale(+d.key) : props.baseColor;\n              return `<span style=\"width:1.5rem;min-width:1rem; min-height:1rem; background: ${color}\"></span> <p style=\"margin:0 0 0 0.5rem;\">${d.value}</p>`;\n            })\n            .merge(indexLegend)\n            .style('display', 'flex')\n          // .style('width', `${legendWidth}px`)\n            .html(d => {\n              const color = (+d.key !== null) && !(isNaN(+d.key)) ? colorScale(+d.key) : props.baseColor;\n              return `<span style=\"width:1.5rem; min-width:1rem; min-height:1rem; background: ${color}\"></span> <p style=\"margin:0 0 0 0.5rem;\">${d.value}</p>`;\n            });\n\n          indexLegend.exit()\n            .transition(transition)\n            .remove();\n        }\n\n        if (props.legendItems.stepLegend) {\n          // step legend stuff\n          const stepLegendItems = Object.keys(props.legendItems.stepLegend).map(d => {\n            return {\n              key: d,\n              value: props.legendItems.stepLegend[d],\n            };\n          });\n          // console.log(stepLegendItems);\n\n          const stepLegend = legendDiv.appendSelect('div.legend.stepLegend')\n            .style('align-items', `${props.valign}`)\n            .selectAll('.legend-item')\n            .data(stepLegendItems); // for smooth data updation\n\n          stepLegend.enter().append('div')\n            .attr('class', 'legend-item')\n            .style('display', 'flex')\n            .style('flex-flow', 'column-reverse')\n            // .style('width', `${legendWidth}px`)\n            .html((d, i) => {\n              const stepSize = (stripheight) / stepLegendItems.length;\n              return `<span style=\"width:100%; height:${((+d.key) + 1) * stepSize}px; background-color:${props.baseColor};\"></span><p style=\"margin:0 0.5rem 0.5rem 0.5rem;\">${d.value}</p>`;\n            })\n            .merge(stepLegend)\n            .style('display', 'flex')\n            .style('flex-flow', 'column-reverse')\n            // .style('width', `${legendWidth}px`)\n            .html((d, i) => {\n              const stepSize = (stripheight) / stepLegendItems.length;\n              return `<span style=\"width:100%; height:${((+d.key) + 1) * stepSize}px; background-color:${props.baseColor};\"></span><p style=\"margin:0 0.5rem 0.5rem 0.5rem;\">${d.value}</p>`;\n            });\n\n          stepLegend.exit()\n            .transition(transition)\n            .remove();\n        }\n      }\n      return this;\n    }\n}\n// console.log(this.defaultProps);\nexport default CountryLockdownIndicatorStrips;\n"]},"metadata":{},"sourceType":"module"}