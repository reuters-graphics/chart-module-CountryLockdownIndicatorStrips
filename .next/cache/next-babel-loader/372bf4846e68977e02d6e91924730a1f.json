{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable no-trailing-spaces */\nimport ChartComponent from './base/ChartComponent';\nimport d3 from './utils/d3';\nimport { getDates, formatDateObject } from './utils/utils';\nimport defaultData from './defaultData.json';\nimport { interpolateHcl } from 'd3';\nimport d3SelectionMulti from 'd3-selection-multi';\nimport D3Locale from '@reuters-graphics/d3-locale'; // see docs on https://github.com/reuters-graphics/graphics-atlas-client\n// import AtlasMetadataClient from '@reuters-graphics/graphics-atlas-client';\n// const atlastClient = new AtlasMetadataClient();\n// const dateFormat_tt = d3.timeFormat('%B %e');\n// const numberFormat_tt = d3.format(',');\n\nconst dateParse = d3.timeParse('%Y-%m-%d');\n\nclass CountryLockdownIndicatorStrips extends ChartComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"defaultProps\", {\n      locale: 'en',\n      // See docs https://github.com/reuters-graphics/d3-locale \n      dateSeries: ['2019-12-31', '2020-07-07'],\n      // yyyy-mm-dd format\n      dataParams: {\n        date: 'date',\n        index: 'c1',\n        stepValue: 'flag',\n        steps: 2 // stepValue = 0, 1...\n\n      },\n      height: 150,\n      stripHeight: 50,\n      margin: {\n        top: 10,\n        right: 18,\n        bottom: 10,\n        left: 18\n      },\n      valign: 'center',\n      // start, center, baseline\n      baseColor: 'rgba(255,255,255,0.1)',\n      stripColor: {\n        // should be numeric values that are mapped from the data\n        0: '#4C566A',\n        1: '#948072',\n        2: '#f68e26',\n        3: '#de2d26'\n      },\n      // stripColor: { // should be numeric values that are mapped from the data\n      //   0: 'rgba(255,255,255,0.25)', // '#4C566A',\n      //   1: 'rgba(255,255,255,0.5)',\n      //   2: 'rgba(255,255,255,0.75)',\n      //   3: 'rgba(255,195,195,1)',\n      // },\n      legendItems: {\n        // should contain items from stripColor\n        null: 'no data',\n        stepLegend: {\n          0: 'targeted',\n          1: 'nationwide'\n        },\n        indexLegend: {\n          0: 'no measures',\n          1: 'recommend closing',\n          2: 'require closing on some levels',\n          3: 'require closing all levels'\n        }\n      },\n      chartTitle: 'School closing measures',\n      axis: true // markDates: ['2019-12-31', '2020-03-25', '2020-07-07'], // yyyy-mm-dddd\n\n    });\n\n    _defineProperty(this, \"defaultData\", defaultData);\n  }\n\n  draw() {\n    const allData = this.data();\n    const props = this.props();\n    const node = this.selection().node(); // date formatters\n\n    const locale = new D3Locale(props.locale);\n    const dateFormat = locale.formatTime('%b %e'); // get date range to be plotted\n\n    if (!props.dateSeries) {\n      props.dateSeries = [dateParse(allData[0].date), dateParse(allData[allData.length - 1].date)];\n    }\n\n    const dateSeries = getDates(props.dateSeries[0], props.dateSeries[1]); // console.log((dateSeries));\n    // set data for the date series\n\n    const data = dateSeries.map(d => {\n      const match = allData.find(e => e[props.dataParams.date] === formatDateObject(d));\n\n      if (match) {\n        return match;\n      } else {\n        const obj = {};\n        obj[props.dataParams.date] = formatDateObject(d);\n        return obj;\n      }\n    }); // console.log(data);\n    // get country details from AtlasClient from ISO-2\n    // props.country = atlastClient.getCountry(props.countryISO2);\n\n    const {\n      width\n    } = node.getBoundingClientRect();\n    const transition = d3.transition().duration(750);\n    const stripheight = props.legendItems ? props.stripHeight - props.margin.top : props.height - props.margin.top - props.margin.bottom; // set scales\n\n    const xScale = d3.scaleBand().domain(dateSeries).range([0, width - props.margin.left - props.margin.right]).padding(0);\n    const yScale = d3.scaleLinear().domain([0, props.dataParams.steps - 1]).range([stripheight / props.dataParams.steps, stripheight]).clamp(true);\n    const colorDomain = props.stripColor ? Object.keys(props.stripColor).map(d => +d) : d3.extent(data.map(d => d[props.dataParams.index]));\n    const colorRange = props.stripColor ? colorDomain.map(d => props.stripColor[`${d}`]) : ['#cccccc', '#333333'];\n    const colorScale = d3.scaleLinear().domain(colorDomain).range(colorRange).interpolate(interpolateHcl); // main chart container\n\n    const chartDiv = this.selection().appendSelect('div') // see docs in ./utils/d3.js\n    .attr('class', 'CountryLockdownIndicatorStrips').style('width', `${width}px`) // .style('height', `${props.height}px`)\n    .appendSelect('div').styles({\n      'padding-top': `${props.margin.top}px`,\n      'padding-right': `${props.margin.right}px`,\n      'padding-bottom': `${props.margin.bottom}px`,\n      'padding-left': `${props.margin.left}px`\n    }); // make bars\n\n    const bars = chartDiv.appendSelect('div.bars-container').styles({\n      display: 'flex',\n      'align-items': `${props.valign}`\n    }).selectAll('.bar').data(data, (d, i) => d[props.dataParams.date]); // for smooth data updation\n\n    bars.enter().append('div').attr('class', d => `bar ${d[props.dataParams.date]}`).style('display', 'inline-block').style('height', d => {\n      return yScale(d[props.dataParams.stepValue]) + 'px';\n    }).style('width', xScale.bandwidth() + 'px').style('background', d => {\n      const val = parseFloat(d[props.dataParams.index]);\n      return val !== null && !isNaN(val) ? colorScale(val) : props.baseColor;\n    }).merge(bars).transition(transition).style('display', 'inline-block').style('height', d => {\n      return yScale(d[props.dataParams.stepValue]) + 'px';\n    }).style('width', xScale.bandwidth() + 'px').style('background', d => {\n      const val = parseFloat(d[props.dataParams.index]);\n      return val !== null && !isNaN(val) ? colorScale(val) : props.baseColor;\n    });\n    bars.exit().transition(transition).attr('height', 0).remove(); // add axis\n    // console.log(xScale(dateParse('2020-07-07')));\n\n    if (props.axis) {\n      const stepChange = [];\n\n      if (props.dataParams.steps > 1) {\n        for (let i = 1; i < props.dataParams.steps; i++) {\n          const match = data.find(e => e[props.dataParams.stepValue] === i);\n\n          if (match) {\n            stepChange.push(dateParse(match[props.dataParams.date]));\n          }\n        }\n      }\n\n      const markDates = props.markDates ? props.markDates.map(d => {\n        if (!isNaN(xScale(dateParse(d)))) {\n          return dateParse(d);\n        }\n      }).filter(d => !isNaN(d)) : [dateSeries[0], dateSeries.slice(-1)[0]].concat(stepChange);\n      console.log(markDates);\n      const xAxis = chartDiv.appendSelect('svg').attr('width', width - props.margin.left - props.margin.right).attr('height', 25).attr('transform', 'translate(0, 0)');\n      xAxis.appendSelect('g.axis-x').attr('class', 'axis-x axis').transition(transition).attr('transform', 'translate(0,0)').call(d3.axisBottom(xScale).tickValues(markDates).tickFormat(dateFormat));\n    } // add chart title\n\n\n    if (props.chartTitle) {\n      chartDiv.appendSelect('div.chart-title').attr('class', 'font-display chart-title').html(`<h6>${props.chartTitle}</h6>`);\n    } // chart legend\n\n\n    if (props.legendItems) {\n      const indexLegendItems = [];\n      Object.keys(props.legendItems.indexLegend).forEach(d => {\n        const item = {\n          key: d,\n          value: props.legendItems.indexLegend[d]\n        };\n        indexLegendItems.push(item);\n      });\n\n      if (props.legendItems.null) {\n        indexLegendItems.unshift({\n          key: 'null',\n          value: props.legendItems.null\n        });\n      } // const legendWidth = (width - props.margin.right - props.margin.left) / indexLegendItems.length;\n      // make legend\n\n\n      const legendDiv = chartDiv.appendSelect('div.legend-container');\n      const indexLegend = legendDiv.appendSelect('div.legend.indexLegend').selectAll('.legend-item').data(indexLegendItems); // for smooth data updation\n\n      indexLegend.enter().append('div').attr('class', 'legend-item').style('display', 'flex').style('margin', d => {\n        if (d.key === 'null') {\n          return '1rem 0';\n        }\n      }) // .style('width', `${legendWidth}px`)\n      .html(d => {\n        const color = +d.key !== null && !isNaN(+d.key) ? props.stripColor[+d.key] : props.baseColor;\n        return `<span style=\"width:1.5rem;min-width:1rem; min-height:1rem; background: ${color}\"></span> <p style=\"margin:0 0 0 0.5rem;\">${d.value}</p>`;\n      }).merge(indexLegend).style('display', 'flex') // .style('width', `${legendWidth}px`)\n      .html(d => {\n        const color = +d.key !== null && !isNaN(+d.key) ? props.stripColor[+d.key] : props.baseColor;\n        return `<span style=\"width:1.5rem; min-width:1rem; min-height:1rem; background: ${color}\"></span> <p style=\"margin:0 0 0 0.5rem;\">${d.value}</p>`;\n      });\n      indexLegend.exit().transition(transition).remove();\n\n      if (props.legendItems.stepLegend) {\n        // step legend stuff\n        const stepLegendItems = [];\n        Object.keys(props.legendItems.stepLegend).forEach(d => {\n          const item = {\n            key: d,\n            value: props.legendItems.stepLegend[d]\n          };\n          stepLegendItems.push(item);\n        }); // console.log(stepLegendItems);\n\n        const stepLegend = legendDiv.appendSelect('div.legend.stepLegend').style('align-items', `${props.valign}`).selectAll('.legend-item').data(stepLegendItems); // for smooth data updation\n\n        stepLegend.enter().append('div').attr('class', 'legend-item').style('display', 'flex').style('flex-flow', 'column-reverse') // .style('width', `${legendWidth}px`)\n        .html((d, i) => {\n          const stepSize = stripheight / stepLegendItems.length;\n          return `<span style=\"width:100%; height:${(+d.key + 1) * stepSize}px; background-color:${props.baseColor};\"></span><p style=\"margin:0 0.5rem 0.5rem 0.5rem;\">${d.value}</p>`;\n        }).merge(stepLegend).style('display', 'flex').style('flex-flow', 'column-reverse') // .style('width', `${legendWidth}px`)\n        .html((d, i) => {\n          const stepSize = stripheight / stepLegendItems.length;\n          return `<span style=\"width:100%; height:${(+d.key + 1) * stepSize}px; background-color:${props.baseColor};\"></span><p style=\"margin:0 0.5rem 0.5rem 0.5rem;\">${d.value}</p>`;\n        });\n        stepLegend.exit().transition(transition).remove();\n      }\n    }\n\n    return this;\n  }\n\n} // console.log(this.defaultProps);\n\n\nexport default CountryLockdownIndicatorStrips;","map":{"version":3,"sources":["/Users/prasanta/ReutersWork/INTERACTIVES/COVID-APP/chart-module-CountryLockdownIndicatorStrips/src/lib/chart.js"],"names":["ChartComponent","d3","getDates","formatDateObject","defaultData","interpolateHcl","d3SelectionMulti","D3Locale","dateParse","timeParse","CountryLockdownIndicatorStrips","locale","dateSeries","dataParams","date","index","stepValue","steps","height","stripHeight","margin","top","right","bottom","left","valign","baseColor","stripColor","legendItems","null","stepLegend","indexLegend","chartTitle","axis","draw","allData","data","props","node","selection","dateFormat","formatTime","length","map","d","match","find","e","obj","width","getBoundingClientRect","transition","duration","stripheight","xScale","scaleBand","domain","range","padding","yScale","scaleLinear","clamp","colorDomain","Object","keys","extent","colorRange","colorScale","interpolate","chartDiv","appendSelect","attr","style","styles","bars","display","selectAll","i","enter","append","bandwidth","val","parseFloat","isNaN","merge","exit","remove","stepChange","push","markDates","filter","slice","concat","console","log","xAxis","call","axisBottom","tickValues","tickFormat","html","indexLegendItems","forEach","item","key","value","unshift","legendDiv","color","stepLegendItems","stepSize"],"mappings":"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","sourcesContent":["/* eslint-disable no-trailing-spaces */\nimport ChartComponent from './base/ChartComponent';\nimport d3 from './utils/d3';\nimport { getDates, formatDateObject } from './utils/utils';\nimport defaultData from './defaultData.json';\nimport { interpolateHcl } from 'd3';\nimport d3SelectionMulti from 'd3-selection-multi';\nimport D3Locale from '@reuters-graphics/d3-locale';\n// see docs on https://github.com/reuters-graphics/graphics-atlas-client\n// import AtlasMetadataClient from '@reuters-graphics/graphics-atlas-client';\n// const atlastClient = new AtlasMetadataClient();\n\n// const dateFormat_tt = d3.timeFormat('%B %e');\n// const numberFormat_tt = d3.format(',');\nconst dateParse = d3.timeParse('%Y-%m-%d');\n\nclass CountryLockdownIndicatorStrips extends ChartComponent {\n    defaultProps = {\n      locale: 'en', // See docs https://github.com/reuters-graphics/d3-locale \n      dateSeries: ['2019-12-31', '2020-07-07'], // yyyy-mm-dd format\n      dataParams: {\n        date: 'date',\n        index: 'c1',\n        stepValue: 'flag',\n        steps: 2, // stepValue = 0, 1...\n      },\n      height: 150,\n      stripHeight: 50,\n      margin: {\n        top: 10,\n        right: 18,\n        bottom: 10,\n        left: 18,\n      },\n      valign: 'center', // start, center, baseline\n      baseColor: 'rgba(255,255,255,0.1)',\n      stripColor: { // should be numeric values that are mapped from the data\n        0: '#4C566A',\n        1: '#948072',\n        2: '#f68e26',\n        3: '#de2d26',\n      },\n      // stripColor: { // should be numeric values that are mapped from the data\n      //   0: 'rgba(255,255,255,0.25)', // '#4C566A',\n      //   1: 'rgba(255,255,255,0.5)',\n      //   2: 'rgba(255,255,255,0.75)',\n      //   3: 'rgba(255,195,195,1)',\n      // },\n      legendItems: { // should contain items from stripColor\n        null: 'no data',\n        stepLegend: {\n          0: 'targeted',\n          1: 'nationwide',\n        },\n        indexLegend: {\n          0: 'no measures',\n          1: 'recommend closing',\n          2: 'require closing on some levels',\n          3: 'require closing all levels',\n        },\n      },\n      chartTitle: 'School closing measures',\n      axis: true,\n      // markDates: ['2019-12-31', '2020-03-25', '2020-07-07'], // yyyy-mm-dddd\n    };\n\n    defaultData = defaultData;\n\n    draw() {\n      const allData = this.data();\n      const props = this.props();\n      const node = this.selection().node();\n\n      // date formatters\n      const locale = new D3Locale(props.locale);\n      const dateFormat = locale.formatTime('%b %e');\n\n      // get date range to be plotted\n      if (!props.dateSeries) {\n        props.dateSeries = [dateParse(allData[0].date), dateParse(allData[allData.length - 1].date)];\n      }\n      const dateSeries = getDates(props.dateSeries[0], props.dateSeries[1]);   \n      // console.log((dateSeries));\n\n      // set data for the date series\n      const data = dateSeries.map((d) => {\n        const match = allData.find((e) => (e[props.dataParams.date]) === (formatDateObject(d)));\n        if (match) {\n          return match;\n        } else {\n          const obj = {};\n          obj[props.dataParams.date] = formatDateObject(d);\n          return obj;\n        }\n      }); \n      // console.log(data);\n      // get country details from AtlasClient from ISO-2\n      // props.country = atlastClient.getCountry(props.countryISO2);\n\n      const {\n        width,\n      } = node.getBoundingClientRect();\n\n      const transition = d3.transition()\n        .duration(750);\n\n      const stripheight = props.legendItems ? (props.stripHeight - props.margin.top) : (props.height - props.margin.top - props.margin.bottom);\n\n      // set scales\n  \n      const xScale = d3.scaleBand()\n        .domain(dateSeries)\n        .range([0, width - props.margin.left - props.margin.right])\n        .padding(0);\n\n      const yScale = d3.scaleLinear()\n        .domain([0, props.dataParams.steps - 1])\n        .range([stripheight / (props.dataParams.steps), stripheight])\n        .clamp(true);\n\n      const colorDomain = props.stripColor ? (Object.keys(props.stripColor)).map(d => +d) : d3.extent(data.map(d => d[props.dataParams.index]));\n  \n      const colorRange = props.stripColor ? colorDomain.map(d => props.stripColor[`${d}`]) : ['#cccccc', '#333333'];\n  \n      const colorScale = d3.scaleLinear()\n        .domain(colorDomain)\n        .range(colorRange)\n        .interpolate(interpolateHcl);\n\n      // main chart container\n      const chartDiv = this.selection()\n        .appendSelect('div') // see docs in ./utils/d3.js\n        .attr('class', 'CountryLockdownIndicatorStrips')\n        .style('width', `${width}px`)\n      // .style('height', `${props.height}px`)\n        .appendSelect('div')\n        .styles({\n          'padding-top': `${props.margin.top}px`,\n          'padding-right': `${props.margin.right}px`,\n          'padding-bottom': `${props.margin.bottom}px`,\n          'padding-left': `${props.margin.left}px`,\n        });\n\n      // make bars\n      const bars = chartDiv.appendSelect('div.bars-container')\n        .styles({\n          display: 'flex',\n          'align-items': `${props.valign}`,\n        })\n        .selectAll('.bar')\n        .data(data, (d, i) => d[props.dataParams.date]); // for smooth data updation\n\n      bars.enter().append('div')\n        .attr('class', d => `bar ${d[props.dataParams.date]}`)\n        .style('display', 'inline-block')\n        .style('height', d => {\n          return yScale(d[props.dataParams.stepValue]) + 'px';\n        })\n        .style('width', xScale.bandwidth() + 'px')\n        .style('background', d => {\n          const val = parseFloat(d[props.dataParams.index]);\n          return (val !== null) && !(isNaN(val)) ? colorScale(val) : props.baseColor;\n        })\n        .merge(bars)\n        .transition(transition)\n        .style('display', 'inline-block')\n        .style('height', d => {\n          return yScale(d[props.dataParams.stepValue]) + 'px';\n        })\n        .style('width', xScale.bandwidth() + 'px')\n        .style('background', d => {\n          const val = parseFloat(d[props.dataParams.index]);\n          return (val !== null) && !(isNaN(val)) ? colorScale(val) : props.baseColor;\n        });\n\n      bars.exit()\n        .transition(transition)\n        .attr('height', 0)\n        .remove();\n\n      // add axis\n      // console.log(xScale(dateParse('2020-07-07')));\n      if (props.axis) {\n        const stepChange = [];\n        if (props.dataParams.steps > 1) {\n          for (let i = 1; i < props.dataParams.steps; i++) {\n            const match = data.find((e) => (e[props.dataParams.stepValue]) === i);\n            if (match) {\n              stepChange.push(dateParse(match[props.dataParams.date]));\n            }\n          }\n        }\n        const markDates = props.markDates ? \n          props.markDates.map(d => {\n            if (!isNaN(xScale(dateParse(d)))) {\n              return dateParse(d);\n            } \n          }).filter(d => !isNaN(d)) : [dateSeries[0], dateSeries.slice(-1)[0]].concat(stepChange);\n        console.log(markDates);\n        const xAxis = chartDiv.appendSelect('svg')\n          .attr('width', width - props.margin.left - props.margin.right)\n          .attr('height', 25)\n          .attr('transform', 'translate(0, 0)');\n\n        xAxis.appendSelect('g.axis-x')\n          .attr('class', 'axis-x axis')\n          .transition(transition)\n          .attr('transform', 'translate(0,0)')\n          .call(\n            d3.axisBottom(xScale)\n              .tickValues(markDates)\n              .tickFormat(dateFormat)\n          );\n      }\n      // add chart title\n      if (props.chartTitle) {\n        chartDiv.appendSelect('div.chart-title')\n          .attr('class', 'font-display chart-title')\n          .html(`<h6>${props.chartTitle}</h6>`);\n      }\n      \n      // chart legend\n      if (props.legendItems) {\n        const indexLegendItems = [];\n        (Object.keys(props.legendItems.indexLegend)).forEach(d => {\n          const item = {\n            key: d,\n            value: props.legendItems.indexLegend[d],\n          };\n          indexLegendItems.push(item);\n        });\n        if (props.legendItems.null) {\n          indexLegendItems.unshift({\n            key: 'null',\n            value: props.legendItems.null,\n          });\n        }\n        // const legendWidth = (width - props.margin.right - props.margin.left) / indexLegendItems.length;\n\n        // make legend\n        const legendDiv = chartDiv.appendSelect('div.legend-container');\n\n        const indexLegend = legendDiv.appendSelect('div.legend.indexLegend')\n          .selectAll('.legend-item')\n          .data(indexLegendItems); // for smooth data updation\n\n        indexLegend.enter().append('div')\n          .attr('class', 'legend-item')\n          .style('display', 'flex')\n          .style('margin', d => {\n            if (d.key === 'null') { return '1rem 0'; }\n          })\n          // .style('width', `${legendWidth}px`)\n          .html(d => {\n            const color = (+d.key !== null) && !(isNaN(+d.key)) ? props.stripColor[+d.key] : props.baseColor;\n            return `<span style=\"width:1.5rem;min-width:1rem; min-height:1rem; background: ${color}\"></span> <p style=\"margin:0 0 0 0.5rem;\">${d.value}</p>`;\n          })\n          .merge(indexLegend)\n          .style('display', 'flex')\n          // .style('width', `${legendWidth}px`)\n          .html(d => {\n            const color = (+d.key !== null) && !(isNaN(+d.key)) ? props.stripColor[+d.key] : props.baseColor;\n            return `<span style=\"width:1.5rem; min-width:1rem; min-height:1rem; background: ${color}\"></span> <p style=\"margin:0 0 0 0.5rem;\">${d.value}</p>`;\n          });\n\n        indexLegend.exit()\n          .transition(transition)\n          .remove();\n\n        if (props.legendItems.stepLegend) {\n          // step legend stuff\n          const stepLegendItems = [];\n          (Object.keys(props.legendItems.stepLegend)).forEach(d => {\n            const item = {\n              key: d,\n              value: props.legendItems.stepLegend[d],\n            };\n            stepLegendItems.push(item);\n          });\n          // console.log(stepLegendItems);\n\n          const stepLegend = legendDiv.appendSelect('div.legend.stepLegend')\n            .style('align-items', `${props.valign}`)\n            .selectAll('.legend-item')\n            .data(stepLegendItems); // for smooth data updation\n\n          stepLegend.enter().append('div')\n            .attr('class', 'legend-item')\n            .style('display', 'flex')\n            .style('flex-flow', 'column-reverse')\n            // .style('width', `${legendWidth}px`)\n            .html((d, i) => {\n              const stepSize = (stripheight) / stepLegendItems.length;\n              return `<span style=\"width:100%; height:${((+d.key) + 1) * stepSize}px; background-color:${props.baseColor};\"></span><p style=\"margin:0 0.5rem 0.5rem 0.5rem;\">${d.value}</p>`;\n            })\n            .merge(stepLegend)\n            .style('display', 'flex')\n            .style('flex-flow', 'column-reverse')\n            // .style('width', `${legendWidth}px`)\n            .html((d, i) => {\n              const stepSize = (stripheight) / stepLegendItems.length;\n              return `<span style=\"width:100%; height:${((+d.key) + 1) * stepSize}px; background-color:${props.baseColor};\"></span><p style=\"margin:0 0.5rem 0.5rem 0.5rem;\">${d.value}</p>`;\n            });\n\n          stepLegend.exit()\n            .transition(transition)\n            .remove();\n        }\n      }\n      return this;\n    }\n}\n// console.log(this.defaultProps);\nexport default CountryLockdownIndicatorStrips;\n"]},"metadata":{},"sourceType":"module"}