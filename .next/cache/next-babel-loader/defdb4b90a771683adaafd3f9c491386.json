{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport ChartComponent from './base/ChartComponent';\nimport d3 from './utils/d3';\nimport defaultData from './defaultData.json'; // see docs on https://github.com/reuters-graphics/graphics-atlas-client\n\nimport AtlasMetadataClient from '@reuters-graphics/graphics-atlas-client';\nconst atlastClient = new AtlasMetadataClient();\nconst dateParse = d3.timeParse(\"%Y-%m-%d\");\nconst dateFormat = d3.timeFormat(\"%b %e\");\nconst dateFormat_tt = d3.timeFormat(\"%B %e\");\nconst numberFormat_tt = d3.format(\",\");\n\nclass CountryLockdownIndicatorStrips extends ChartComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"defaultProps\", {\n      locale: 'en',\n      countryISO2: 'IN',\n      dataParams: {\n        date: 'date',\n        index: 'c1',\n        steps: 2,\n        // stepValue = 0, 1...\n        stepValue: 'flag'\n      },\n      height: 200,\n      margin: {\n        top: 10,\n        right: 10,\n        bottom: 10,\n        left: 10\n      },\n      valign: 'center',\n      // start, center, baseline\n      fill: 'steelblue'\n    });\n\n    _defineProperty(this, \"defaultData\", defaultData);\n  }\n\n  draw() {\n    const data = this.data();\n    const props = this.props();\n    const node = this.selection().node();\n    console.log(data); // get country details from AtlasClient from ISO-2\n\n    props.country = atlastClient.getCountry(props.countryISO2);\n    const {\n      width\n    } = node.getBoundingClientRect();\n    const transition = d3.transition().duration(750); // main chart container\n\n    const chartDiv = this.selection().appendSelect('div') // see docs in ./utils/d3.js\n    .attr('class', 'CountryLockdownIndicatorStrips').style('width', `${width}px`).style('height', `${props.height}px`).appendSelect('div').style('transform', `translate(${props.margin.left}px, ${props.margin.top}px)`); // set scales\n\n    const yScale = d3.scaleLinear().domain([0, props.dataParams.steps - 1]).range([props.height - props.margin.bottom, props.margin.top]);\n    const xScale = d3.scaleBand().domain(data.map(d => dateParse(d[props.dataParams.date]))).range([props.margin.left, width - props.margin.right]).padding(0); // make bars\n\n    const bars = chartDiv.appendSelect('div.bars-container').style('display', 'flex').style('align-items', `${props.valign}`).selectAll('.bar').data(data, (d, i) => d[props.dataParams.date]); // for smooth data updation\n\n    bars.enter().append('div').attr('class', d => `bar ${d[props.dataParams.date]}`).style('height', d => {\n      let stepSize = (props.height - props.margin.top - props.margin.bottom) / props.dataParams.steps;\n      let step = d[props.dataParams.stepValue] + 1;\n      return d[props.dataParams.index] ? step ? step * stepSize + 'px' : stepSize + 'px' : stepSize + 'px';\n    }).style('width', xScale.bandwidth() + 'px').style('display', 'inline-block').style('background', props.fill); // const circles = g.selectAll('circle')\n    //   .data(data, (d, i) => d[props.dataParams.date]);\n    // circles\n    //   .style('fill', props.fill)\n    //   .style('stroke', props.stroke);\n    // circles.enter().append('circle')\n    //   .style('fill', props.fill)\n    //   .style('stroke', props.stroke)\n    //   .style('stroke-width', props.strokeWidth)\n    //   .attr('cy', props.height / 2)\n    //   .attr('cx', (d, i) =>\n    //     data.slice(0, i).reduce((a, b) => a + b, 0) + (d / 2)\n    //   )\n    //   .merge(circles)\n    //   .transition(transition)\n    //   .attr('cx', (d, i) =>\n    //     data.slice(0, i).reduce((a, b) => a + b, 0) + (d / 2)\n    //   )\n    //   .attr('r', d => d / 2);\n    // circles.exit()\n    //   .transition(transition)\n    //   .attr('r', 0)\n    //   .remove();\n\n    return this;\n  }\n\n} // console.log(this.defaultProps);\n\n\nexport default CountryLockdownIndicatorStrips;","map":{"version":3,"sources":["/Users/prasanta/ReutersWork/INTERACTIVES/COVID-APP/chart-module-CountryLockdownIndicatorStrips/src/lib/chart.js"],"names":["ChartComponent","d3","defaultData","AtlasMetadataClient","atlastClient","dateParse","timeParse","dateFormat","timeFormat","dateFormat_tt","numberFormat_tt","format","CountryLockdownIndicatorStrips","locale","countryISO2","dataParams","date","index","steps","stepValue","height","margin","top","right","bottom","left","valign","fill","draw","data","props","node","selection","console","log","country","getCountry","width","getBoundingClientRect","transition","duration","chartDiv","appendSelect","attr","style","yScale","scaleLinear","domain","range","xScale","scaleBand","map","d","padding","bars","selectAll","i","enter","append","stepSize","step","bandwidth"],"mappings":"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","sourcesContent":["import ChartComponent from './base/ChartComponent';\nimport d3 from './utils/d3';\nimport defaultData from './defaultData.json';\n\n// see docs on https://github.com/reuters-graphics/graphics-atlas-client\nimport AtlasMetadataClient from '@reuters-graphics/graphics-atlas-client';\nconst atlastClient = new AtlasMetadataClient();\n\nconst dateParse = d3.timeParse(\"%Y-%m-%d\");\nconst dateFormat = d3.timeFormat(\"%b %e\");\nconst dateFormat_tt = d3.timeFormat(\"%B %e\");\nconst numberFormat_tt = d3.format(\",\");\n\nclass CountryLockdownIndicatorStrips extends ChartComponent {\n  defaultProps = {\n    locale: 'en',\n    countryISO2: 'IN',\n    dataParams: {\n      date: 'date',\n      index: 'c1',\n      steps: 2, // stepValue = 0, 1...\n      stepValue: 'flag'\n    },\n    height: 200,\n    margin: {\n      top: 10,\n      right: 10,\n      bottom: 10,\n      left: 10\n    },\n    valign: 'center', // start, center, baseline\n    fill: 'steelblue',\n\n  };\n\n  defaultData = defaultData;\n\n\n\n  draw() {\n    const data = this.data();\n    const props = this.props();\n    const node = this.selection().node();\n    console.log(data)\n    // get country details from AtlasClient from ISO-2\n    props.country = atlastClient.getCountry(props.countryISO2);\n\n    const {\n      width\n    } = node.getBoundingClientRect();\n\n    const transition = d3.transition()\n      .duration(750);\n\n    // main chart container\n    const chartDiv = this.selection()\n      .appendSelect('div') // see docs in ./utils/d3.js\n      .attr('class','CountryLockdownIndicatorStrips')\n      .style('width', `${width}px`)\n      .style('height', `${props.height}px`)\n      .appendSelect('div')\n      .style('transform', `translate(${props.margin.left}px, ${props.margin.top}px)`);\n\n    // set scales\n    const yScale = d3.scaleLinear()\n      .domain([0, props.dataParams.steps - 1])\n      .range([props.height - props.margin.bottom, props.margin.top]);\n\n    const xScale = d3.scaleBand()\n      .domain(data.map(d => dateParse(d[props.dataParams.date])))\n      .range([props.margin.left, width - props.margin.right])\n      .padding(0);\n\n    // make bars\n    const bars = chartDiv.appendSelect('div.bars-container')\n      .style('display','flex')\n      .style('align-items',`${props.valign}`)\n      .selectAll('.bar')\n      .data(data, (d, i) => d[props.dataParams.date]); // for smooth data updation\n\n    bars.enter().append('div')\n      .attr('class', d => `bar ${d[props.dataParams.date]}`)\n      .style('height', d => {\n        let stepSize = (props.height - props.margin.top - props.margin.bottom) / props.dataParams.steps;\n        let step = d[props.dataParams.stepValue] + 1;\n        return d[props.dataParams.index] ? (step ? step * stepSize + 'px' : stepSize + 'px') : stepSize + 'px';\n      })\n      .style('width', xScale.bandwidth() + 'px')\n      .style('display', 'inline-block')\n      .style('background', props.fill);\n\n\n    // const circles = g.selectAll('circle')\n    //   .data(data, (d, i) => d[props.dataParams.date]);\n\n    // circles\n    //   .style('fill', props.fill)\n    //   .style('stroke', props.stroke);\n\n    // circles.enter().append('circle')\n    //   .style('fill', props.fill)\n    //   .style('stroke', props.stroke)\n    //   .style('stroke-width', props.strokeWidth)\n    //   .attr('cy', props.height / 2)\n    //   .attr('cx', (d, i) =>\n    //     data.slice(0, i).reduce((a, b) => a + b, 0) + (d / 2)\n    //   )\n    //   .merge(circles)\n    //   .transition(transition)\n    //   .attr('cx', (d, i) =>\n    //     data.slice(0, i).reduce((a, b) => a + b, 0) + (d / 2)\n    //   )\n    //   .attr('r', d => d / 2);\n\n    // circles.exit()\n    //   .transition(transition)\n    //   .attr('r', 0)\n    //   .remove();\n\n    return this;\n  }\n}\n// console.log(this.defaultProps);\nexport default CountryLockdownIndicatorStrips;"]},"metadata":{},"sourceType":"module"}