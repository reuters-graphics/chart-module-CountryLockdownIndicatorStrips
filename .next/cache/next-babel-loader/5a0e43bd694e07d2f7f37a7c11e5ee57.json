{"ast":null,"code":"import { timeDay } from 'd3-time';\nimport { timeFormat, timeParse } from 'd3-time-format'; // function getDates(startDate, stopDate) {\n//   startDate = new Date(startDate);\n//   stopDate = new Date(stopDate);\n//   const dateArray = [];\n//   const currentDate = startDate;\n//   while (currentDate <= stopDate) {\n//     const dt = new Date(currentDate);\n//     dateArray.push(dt);\n//     currentDate.setDate(currentDate.getDate() + 1);\n//   }\n//   return dateArray;\n// }\n// function formatDateObject(date, separator) {\n//   if (!separator) {\n//     separator = '-';\n//   }\n//   const yyyy = date.getFullYear();\n//   const mm = date.getMonth() < 10 ? `0${date.getMonth() + 1}` : date.getMonth() + 1;\n//   const dd = date.getDate() < 10 ? `0${date.getDate()}` : date.getDate();\n//   return `${yyyy}${separator}${mm}${separator}${dd}`;\n//\n\nfunction getDates(startDate, stopDate) {\n  const dateParse = timeParse('%Y-%m-%d'); // include last day\n\n  const endDate = new Date(2015, 0, 1);\n  ;\n  const dateArray = timeDay.range(dateParse(startDate), endDate, 1);\n  return dateArray;\n}\n\nfunction formatDateObject(date, separator) {\n  if (!separator) {\n    separator = '-';\n  }\n\n  return timeFormat(`%Y${separator}%m${separator}%d`)(date);\n}\n\nexport { getDates, formatDateObject };","map":{"version":3,"sources":["/Users/prasanta/ReutersWork/INTERACTIVES/COVID-APP/chart-module-CountryLockdownIndicatorStrips/src/lib/utils/utils.js"],"names":["timeDay","timeFormat","timeParse","getDates","startDate","stopDate","dateParse","endDate","Date","dateArray","range","formatDateObject","date","separator"],"mappings":"AAAA,SAASA,OAAT,QAAwB,SAAxB;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,gBAAtC,C,CAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA,SAASC,QAAT,CAAkBC,SAAlB,EAA6BC,QAA7B,EAAuC;AACrC,QAAMC,SAAS,GAAGJ,SAAS,CAAC,UAAD,CAA3B,CADqC,CAGrC;;AACA,QAAMK,OAAO,GAAG,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,CAAhB;AAAqC;AACrC,QAAMC,SAAS,GAAGT,OAAO,CAACU,KAAR,CAAcJ,SAAS,CAACF,SAAD,CAAvB,EAAoCG,OAApC,EAA6C,CAA7C,CAAlB;AACA,SAAOE,SAAP;AACD;;AACD,SAASE,gBAAT,CAA0BC,IAA1B,EAAgCC,SAAhC,EAA2C;AACzC,MAAI,CAACA,SAAL,EAAgB;AACdA,IAAAA,SAAS,GAAG,GAAZ;AACD;;AACD,SAAOZ,UAAU,CAAE,KAAIY,SAAU,KAAIA,SAAU,IAA9B,CAAV,CAA6CD,IAA7C,CAAP;AACD;;AACD,SAAST,QAAT,EAAmBQ,gBAAnB","sourcesContent":["import { timeDay } from 'd3-time';\nimport { timeFormat, timeParse } from 'd3-time-format';\n\n// function getDates(startDate, stopDate) {\n//   startDate = new Date(startDate);\n//   stopDate = new Date(stopDate);\n\n//   const dateArray = [];\n//   const currentDate = startDate;\n\n//   while (currentDate <= stopDate) {\n//     const dt = new Date(currentDate);\n//     dateArray.push(dt);\n//     currentDate.setDate(currentDate.getDate() + 1);\n//   }\n//   return dateArray;\n// }\n\n// function formatDateObject(date, separator) {\n//   if (!separator) {\n//     separator = '-';\n//   }\n\n//   const yyyy = date.getFullYear();\n//   const mm = date.getMonth() < 10 ? `0${date.getMonth() + 1}` : date.getMonth() + 1;\n//   const dd = date.getDate() < 10 ? `0${date.getDate()}` : date.getDate();\n//   return `${yyyy}${separator}${mm}${separator}${dd}`;\n//\n\nfunction getDates(startDate, stopDate) {\n  const dateParse = timeParse('%Y-%m-%d');\n\n  // include last day\n  const endDate = new Date(2015, 0, 1);;\n  const dateArray = timeDay.range(dateParse(startDate), endDate, 1);\n  return dateArray;\n}\nfunction formatDateObject(date, separator) {\n  if (!separator) {\n    separator = '-';\n  }\n  return timeFormat(`%Y${separator}%m${separator}%d`)(date);\n}\nexport { getDates, formatDateObject };\n"]},"metadata":{},"sourceType":"module"}