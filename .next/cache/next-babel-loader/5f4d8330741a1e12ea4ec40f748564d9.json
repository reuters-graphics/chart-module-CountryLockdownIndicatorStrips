{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport ChartComponent from './base/ChartComponent';\nimport d3 from './utils/d3';\nimport defaultData from './defaultData.json'; // see docs on https://github.com/reuters-graphics/graphics-atlas-client\n\nimport AtlasMetadataClient from '@reuters-graphics/graphics-atlas-client';\nvar atlastClient = new AtlasMetadataClient();\nvar dateParse = d3.timeParse(\"%Y-%m-%d\");\nvar dateFormat = d3.timeFormat(\"%b %e\");\nvar dateFormat_tt = d3.timeFormat(\"%B %e\");\nvar numberFormat_tt = d3.format(\",\");\n\nvar CountryLockdownIndicatorStrips = /*#__PURE__*/function (_ChartComponent) {\n  _inherits(CountryLockdownIndicatorStrips, _ChartComponent);\n\n  var _super = _createSuper(CountryLockdownIndicatorStrips);\n\n  function CountryLockdownIndicatorStrips() {\n    var _this;\n\n    _classCallCheck(this, CountryLockdownIndicatorStrips);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"defaultProps\", {\n      locale: 'en',\n      countryISO2: 'IN',\n      dataParams: {\n        date: 'date',\n        index: 'c1',\n        steps: 2,\n        // stepValue = 0, 1...\n        stepValue: 'flag'\n      },\n      height: 200,\n      margin: {\n        top: 10,\n        right: 10,\n        bottom: 10,\n        left: 10\n      },\n      fill: 'steelblue'\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"defaultData\", defaultData);\n\n    return _this;\n  }\n\n  _createClass(CountryLockdownIndicatorStrips, [{\n    key: \"draw\",\n    value: function draw() {\n      var data = this.data();\n      var props = this.props();\n      var node = this.selection().node();\n      console.log(data); // get country details from AtlasClient from ISO-2\n\n      props.country = atlastClient.getCountry(props.countryISO2);\n\n      var _node$getBoundingClie = node.getBoundingClientRect(),\n          width = _node$getBoundingClie.width;\n\n      var transition = d3.transition().duration(750); // main chart container\n\n      var chartDiv = this.selection().appendSelect('div') // see docs in ./utils/d3.js\n      .style('width', \"\".concat(width, \"px\")).style('height', \"\".concat(props.height, \"px\")).appendSelect('div').style('transform', \"translate(\".concat(props.margin.left, \"px, \").concat(props.margin.top, \"px)\")); // set scales\n\n      var yScale = d3.scaleLinear().domain([0, props.dataParams.steps - 1]).range([props.height - props.margin.bottom, props.margin.top]);\n      var xScale = d3.scaleBand().domain(data.map(function (d) {\n        return dateParse(d[props.dataParams.date]);\n      })).rangeRound([props.margin.left, width - props.margin.right]).padding(0); // make bars\n\n      var bars = chartDiv.appendSelect('div.bars-container').selectAll('.bar').data(data, function (d, i) {\n        return d[props.dataParams.date];\n      }); // for smooth data updation\n\n      bars.enter().append('div').attr('class', function (d) {\n        return \"bar \".concat(d[props.dataParams.date]);\n      }).style('height', function (d) {\n        var stepSize = (props.height - props.margin.top - props.margin.bottom) / props.dataParams.steps;\n        var step = d[props.dataParams.stepValue] + 1;\n        return d[props.dataParams.index] ? step ? step * stepSize + 'px' : stepSize + 'px' : 0;\n      }).style('width', xScale.bandwidth() + 'px').style('display', 'inline-block').style('background', props.fill); // const circles = g.selectAll('circle')\n      //   .data(data, (d, i) => d[props.dataParams.date]);\n      // circles\n      //   .style('fill', props.fill)\n      //   .style('stroke', props.stroke);\n      // circles.enter().append('circle')\n      //   .style('fill', props.fill)\n      //   .style('stroke', props.stroke)\n      //   .style('stroke-width', props.strokeWidth)\n      //   .attr('cy', props.height / 2)\n      //   .attr('cx', (d, i) =>\n      //     data.slice(0, i).reduce((a, b) => a + b, 0) + (d / 2)\n      //   )\n      //   .merge(circles)\n      //   .transition(transition)\n      //   .attr('cx', (d, i) =>\n      //     data.slice(0, i).reduce((a, b) => a + b, 0) + (d / 2)\n      //   )\n      //   .attr('r', d => d / 2);\n      // circles.exit()\n      //   .transition(transition)\n      //   .attr('r', 0)\n      //   .remove();\n\n      return this;\n    }\n  }]);\n\n  return CountryLockdownIndicatorStrips;\n}(ChartComponent); // console.log(this.defaultProps);\n\n\nexport default CountryLockdownIndicatorStrips;","map":{"version":3,"sources":["/Users/prasanta/ReutersWork/INTERACTIVES/COVID-APP/chart-module-CountryLockdownIndicatorStrips/src/lib/chart.js"],"names":["ChartComponent","d3","defaultData","AtlasMetadataClient","atlastClient","dateParse","timeParse","dateFormat","timeFormat","dateFormat_tt","numberFormat_tt","format","CountryLockdownIndicatorStrips","locale","countryISO2","dataParams","date","index","steps","stepValue","height","margin","top","right","bottom","left","fill","data","props","node","selection","console","log","country","getCountry","getBoundingClientRect","width","transition","duration","chartDiv","appendSelect","style","yScale","scaleLinear","domain","range","xScale","scaleBand","map","d","rangeRound","padding","bars","selectAll","i","enter","append","attr","stepSize","step","bandwidth"],"mappings":"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","sourcesContent":["import ChartComponent from './base/ChartComponent';\nimport d3 from './utils/d3';\nimport defaultData from './defaultData.json';\n\n// see docs on https://github.com/reuters-graphics/graphics-atlas-client\nimport AtlasMetadataClient from '@reuters-graphics/graphics-atlas-client';\nconst atlastClient = new AtlasMetadataClient();\n\nconst dateParse = d3.timeParse(\"%Y-%m-%d\");\nconst dateFormat = d3.timeFormat(\"%b %e\");\nconst dateFormat_tt = d3.timeFormat(\"%B %e\");\nconst numberFormat_tt = d3.format(\",\");\n\nclass CountryLockdownIndicatorStrips extends ChartComponent {\n  defaultProps = {\n    locale: 'en',\n    countryISO2: 'IN',\n    dataParams: {\n      date: 'date',\n      index: 'c1',\n      steps: 2, // stepValue = 0, 1...\n      stepValue: 'flag'\n    },\n    height: 200,\n    margin: {\n      top: 10,\n      right: 10,\n      bottom: 10,\n      left: 10\n    },\n    fill: 'steelblue',\n\n  };\n\n  defaultData = defaultData;\n\n\n\n  draw() {\n    const data = this.data();\n    const props = this.props();\n    const node = this.selection().node();\n    console.log(data)\n    // get country details from AtlasClient from ISO-2\n    props.country = atlastClient.getCountry(props.countryISO2);\n\n    const {\n      width\n    } = node.getBoundingClientRect();\n\n    const transition = d3.transition()\n      .duration(750);\n\n    // main chart container\n    const chartDiv = this.selection()\n      .appendSelect('div') // see docs in ./utils/d3.js\n      .style('width', `${width}px`)\n      .style('height', `${props.height}px`)\n      .appendSelect('div')\n      .style('transform', `translate(${props.margin.left}px, ${props.margin.top}px)`);\n\n    // set scales\n    const yScale = d3.scaleLinear()\n      .domain([0, props.dataParams.steps - 1])\n      .range([props.height - props.margin.bottom, props.margin.top]);\n\n    const xScale = d3.scaleBand()\n      .domain(data.map(d => dateParse(d[props.dataParams.date])))\n      .rangeRound([props.margin.left, width - props.margin.right])\n      .padding(0);\n\n    // make bars\n    const bars = chartDiv.appendSelect('div.bars-container')\n      .selectAll('.bar')\n      .data(data, (d, i) => d[props.dataParams.date]); // for smooth data updation\n\n    bars.enter().append('div')\n      .attr('class', d => `bar ${d[props.dataParams.date]}`)\n      .style('height', d => {\n        let stepSize = (props.height-props.margin.top-props.margin.bottom)/props.dataParams.steps;\n        let step = d[props.dataParams.stepValue]+1;\n        return d[props.dataParams.index]? (step ? step*stepSize+'px' : stepSize+'px') : 0;\n      })\n      .style('width', xScale.bandwidth()+'px')\n      .style('display', 'inline-block')\n      .style('background', props.fill);\n\n\n    // const circles = g.selectAll('circle')\n    //   .data(data, (d, i) => d[props.dataParams.date]);\n\n    // circles\n    //   .style('fill', props.fill)\n    //   .style('stroke', props.stroke);\n\n    // circles.enter().append('circle')\n    //   .style('fill', props.fill)\n    //   .style('stroke', props.stroke)\n    //   .style('stroke-width', props.strokeWidth)\n    //   .attr('cy', props.height / 2)\n    //   .attr('cx', (d, i) =>\n    //     data.slice(0, i).reduce((a, b) => a + b, 0) + (d / 2)\n    //   )\n    //   .merge(circles)\n    //   .transition(transition)\n    //   .attr('cx', (d, i) =>\n    //     data.slice(0, i).reduce((a, b) => a + b, 0) + (d / 2)\n    //   )\n    //   .attr('r', d => d / 2);\n\n    // circles.exit()\n    //   .transition(transition)\n    //   .attr('r', 0)\n    //   .remove();\n\n    return this;\n  }\n}\n// console.log(this.defaultProps);\nexport default CountryLockdownIndicatorStrips;"]},"metadata":{},"sourceType":"module"}