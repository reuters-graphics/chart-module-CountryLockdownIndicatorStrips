{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable no-trailing-spaces */\nimport ChartComponent from './base/ChartComponent';\nimport d3 from './utils/d3';\nimport { getDates, formatDateObject } from './utils/utils';\nimport defaultData from './defaultData.json';\nimport { interpolateHcl } from 'd3';\nimport d3SelectionMulti from 'd3-selection-multi'; // see docs on https://github.com/reuters-graphics/graphics-atlas-client\n// import AtlasMetadataClient from '@reuters-graphics/graphics-atlas-client';\n// const atlastClient = new AtlasMetadataClient();\n\nconst dateParse = d3.timeParse('%Y-%m-%d');\nconst dateFormat = d3.timeFormat('%b %e'); // const dateFormat_tt = d3.timeFormat('%B %e');\n// const numberFormat_tt = d3.format(',');\n\nclass CountryLockdownIndicatorStrips extends ChartComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"defaultProps\", {\n      dateSeries: ['2020-02-21', '2020-07-08'],\n      // yyyy-mm-dd format, end date not included\n      dataParams: {\n        date: 'date',\n        index: 'c1',\n        stepValue: 'flag',\n        steps: 2 // stepValue = 0, 1...\n\n      },\n      height: 150,\n      stripHeight: 50,\n      margin: {\n        top: 10,\n        right: 18,\n        bottom: 10,\n        left: 18\n      },\n      valign: 'center',\n      // start, center, baseline\n      baseColor: '#3B4252',\n      stripColor: {\n        // should be numeric values that are mapped from the data\n        0: '#4C566A',\n        1: '#948072',\n        2: '#f68e26',\n        3: '#de2d26'\n      },\n      legendItems: {\n        // should contain items from stripColor\n        null: 'no data',\n        stepLegend: {\n          0: 'targeted',\n          1: 'nationwide'\n        },\n        indexLegend: {\n          0: 'no measures',\n          1: 'recommend closing',\n          2: 'require closing on some levels',\n          3: 'require closing all levels'\n        }\n      },\n      axis: true,\n      markDates: ['2019-12-31', '2020-03-25', '2020-07-07'] // yyyy-mm-dddd\n\n    });\n\n    _defineProperty(this, \"defaultData\", defaultData);\n  }\n\n  draw() {\n    const allData = this.data();\n    const props = this.props();\n    const node = this.selection().node();\n\n    if (!props.dateSeries) {\n      props.dateSeries = [dateParse(allData[0].date), dateParse(allData[allData.length - 1].date)];\n    }\n\n    const dateSeries = getDates(props.dateSeries[0], props.dateSeries[1]);\n    console.log(dateSeries); // set data for the date series\n\n    const data = dateSeries.map(d => {\n      const match = allData.find(e => e[props.dataParams.date] === formatDateObject(d));\n\n      if (match) {\n        return match;\n      } else {\n        const obj = {};\n        obj[props.dataParams.date] = formatDateObject(d);\n        return obj;\n      }\n    }); // get country details from AtlasClient from ISO-2\n    // props.country = atlastClient.getCountry(props.countryISO2);\n\n    const {\n      width\n    } = node.getBoundingClientRect();\n    const transition = d3.transition().duration(750); // main chart container\n\n    const chartDiv = this.selection().appendSelect('div') // see docs in ./utils/d3.js\n    .attr('class', 'CountryLockdownIndicatorStrips').style('width', `${width}px`) // .style('height', `${props.height}px`)\n    .appendSelect('div').styles({\n      'padding-top': `${props.margin.top}px`,\n      'padding-right': `${props.margin.right}px`,\n      'padding-bottom': `${props.margin.bottom}px`,\n      'padding-left': `${props.margin.left}px`\n    });\n    const stripheight = props.legendItems ? props.stripHeight - props.margin.top : props.height - props.margin.top - props.margin.bottom; // set scales\n\n    const yScale = d3.scaleLinear().domain([0, props.dataParams.steps - 1]).range([stripheight, props.margin.top]);\n    const xScale = d3.scaleBand().domain(dateSeries).range([0, width - props.margin.left - props.margin.right]).padding(0);\n    const colorDomain = props.stripColor ? Object.keys(props.stripColor).map(d => +d) : d3.extent(data.map(d => d[props.dataParams.index]));\n    const colorRange = props.stripColor ? colorDomain.map(d => props.stripColor[`${d}`]) : ['#cccccc', '#333333'];\n    const colorScale = d3.scaleLinear().domain(colorDomain).range(colorRange).interpolate(interpolateHcl); // make bars\n\n    const bars = chartDiv.appendSelect('div.bars-container').styles({\n      display: 'flex',\n      'align-items': `${props.valign}`\n    }).selectAll('.bar').data(data, (d, i) => d[props.dataParams.date]); // for smooth data updation\n\n    bars.enter().append('div').attr('class', d => `bar ${d[props.dataParams.date]}`).style('display', 'inline-block').style('height', d => {\n      const stepSize = stripheight / props.dataParams.steps;\n      const step = d[props.dataParams.stepValue] + 1;\n      return d[props.dataParams.index] ? step ? step * stepSize + 'px' : stepSize + 'px' : stepSize + 'px';\n    }).style('width', xScale.bandwidth() + 'px').style('background', d => {\n      const val = parseFloat(d[props.dataParams.index]);\n      return val !== null && !isNaN(val) ? colorScale(val) : props.baseColor;\n    }).merge(bars).transition(transition).style('display', 'inline-block').style('height', d => {\n      const stepSize = stripheight / props.dataParams.steps;\n      const step = d[props.dataParams.stepValue] + 1;\n      return d[props.dataParams.index] ? step ? step * stepSize + 'px' : stepSize + 'px' : stepSize + 'px';\n    }).style('width', xScale.bandwidth() + 'px').style('background', d => {\n      const val = parseFloat(d[props.dataParams.index]);\n      return val !== null && !isNaN(val) ? colorScale(val) : props.baseColor;\n    });\n    bars.exit().transition(transition).attr('height', 0).remove(); // add axis\n\n    if (props.axis) {\n      const markDates = props.markDates ? props.markDates.map(d => dateParse(d)) : [dateSeries[0], dateSeries.slice(-1)[0]];\n      console.log(markDates);\n      const xAxis = chartDiv.appendSelect('svg').attr('width', width - props.margin.left - props.margin.right).attr('height', 25).attr('transform', 'translate(0, 0)');\n      xAxis.appendSelect('g.axis-x').attr('class', 'axis-x axis').transition(transition).attr('transform', 'translate(0,0)').call(d3.axisBottom(xScale).tickValues(markDates).tickFormat(dateFormat));\n    } // chart legend\n\n\n    if (props.legendItems) {\n      const indexLegendItems = [];\n      Object.keys(props.legendItems.indexLegend).forEach(d => {\n        const item = {\n          key: d,\n          value: props.legendItems.indexLegend[d]\n        };\n        indexLegendItems.push(item);\n      });\n\n      if (props.legendItems.null) {\n        indexLegendItems.push({\n          key: 'null',\n          value: props.legendItems.null\n        });\n      }\n\n      const legendWidth = (width - props.margin.right - props.margin.left) / indexLegendItems.length; // make legend\n\n      const legendDiv = chartDiv.appendSelect('div.legend-container');\n      const indexLegend = legendDiv.appendSelect('div.legend.indexLegend') // .style('align-items', `${props.valign}`)\n      .selectAll('.legend-item').data(indexLegendItems); // for smooth data updation\n\n      indexLegend.enter().append('div').attr('class', 'legend-item').styles({\n        display: 'flex',\n        'align-items': 'start'\n      }) // .style('width', `${legendWidth}px`)\n      .html(d => {\n        const color = +d.key !== null && !isNaN(+d.key) ? props.stripColor[+d.key] : props.baseColor;\n        return `<span style=\"width:1rem; height:1rem;min-width:1rem; min-height:1rem; background: ${color}\"></span> <p style=\"margin:0 0 0 0.5rem;\">${d.value}</p>`;\n      }).merge(indexLegend).styles({\n        display: 'flex',\n        'align-items': 'start'\n      }).style('width', `${legendWidth}px`).html(d => {\n        const color = +d.key !== null && !isNaN(+d.key) ? props.stripColor[+d.key] : props.baseColor;\n        return `<span style=\"width:1rem; height:1rem;min-width:1rem; min-height:1rem; background: ${color}\"></span> <p style=\"margin:0 0 0 0.5rem;\">${d.value}</p>`;\n      });\n      indexLegend.exit().transition(transition).remove();\n\n      if (props.legendItems.stepLegend) {\n        // step legend stuff\n        const stepLegendItems = [];\n        Object.keys(props.legendItems.stepLegend).forEach(d => {\n          const item = {\n            key: d,\n            value: props.legendItems.stepLegend[d]\n          };\n          stepLegendItems.push(item);\n        }); // console.log(stepLegendItems);\n\n        const stepLegend = legendDiv.appendSelect('div.legend.stepLegend').selectAll('.legend-item').data(stepLegendItems); // for smooth data updation\n\n        stepLegend.enter().append('div').attr('class', 'legend-item').styles({\n          display: 'flex',\n          'align-items': 'center'\n        }).html((d, i) => {\n          const stepSize = stripheight / stepLegendItems.length;\n          return `<span style=\"width:${8}px; height:${(+d.key + 1) * stepSize}px; background-color:${props.baseColor};\"></span><p style=\"margin:0 0 0 0.5rem;\">${d.value}</p>`;\n        }).merge(stepLegend).styles({\n          display: 'flex',\n          'align-items': 'center'\n        }).html((d, i) => {\n          const stepSize = stripheight / stepLegendItems.length;\n          return `<span style=\"width:${8}px; height:${(+d.key + 1) * stepSize}px; background-color:${props.baseColor};\"></span><p style=\"margin:0 0 0 0.5rem;\">${d.value}</p>`;\n        });\n        stepLegend.exit().transition(transition).remove();\n      }\n    }\n\n    return this;\n  }\n\n} // console.log(this.defaultProps);\n\n\nexport default CountryLockdownIndicatorStrips;","map":{"version":3,"sources":["/Users/prasanta/ReutersWork/INTERACTIVES/COVID-APP/chart-module-CountryLockdownIndicatorStrips/src/lib/chart.js"],"names":["ChartComponent","d3","getDates","formatDateObject","defaultData","interpolateHcl","d3SelectionMulti","dateParse","timeParse","dateFormat","timeFormat","CountryLockdownIndicatorStrips","dateSeries","dataParams","date","index","stepValue","steps","height","stripHeight","margin","top","right","bottom","left","valign","baseColor","stripColor","legendItems","null","stepLegend","indexLegend","axis","markDates","draw","allData","data","props","node","selection","length","console","log","map","d","match","find","e","obj","width","getBoundingClientRect","transition","duration","chartDiv","appendSelect","attr","style","styles","stripheight","yScale","scaleLinear","domain","range","xScale","scaleBand","padding","colorDomain","Object","keys","extent","colorRange","colorScale","interpolate","bars","display","selectAll","i","enter","append","stepSize","step","bandwidth","val","parseFloat","isNaN","merge","exit","remove","slice","xAxis","call","axisBottom","tickValues","tickFormat","indexLegendItems","forEach","item","key","value","push","legendWidth","legendDiv","html","color","stepLegendItems"],"mappings":"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","sourcesContent":["/* eslint-disable no-trailing-spaces */\nimport ChartComponent from './base/ChartComponent';\nimport d3 from './utils/d3';\nimport { getDates, formatDateObject } from './utils/utils';\nimport defaultData from './defaultData.json';\nimport { interpolateHcl } from 'd3';\nimport d3SelectionMulti from 'd3-selection-multi';\n// see docs on https://github.com/reuters-graphics/graphics-atlas-client\n// import AtlasMetadataClient from '@reuters-graphics/graphics-atlas-client';\n// const atlastClient = new AtlasMetadataClient();\n\nconst dateParse = d3.timeParse('%Y-%m-%d');\nconst dateFormat = d3.timeFormat('%b %e');\n// const dateFormat_tt = d3.timeFormat('%B %e');\n// const numberFormat_tt = d3.format(',');\n\nclass CountryLockdownIndicatorStrips extends ChartComponent {\n    defaultProps = {\n      dateSeries: ['2020-02-21', '2020-07-08'], // yyyy-mm-dd format, end date not included\n      dataParams: {\n        date: 'date',\n        index: 'c1',\n        stepValue: 'flag',\n        steps: 2, // stepValue = 0, 1...\n      },\n      height: 150,\n      stripHeight: 50,\n      margin: {\n        top: 10,\n        right: 18,\n        bottom: 10,\n        left: 18,\n      },\n      valign: 'center', // start, center, baseline\n      baseColor: '#3B4252',\n      stripColor: { // should be numeric values that are mapped from the data\n        0: '#4C566A',\n        1: '#948072',\n        2: '#f68e26',\n        3: '#de2d26',\n      },\n      legendItems: { // should contain items from stripColor\n        null: 'no data',\n        stepLegend: {\n          0: 'targeted',\n          1: 'nationwide',\n        },\n        indexLegend: {\n          0: 'no measures',\n          1: 'recommend closing',\n          2: 'require closing on some levels',\n          3: 'require closing all levels',\n        },\n      },\n      axis: true,\n      markDates: ['2019-12-31', '2020-03-25', '2020-07-07'], // yyyy-mm-dddd\n    };\n\n    defaultData = defaultData;\n\n    draw() {\n      const allData = this.data();\n      const props = this.props();\n      const node = this.selection().node();\n\n      if (!props.dateSeries) {\n        props.dateSeries = [dateParse(allData[0].date), dateParse(allData[allData.length - 1].date)];\n      }\n      const dateSeries = getDates(props.dateSeries[0], props.dateSeries[1]);   \n      console.log((dateSeries));\n\n      // set data for the date series\n      const data = dateSeries.map((d) => {\n        const match = allData.find((e) => (e[props.dataParams.date]) === (formatDateObject(d)));\n        if (match) {\n          return match;\n        } else {\n          const obj = {};\n          obj[props.dataParams.date] = formatDateObject(d);\n          return obj;\n        }\n      }); \n\n      // get country details from AtlasClient from ISO-2\n      // props.country = atlastClient.getCountry(props.countryISO2);\n\n      const {\n        width,\n      } = node.getBoundingClientRect();\n\n      const transition = d3.transition()\n        .duration(750);\n\n      // main chart container\n      const chartDiv = this.selection()\n        .appendSelect('div') // see docs in ./utils/d3.js\n        .attr('class', 'CountryLockdownIndicatorStrips')\n        .style('width', `${width}px`)\n      // .style('height', `${props.height}px`)\n        .appendSelect('div')\n        .styles({\n          'padding-top': `${props.margin.top}px`,\n          'padding-right': `${props.margin.right}px`,\n          'padding-bottom': `${props.margin.bottom}px`,\n          'padding-left': `${props.margin.left}px`,\n        });\n\n      const stripheight = props.legendItems ? (props.stripHeight - props.margin.top) : (props.height - props.margin.top - props.margin.bottom);\n\n      // set scales\n      const yScale = d3.scaleLinear()\n        .domain([0, props.dataParams.steps - 1])\n        .range([stripheight, props.margin.top]);\n\n      const xScale = d3.scaleBand()\n        .domain(dateSeries)\n        .range([0, width - props.margin.left - props.margin.right])\n        .padding(0);\n\n      const colorDomain = props.stripColor ? (Object.keys(props.stripColor)).map(d => +d) : d3.extent(data.map(d => d[props.dataParams.index]));\n\n      const colorRange = props.stripColor ? colorDomain.map(d => props.stripColor[`${d}`]) : ['#cccccc', '#333333'];\n\n      const colorScale = d3.scaleLinear()\n        .domain(colorDomain)\n        .range(colorRange)\n        .interpolate(interpolateHcl);\n\n      // make bars\n      const bars = chartDiv.appendSelect('div.bars-container')\n        .styles({\n          display: 'flex',\n          'align-items': `${props.valign}`,\n        })\n        .selectAll('.bar')\n        .data(data, (d, i) => d[props.dataParams.date]); // for smooth data updation\n\n      bars.enter().append('div')\n        .attr('class', d => `bar ${d[props.dataParams.date]}`)\n        .style('display', 'inline-block')\n        .style('height', d => {\n          const stepSize = (stripheight) / props.dataParams.steps;\n          const step = d[props.dataParams.stepValue] + 1;\n          return d[props.dataParams.index] ? (step ? step * stepSize + 'px' : stepSize + 'px') : stepSize + 'px';\n        })\n        .style('width', xScale.bandwidth() + 'px')\n        .style('background', d => {\n          const val = parseFloat(d[props.dataParams.index]);\n          return (val !== null) && !(isNaN(val)) ? colorScale(val) : props.baseColor;\n        })\n        .merge(bars)\n        .transition(transition)\n        .style('display', 'inline-block')\n        .style('height', d => {\n          const stepSize = (stripheight) / props.dataParams.steps;\n          const step = d[props.dataParams.stepValue] + 1;\n          return d[props.dataParams.index] ? (step ? step * stepSize + 'px' : stepSize + 'px') : stepSize + 'px';\n        })\n        .style('width', xScale.bandwidth() + 'px')\n        .style('background', d => {\n          const val = parseFloat(d[props.dataParams.index]);\n          return (val !== null) && !(isNaN(val)) ? colorScale(val) : props.baseColor;\n        });\n\n      bars.exit()\n        .transition(transition)\n        .attr('height', 0)\n        .remove();\n\n      // add axis\n      if (props.axis) {\n        const markDates = props.markDates ? props.markDates.map(d => dateParse(d)) : [dateSeries[0], dateSeries.slice(-1)[0]];\n\n        console.log(markDates);\n\n        const xAxis = chartDiv.appendSelect('svg')\n          .attr('width', width - props.margin.left - props.margin.right)\n          .attr('height', 25)\n          .attr('transform', 'translate(0, 0)');\n\n        xAxis.appendSelect('g.axis-x')\n          .attr('class', 'axis-x axis')\n          .transition(transition)\n          .attr('transform', 'translate(0,0)')\n          .call(\n            d3.axisBottom(xScale)\n              .tickValues(markDates)\n              .tickFormat(dateFormat)\n          );\n      }\n\n      // chart legend\n      if (props.legendItems) {\n        const indexLegendItems = [];\n        (Object.keys(props.legendItems.indexLegend)).forEach(d => {\n          const item = {\n            key: d,\n            value: props.legendItems.indexLegend[d],\n          };\n          indexLegendItems.push(item);\n        });\n        if (props.legendItems.null) {\n          indexLegendItems.push({\n            key: 'null',\n            value: props.legendItems.null,\n          });\n        }\n        const legendWidth = (width - props.margin.right - props.margin.left) / indexLegendItems.length;\n\n        // make legend\n        const legendDiv = chartDiv.appendSelect('div.legend-container');\n\n        const indexLegend = legendDiv.appendSelect('div.legend.indexLegend')\n        // .style('align-items', `${props.valign}`)\n          .selectAll('.legend-item')\n          .data(indexLegendItems); // for smooth data updation\n\n        indexLegend.enter().append('div')\n          .attr('class', 'legend-item')\n          .styles({\n            display: 'flex',\n            'align-items': 'start',\n          })\n        // .style('width', `${legendWidth}px`)\n          .html(d => {\n            const color = (+d.key !== null) && !(isNaN(+d.key)) ? props.stripColor[+d.key] : props.baseColor;\n            return `<span style=\"width:1rem; height:1rem;min-width:1rem; min-height:1rem; background: ${color}\"></span> <p style=\"margin:0 0 0 0.5rem;\">${d.value}</p>`;\n          })\n          .merge(indexLegend)\n          .styles({\n            display: 'flex',\n            'align-items': 'start',\n          })\n          .style('width', `${legendWidth}px`)\n          .html(d => {\n            const color = (+d.key !== null) && !(isNaN(+d.key)) ? props.stripColor[+d.key] : props.baseColor;\n            return `<span style=\"width:1rem; height:1rem;min-width:1rem; min-height:1rem; background: ${color}\"></span> <p style=\"margin:0 0 0 0.5rem;\">${d.value}</p>`;\n          });\n\n        indexLegend.exit()\n          .transition(transition)\n          .remove();\n\n        if (props.legendItems.stepLegend) {\n          // step legend stuff\n          const stepLegendItems = [];\n          (Object.keys(props.legendItems.stepLegend)).forEach(d => {\n            const item = {\n              key: d,\n              value: props.legendItems.stepLegend[d],\n            };\n            stepLegendItems.push(item);\n          });\n          // console.log(stepLegendItems);\n\n          const stepLegend = legendDiv.appendSelect('div.legend.stepLegend')\n            .selectAll('.legend-item')\n            .data(stepLegendItems); // for smooth data updation\n\n          stepLegend.enter().append('div')\n            .attr('class', 'legend-item')\n            .styles({\n              display: 'flex',\n              'align-items': 'center',\n            })\n            .html((d, i) => {\n              const stepSize = (stripheight) / stepLegendItems.length;\n              return `<span style=\"width:${8}px; height:${((+d.key) + 1) * stepSize}px; background-color:${props.baseColor};\"></span><p style=\"margin:0 0 0 0.5rem;\">${d.value}</p>`;\n            })\n            .merge(stepLegend)\n            .styles({\n              display: 'flex',\n              'align-items': 'center',\n            })\n            .html((d, i) => {\n              const stepSize = (stripheight) / stepLegendItems.length;\n              return `<span style=\"width:${8}px; height:${((+d.key) + 1) * stepSize}px; background-color:${props.baseColor};\"></span><p style=\"margin:0 0 0 0.5rem;\">${d.value}</p>`;\n            });\n\n          stepLegend.exit()\n            .transition(transition)\n            .remove();\n        }\n      }\n      return this;\n    }\n}\n// console.log(this.defaultProps);\nexport default CountryLockdownIndicatorStrips;\n"]},"metadata":{},"sourceType":"module"}