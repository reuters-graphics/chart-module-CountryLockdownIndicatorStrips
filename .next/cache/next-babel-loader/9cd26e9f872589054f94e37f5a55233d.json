{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/prasanta/ReutersWork/INTERACTIVES/COVID-APP/chart-module-CountryLockdownIndicatorStrips/src/demo/Chart.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport Chart from '../lib/chart.js';\nimport ChartContainer from './furniture/ChartContainer';\nimport React from 'react';\nimport WeeklyAverage from '@reuters-graphics/chart-module-weeklyaverage';\nimport { base } from '@reuters-graphics/style-color/dist/categorical';\nimport casesData from './casesData.json';\nimport debounce from 'lodash/debounce';\nimport defaultData from './defaultData.json';\n\nvar ChartComponent = /*#__PURE__*/function (_React$Component) {\n  _inherits(ChartComponent, _React$Component);\n\n  var _super = _createSuper(ChartComponent);\n\n  function ChartComponent() {\n    var _this;\n\n    _classCallCheck(this, ChartComponent);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      width: ''\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"chartContainer\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"myChartContainer\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"chart\", new Chart());\n\n    _defineProperty(_assertThisInitialized(_this), \"myChart\", new WeeklyAverage());\n\n    _defineProperty(_assertThisInitialized(_this), \"resize\", debounce(function () {\n      _this.chart.props({\n        legendItems: {\n          // should contain items from stripColor\n          // null: null,\n          stepLegend: false,\n          indexLegend: {\n            0: 'no NONO',\n            1: 'recommend closing',\n            2: 'require closing on some levels',\n            3: 'require closing all levels',\n            4: null\n          }\n        }\n      }).draw();\n\n      _this.myChart.draw();\n    }, 250));\n\n    return _this;\n  }\n\n  _createClass(ChartComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // Use our chart module.\n      this.chart.selection(this.chartContainer.current).data(defaultData).props({\n        locale: 'en',\n        dateSeries: ['2019-12-31', '2020-07-07'],\n        dataParams: {\n          date: 'date',\n          index: 'c1',\n          stepValue: 'flag',\n          steps: 2 // stepValue = 0, 1...\n\n        },\n        margin: {\n          top: 10,\n          right: 18,\n          bottom: 10,\n          left: 18\n        },\n        baseColor: 'rgba(255,255,255,0.1)',\n        stripColor: {\n          0: '#4C566A',\n          1: '#948072',\n          2: '#f68e26',\n          3: '#de2d26'\n        },\n        legendItems: {\n          // should contain items from stripColor\n          \"null\": 'no data',\n          stepLegend: {\n            0: 'targeted',\n            1: 'nationwide'\n          },\n          indexLegend: {\n            0: 'no measures',\n            1: 'recommend closing',\n            2: 'require closing on some levels',\n            3: 'require closing all levels',\n            4: 'something'\n          }\n        },\n        chartTitle: 'School closing measures',\n        axis: true\n      }).draw(); // Add a listener to resize chart with the window.\n\n      window.addEventListener('resize', this.resize); // Gurman's chart\n\n      this.myChart.selection(this.myChartContainer.current).data(casesData).props({\n        stroke: 'rgba(255, 255, 255, 0.15)',\n        // colour of line\n        strokeWidth: 3.14,\n        // width of the line\n        fill: '#eee',\n        // colour of the bars\n        height: 120,\n        // chart height\n        avg_days: 7,\n        // avg line should be an how many day rolling avg\n        left_y_axis: true,\n        x_axis: false,\n        bars: false,\n        // True by default.\n        // If you want just the line, set value to true\n        margin: {\n          left: 18,\n          right: 18,\n          top: 10,\n          bottom: 5\n        },\n        date_range: ['2019-12-31', '2020-07-07'],\n        padding: 0,\n        // to set padding between the bars.\n        // value should be between 0 to 1\n        labels: true,\n        // Setting this to true will show a label\n        // to explain what the bars and line are\n        // text: {\n        //   subhed: 'Weekly average infections reported',\n        // },\n        variable_name: 'cases' // What is this a chart of? Infections? Deaths? Tests?\n\n      }).draw();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // Remove listener if the component is removed, too.\n      window.removeEventListener('resize', this.resize);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      // Update the chart with the component.\n      // Can change data or props here, whatever...\n      this.chart.draw();\n      this.myChart.draw();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var width = this.state.width;\n      return __jsx(ChartContainer, {\n        width: width,\n        setWidth: function setWidth(width) {\n          return _this2.setState({\n            width: width\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 9\n        }\n      }, \" \", __jsx(\"div\", {\n        id: \"myChart\",\n        ref: this.myChartContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }\n      }), __jsx(\"div\", {\n        id: \"chart\",\n        ref: this.chartContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }\n      }));\n    }\n  }]);\n\n  return ChartComponent;\n}(React.Component);\n\nexport default ChartComponent;","map":{"version":3,"sources":["/Users/prasanta/ReutersWork/INTERACTIVES/COVID-APP/chart-module-CountryLockdownIndicatorStrips/src/demo/Chart.js"],"names":["Chart","ChartContainer","React","WeeklyAverage","base","casesData","debounce","defaultData","ChartComponent","width","createRef","chart","props","legendItems","stepLegend","indexLegend","draw","myChart","selection","chartContainer","current","data","locale","dateSeries","dataParams","date","index","stepValue","steps","margin","top","right","bottom","left","baseColor","stripColor","chartTitle","axis","window","addEventListener","resize","myChartContainer","stroke","strokeWidth","fill","height","avg_days","left_y_axis","x_axis","bars","date_range","padding","labels","variable_name","removeEventListener","state","setState","Component"],"mappings":"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","sourcesContent":["import Chart from '../lib/chart.js';\nimport ChartContainer from './furniture/ChartContainer';\nimport React from 'react';\nimport WeeklyAverage from '@reuters-graphics/chart-module-weeklyaverage';\nimport { base } from '@reuters-graphics/style-color/dist/categorical';\nimport casesData from './casesData.json';\nimport debounce from 'lodash/debounce';\nimport defaultData from './defaultData.json';\n\nclass ChartComponent extends React.Component {\n    state = { width: '' };\n    chartContainer = React.createRef();\n\n    myChartContainer = React.createRef();\n\n    // Instantiate and add our chart class to this component.\n    chart = new Chart();\n    myChart = new WeeklyAverage();\n\n    // A resize function to redraw the chart.\n    resize = debounce(() => {\n      this.chart\n        .props({\n          legendItems: { // should contain items from stripColor\n            // null: null,\n            stepLegend: false,\n            indexLegend: {\n              0: 'no NONO',\n              1: 'recommend closing',\n              2: 'require closing on some levels',\n              3: 'require closing all levels',\n              4: null,\n            },\n          },\n        })\n        .draw();\n      this.myChart.draw();\n    }, 250);\n\n    componentDidMount() {\n      // Use our chart module.\n      this.chart\n        .selection(this.chartContainer.current)\n        .data(defaultData)\n        .props({\n          locale: 'en',\n          dateSeries: ['2019-12-31', '2020-07-07'],\n          dataParams: {\n            date: 'date',\n            index: 'c1',\n            stepValue: 'flag',\n            steps: 2, // stepValue = 0, 1...\n          },\n          margin: {\n            top: 10,\n            right: 18,\n            bottom: 10,\n            left: 18,\n          },\n          baseColor: 'rgba(255,255,255,0.1)',\n          stripColor: {\n            0: '#4C566A',\n            1: '#948072',\n            2: '#f68e26',\n            3: '#de2d26',\n          },\n          legendItems: { // should contain items from stripColor\n            null: 'no data',\n            stepLegend: {\n              0: 'targeted',\n              1: 'nationwide',\n            },\n            indexLegend: {\n              0: 'no measures',\n              1: 'recommend closing',\n              2: 'require closing on some levels',\n              3: 'require closing all levels',\n              4: 'something',\n            },\n          },\n          chartTitle: 'School closing measures',\n          axis: true,\n        })\n        .draw();\n\n      // Add a listener to resize chart with the window.\n      window.addEventListener('resize', this.resize);\n\n      // Gurman's chart\n\n      this.myChart\n        .selection(this.myChartContainer.current)\n        .data(casesData)\n        .props({\n          stroke: 'rgba(255, 255, 255, 0.15)', // colour of line\n          strokeWidth: 3.14, // width of the line\n          fill: '#eee', // colour of the bars\n          height: 120, // chart height\n          avg_days: 7, // avg line should be an how many day rolling avg\n          left_y_axis: true,\n          x_axis: false,\n          bars: false, // True by default.\n          // If you want just the line, set value to true\n          margin: {\n            left: 18, right: 18, top: 10, bottom: 5,\n          },\n          date_range: ['2019-12-31', '2020-07-07'],\n          padding: 0, // to set padding between the bars.\n          // value should be between 0 to 1\n\n          labels: true, // Setting this to true will show a label\n          // to explain what the bars and line are\n          // text: {\n          //   subhed: 'Weekly average infections reported',\n          // },\n          variable_name: 'cases', // What is this a chart of? Infections? Deaths? Tests?\n        })\n        .draw();\n    }\n\n    componentWillUnmount() {\n      // Remove listener if the component is removed, too.\n      window.removeEventListener('resize', this.resize);\n    }\n\n    componentDidUpdate() {\n      // Update the chart with the component.\n      // Can change data or props here, whatever...\n      this.chart.draw();\n      this.myChart.draw();\n    }\n\n    render() {\n      const { width } = this.state;\n      return (\n        <ChartContainer\n          width={width}\n          setWidth={\n            (width) => this.setState({ width })\n          }\n        > {/* This is our chart container 👇 */}\n          <div id='myChart' ref={this.myChartContainer} />\n          <div id='chart' ref={this.chartContainer} />\n        </ChartContainer>\n      );\n    }\n}\n\nexport default ChartComponent;\n"]},"metadata":{},"sourceType":"module"}