{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport Chart from '../lib/chart.js';\nimport ChartContainer from './furniture/ChartContainer';\nimport React from 'react';\nimport WeeklyAverage from '@reuters-graphics/chart-module-weeklyaverage';\nimport { base } from '@reuters-graphics/style-color/dist/categorical';\nimport casesData from './casesData.json';\nimport debounce from 'lodash/debounce';\nimport defaultData from './defaultData.json';\n\nvar ChartComponent = /*#__PURE__*/function (_React$Component) {\n  _inherits(ChartComponent, _React$Component);\n\n  var _super = _createSuper(ChartComponent);\n\n  function ChartComponent() {\n    var _this;\n\n    _classCallCheck(this, ChartComponent);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      width: ''\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"chartContainer\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"myChartContainer\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"chart\", new Chart());\n\n    _defineProperty(_assertThisInitialized(_this), \"myChart\", new WeeklyAverage());\n\n    _defineProperty(_assertThisInitialized(_this), \"resize\", debounce(function () {\n      _this.chart.draw();\n\n      _this.myChart.draw();\n    }, 250));\n\n    return _this;\n  }\n\n  _createClass(ChartComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // Use our chart module.\n      this.chart.selection(this.chartContainer.current).data(defaultData).props({\n        locale: 'en',\n        dateSeries: ['2019-12-31', '2020-07-07'],\n        dataParams: {\n          date: 'date',\n          index: 'c1',\n          stepValue: 'flag',\n          steps: 2 // stepValue = 0, 1...\n\n        },\n        margin: {\n          top: 10,\n          right: 18,\n          bottom: 10,\n          left: 18\n        },\n        baseColor: 'rgba(255,255,255,0.1)',\n        stripColor: {\n          0: '#4C566A',\n          1: '#948072',\n          2: '#f68e26',\n          3: '#de2d26'\n        },\n        legendItems: {\n          // should contain items from stripColor\n          \"null\": 'no data',\n          stepLegend: {\n            0: 'targeted',\n            1: 'nationwide'\n          },\n          indexLegend: {\n            0: 'no measures',\n            1: 'recommend closing',\n            2: 'require closing on some levels',\n            3: 'require closing all levels'\n          }\n        },\n        chartTitle: 'School closing measures',\n        axis: true\n      }).draw(); // Add a listener to resize chart with the window.\n\n      window.addEventListener('resize', this.resize); // Gurman's chart\n\n      this.myChart.selection(this.myChartContainer.current).data(casesData).props({\n        stroke: 'rgba(255, 255, 255, 0.15)',\n        // colour of line\n        strokeWidth: 3.14,\n        // width of the line\n        fill: '#eee',\n        // colour of the bars\n        height: 120,\n        // chart height\n        avg_days: 7,\n        // avg line should be an how many day rolling avg\n        left_y_axis: true,\n        x_axis: false,\n        bars: false,\n        // True by default.\n        // If you want just the line, set value to true\n        margin: {\n          left: 18,\n          right: 18,\n          top: 10,\n          bottom: 5\n        },\n        date_range: ['2019-12-31', '2020-07-07'],\n        padding: 0,\n        // to set padding between the bars.\n        // value should be between 0 to 1\n        labels: true,\n        // Setting this to true will show a label\n        // to explain what the bars and line are\n        // text: {\n        //   subhed: 'Weekly average infections reported',\n        // },\n        variable_name: 'cases' // What is this a chart of? Infections? Deaths? Tests?\n\n      }).draw();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // Remove listener if the component is removed, too.\n      window.removeEventListener('resize', this.resize);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      // Update the chart with the component.\n      // Can change data or props here, whatever...\n      this.chart.draw();\n      this.myChart.draw();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var width = this.state.width;\n      return __jsx(ChartContainer, {\n        width: width,\n        setWidth: function setWidth(width) {\n          return _this2.setState({\n            width: width\n          });\n        }\n      }, \" \", __jsx(\"div\", {\n        id: \"myChart\",\n        ref: this.myChartContainer\n      }), __jsx(\"div\", {\n        id: \"chart\",\n        ref: this.chartContainer\n      }));\n    }\n  }]);\n\n  return ChartComponent;\n}(React.Component);\n\nexport default ChartComponent;","map":null,"metadata":{},"sourceType":"module"}