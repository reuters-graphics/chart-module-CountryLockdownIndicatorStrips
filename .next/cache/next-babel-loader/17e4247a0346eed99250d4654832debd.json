{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport ChartComponent from './base/ChartComponent';\nimport d3 from './utils/d3';\nimport defaultData from './defaultData.json';\nimport { interpolateHcl } from 'd3';\nimport d3SelectionMulti from 'd3-selection-multi'; // see docs on https://github.com/reuters-graphics/graphics-atlas-client\n// import AtlasMetadataClient from '@reuters-graphics/graphics-atlas-client';\n// const atlastClient = new AtlasMetadataClient();\n\nvar dateParse = d3.timeParse('%Y-%m-%d');\nvar dateFormat = d3.timeFormat('%b %e');\nvar dateFormat_tt = d3.timeFormat('%B %e');\nvar numberFormat_tt = d3.format(',');\n\nvar CountryLockdownIndicatorStrips = /*#__PURE__*/function (_ChartComponent) {\n  _inherits(CountryLockdownIndicatorStrips, _ChartComponent);\n\n  var _super = _createSuper(CountryLockdownIndicatorStrips);\n\n  function CountryLockdownIndicatorStrips() {\n    var _this;\n\n    _classCallCheck(this, CountryLockdownIndicatorStrips);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"defaultProps\", {\n      dataParams: {\n        date: 'date',\n        index: 'c1',\n        steps: 2,\n        // stepValue = 0, 1...\n        stepValue: 'flag'\n      },\n      height: 150,\n      stripHeight: 50,\n      margin: {\n        top: 10,\n        right: 0,\n        bottom: 10,\n        left: 0\n      },\n      valign: 'center',\n      // start, center, baseline\n      baseColor: '#ECEFF4',\n      stripColor: {\n        // should be numeric values that are mapped from the data\n        0: '#d1eeea',\n        1: '#ffe47f',\n        2: 'orange',\n        3: '#a50f15'\n      },\n      legendItems: {\n        // should contain items from stripColor\n        'null': 'no data',\n        'stepLegend': {\n          0: 'targeted',\n          1: 'nationwide'\n        },\n        'indexLegend': {\n          0: 'no measures',\n          1: 'recommend closing',\n          2: 'require closing (only some levels or categories, eg just high school, or just public schools)',\n          3: 'require closing all levels'\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"defaultData\", defaultData);\n\n    return _this;\n  }\n\n  _createClass(CountryLockdownIndicatorStrips, [{\n    key: \"draw\",\n    value: function draw() {\n      var data = this.data();\n      var props = this.props();\n      var node = this.selection().node(); // get country details from AtlasClient from ISO-2\n      // props.country = atlastClient.getCountry(props.countryISO2);\n\n      var _node$getBoundingClie = node.getBoundingClientRect(),\n          width = _node$getBoundingClie.width;\n\n      var transition = d3.transition().duration(750); // main chart container\n\n      var chartDiv = this.selection().appendSelect('div') // see docs in ./utils/d3.js\n      .attr('class', \"CountryLockdownIndicatorStrips\").style('width', \"\".concat(width, \"px\")) // .style('height', `${props.height}px`)\n      .appendSelect('div').styles({\n        'padding-top': \"\".concat(props.margin.top, \"px\"),\n        'padding-right': \"\".concat(props.margin.right, \"px\"),\n        'padding-bottom': \"\".concat(props.margin.bottom, \"px\"),\n        'padding-left': \"\".concat(props.margin.left, \"px\")\n      });\n      var stripheight = props.legendItems ? props.stripHeight - props.margin.top : props.height - props.margin.top - props.margin.bottom; // set scales\n\n      var yScale = d3.scaleLinear().domain([0, props.dataParams.steps - 1]).range([stripheight, props.margin.top]);\n      var xScale = d3.scaleBand().domain(data.map(function (d) {\n        return dateParse(d[props.dataParams.date]);\n      })).range([props.margin.left, width - props.margin.right]).padding(0);\n      var colorDomain = props.stripColor ? Object.keys(props.stripColor).map(function (d) {\n        return +d;\n      }) : d3.extent(data.map(function (d) {\n        return d[props.dataParams.index];\n      }));\n      var colorRange = props.stripColor ? colorDomain.map(function (d) {\n        return props.stripColor[\"\".concat(d)];\n      }) : ['#cccccc', '#333333'];\n      var colorScale = d3.scaleLinear().domain(colorDomain).range(colorRange).interpolate(interpolateHcl); // make bars\n\n      var bars = chartDiv.appendSelect('div.bars-container').styles({\n        'display': 'flex',\n        'align-items': \"\".concat(props.valign)\n      }).selectAll('.bar').data(data, function (d, i) {\n        return d[props.dataParams.date];\n      }); // for smooth data updation\n\n      bars.enter().append('div').attr('class', function (d) {\n        return \"bar \".concat(d[props.dataParams.date]);\n      }).style('display', 'inline-block').style('height', function (d) {\n        var stepSize = stripheight / props.dataParams.steps;\n        var step = d[props.dataParams.stepValue] + 1;\n        return d[props.dataParams.index] ? step ? step * stepSize + 'px' : stepSize + 'px' : stepSize + 'px';\n      }).style('width', xScale.bandwidth() + 'px').style('background', function (d) {\n        var val = parseFloat(d[props.dataParams.index]);\n        return val !== null && !isNaN(val) ? colorScale(val) : props.baseColor;\n      }).merge(bars).transition(transition).style('display', 'inline-block').style('height', function (d) {\n        var stepSize = stripheight / props.dataParams.steps;\n        var step = d[props.dataParams.stepValue] + 1;\n        return d[props.dataParams.index] ? step ? step * stepSize + 'px' : stepSize + 'px' : stepSize + 'px';\n      }).style('width', xScale.bandwidth() + 'px').style('background', function (d) {\n        var val = parseFloat(d[props.dataParams.index]);\n        return val !== null && !isNaN(val) ? colorScale(val) : props.baseColor;\n      });\n      bars.exit().transition(transition).attr('height', 0).remove();\n\n      if (props.legendItems) {\n        var indexLegendItems = [];\n        Object.keys(props.legendItems.indexLegend).forEach(function (d) {\n          var item = {\n            key: d,\n            value: props.legendItems.indexLegend[d]\n          };\n          indexLegendItems.push(item);\n        });\n\n        if (props.legendItems['null']) {\n          indexLegendItems.push({\n            key: 'null',\n            value: props.legendItems['null']\n          });\n        }\n\n        var legendWidth = (width - props.margin.right - props.margin.left) / indexLegendItems.length; // make legend\n\n        var legendDiv = chartDiv.appendSelect('div.legend-container');\n        var indexLegend = legendDiv.appendSelect('div.legend.indexLegend') // .style('align-items', `${props.valign}`)\n        .selectAll('.legend-item').data(indexLegendItems); // for smooth data updation\n\n        indexLegend.enter().append('div').attr('class', \"legend-item\").styles({\n          'display': 'flex',\n          'align-items': \"start\"\n        }) // .style('width', `${legendWidth}px`)\n        .html(function (d) {\n          var color = +d.key !== null && !isNaN(+d.key) ? props.stripColor[+d.key] : props.baseColor;\n          return \"<span style=\\\"width:1rem; height:1rem;min-width:1rem; min-height:1rem; background: \".concat(color, \"\\\"></span> <p style=\\\"margin:0 0 0 0.5rem;\\\">\").concat(d.value, \"</p>\");\n        }).merge(indexLegend).styles({\n          'display': 'flex',\n          'align-items': \"start\"\n        }) // .style('width', `${legendWidth}px`)\n        .html(function (d) {\n          var color = +d.key !== null && !isNaN(+d.key) ? props.stripColor[+d.key] : props.baseColor;\n          return \"<span style=\\\"width:1rem; height:1rem;min-width:1rem; min-height:1rem; background: \".concat(color, \"\\\"></span> <p style=\\\"margin:0 0 0 0.5rem;\\\">\").concat(d.value, \"</p>\");\n        });\n        indexLegend.exit().transition(transition).remove();\n\n        if (props.legendItems.stepLegend) {\n          // step legend stuff\n          var stepLegendItems = [];\n          Object.keys(props.legendItems.stepLegend).forEach(function (d) {\n            var item = {\n              key: d,\n              value: props.legendItems.stepLegend[d]\n            };\n            stepLegendItems.push(item);\n          });\n          console.log(stepLegendItems);\n          var stepLegend = legendDiv.appendSelect('div.legend.stepLegend').selectAll('.legend-item').data(stepLegendItems); // for smooth data updation\n\n          stepLegend.enter().append('div').attr('class', 'legend-item').styles({\n            'display': 'flex',\n            'align-items': \"center\"\n          }).html(function (d, i) {\n            var stepSize = stripheight / stepLegendItems.length;\n            return \"<span style=\\\"width:\".concat(8, \"px; height:\", (+d.key + 1) * stepSize, \"px; background:transparent; border: 0.5px solid #333333;\\\"></span><p style=\\\"margin:0 0 0 0.5rem;\\\">\").concat(d.value, \"</p>\");\n          }).merge(stepLegend).styles({\n            'display': 'flex',\n            'align-items': \"center\"\n          }).html(function (d, i) {\n            var stepSize = stripheight / stepLegendItems.length;\n            return \"<span style=\\\"width:\".concat(8, \"px; height:\", (+d.key + 1) * stepSize, \"px; background:transparent; border: 0.5px solid #333333;\\\"></span><p style=\\\"margin:0 0 0 0.5rem;\\\">\").concat(d.value, \"</p>\");\n          });\n          stepLegend.exit().transition(transition).remove();\n        }\n      }\n\n      return this;\n    }\n  }]);\n\n  return CountryLockdownIndicatorStrips;\n}(ChartComponent); // console.log(this.defaultProps);\n\n\nexport default CountryLockdownIndicatorStrips;","map":{"version":3,"sources":["/Users/prasanta/ReutersWork/INTERACTIVES/COVID-APP/chart-module-CountryLockdownIndicatorStrips/src/lib/chart.js"],"names":["ChartComponent","d3","defaultData","interpolateHcl","d3SelectionMulti","dateParse","timeParse","dateFormat","timeFormat","dateFormat_tt","numberFormat_tt","format","CountryLockdownIndicatorStrips","dataParams","date","index","steps","stepValue","height","stripHeight","margin","top","right","bottom","left","valign","baseColor","stripColor","legendItems","data","props","node","selection","getBoundingClientRect","width","transition","duration","chartDiv","appendSelect","attr","style","styles","stripheight","yScale","scaleLinear","domain","range","xScale","scaleBand","map","d","padding","colorDomain","Object","keys","extent","colorRange","colorScale","interpolate","bars","selectAll","i","enter","append","stepSize","step","bandwidth","val","parseFloat","isNaN","merge","exit","remove","indexLegendItems","indexLegend","forEach","item","key","value","push","legendWidth","length","legendDiv","html","color","stepLegend","stepLegendItems","console","log"],"mappings":"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","sourcesContent":["import ChartComponent from './base/ChartComponent';\nimport d3 from './utils/d3';\nimport defaultData from './defaultData.json';\nimport { interpolateHcl } from 'd3';\nimport d3SelectionMulti from 'd3-selection-multi';\n// see docs on https://github.com/reuters-graphics/graphics-atlas-client\n// import AtlasMetadataClient from '@reuters-graphics/graphics-atlas-client';\n// const atlastClient = new AtlasMetadataClient();\n\nconst dateParse = d3.timeParse('%Y-%m-%d');\nconst dateFormat = d3.timeFormat('%b %e');\nconst dateFormat_tt = d3.timeFormat('%B %e');\nconst numberFormat_tt = d3.format(',');\n\nclass CountryLockdownIndicatorStrips extends ChartComponent {\n    defaultProps = {\n        dataParams: {\n            date: 'date',\n            index: 'c1',\n            steps: 2, // stepValue = 0, 1...\n            stepValue: 'flag',\n        },\n        height: 150,\n        stripHeight: 50,\n        margin: {\n            top: 10,\n            right: 0,\n            bottom: 10,\n            left: 0,\n        },\n        valign: 'center', // start, center, baseline\n        baseColor: '#ECEFF4',\n        stripColor: { // should be numeric values that are mapped from the data\n            0: '#d1eeea',\n            1: '#ffe47f',\n            2: 'orange',\n            3: '#a50f15',\n        },\n        legendItems: { // should contain items from stripColor\n            'null': 'no data',\n            'stepLegend': {\n                0: 'targeted',\n                1: 'nationwide',\n            },\n            'indexLegend': {\n                0: 'no measures',\n                1: 'recommend closing',\n                2: 'require closing (only some levels or categories, eg just high school, or just public schools)',\n                3: 'require closing all levels'\n            },\n        }\n    };\n\n    defaultData = defaultData;\n\n    draw() {\n        const data = this.data();\n        const props = this.props();\n        const node = this.selection().node();\n\n        // get country details from AtlasClient from ISO-2\n        // props.country = atlastClient.getCountry(props.countryISO2);\n\n        const {\n            width\n        } = node.getBoundingClientRect();\n\n        const transition = d3.transition()\n            .duration(750);\n\n        // main chart container\n        const chartDiv = this.selection()\n            .appendSelect('div') // see docs in ./utils/d3.js\n            .attr('class', `CountryLockdownIndicatorStrips`)\n            .style('width', `${width}px`)\n            // .style('height', `${props.height}px`)\n            .appendSelect('div')\n            .styles({\n                'padding-top': `${props.margin.top}px`,\n                'padding-right': `${props.margin.right}px`,\n                'padding-bottom': `${props.margin.bottom}px`,\n                'padding-left': `${props.margin.left}px`,\n            });\n\n        const stripheight = props.legendItems ? (props.stripHeight - props.margin.top) : (props.height - props.margin.top - props.margin.bottom);\n\n        // set scales\n        const yScale = d3.scaleLinear()\n            .domain([0, props.dataParams.steps - 1])\n            .range([stripheight, props.margin.top]);\n\n        const xScale = d3.scaleBand()\n            .domain(data.map(d => dateParse(d[props.dataParams.date])))\n            .range([props.margin.left, width - props.margin.right])\n            .padding(0);\n\n        const colorDomain = props.stripColor ? (Object.keys(props.stripColor)).map(d => +d) : d3.extent(data.map(d => d[props.dataParams.index]));\n\n        const colorRange = props.stripColor ? colorDomain.map(d => props.stripColor[`${d}`]) : ['#cccccc', '#333333']\n\n        const colorScale = d3.scaleLinear()\n            .domain(colorDomain)\n            .range(colorRange)\n            .interpolate(interpolateHcl);\n\n        // make bars\n        const bars = chartDiv.appendSelect('div.bars-container')\n            .styles({\n                'display': 'flex',\n                'align-items': `${props.valign}`\n            })\n            .selectAll('.bar')\n            .data(data, (d, i) => d[props.dataParams.date]); // for smooth data updation\n\n        bars.enter().append('div')\n            .attr('class', d => `bar ${d[props.dataParams.date]}`)\n            .style('display', 'inline-block')\n            .style('height', d => {\n                const stepSize = (stripheight) / props.dataParams.steps;\n                const step = d[props.dataParams.stepValue] + 1;\n                return d[props.dataParams.index] ? (step ? step * stepSize + 'px' : stepSize + 'px') : stepSize + 'px';\n            })\n            .style('width', xScale.bandwidth() + 'px')\n            .style('background', d => {\n                let val = parseFloat(d[props.dataParams.index]);\n                return (val !== null) && !(isNaN(val)) ? colorScale(val) : props.baseColor;\n            })\n            .merge(bars)\n            .transition(transition)\n            .style('display', 'inline-block')\n            .style('height', d => {\n                const stepSize = (stripheight) / props.dataParams.steps;\n                const step = d[props.dataParams.stepValue] + 1;\n                return d[props.dataParams.index] ? (step ? step * stepSize + 'px' : stepSize + 'px') : stepSize + 'px';\n            })\n            .style('width', xScale.bandwidth() + 'px')\n            .style('background', d => {\n                let val = parseFloat(d[props.dataParams.index]);\n                return (val !== null) && !(isNaN(val)) ? colorScale(val) : props.baseColor;\n            });\n\n        bars.exit()\n            .transition(transition)\n            .attr('height', 0)\n            .remove();\n\n\n        if (props.legendItems) {\n            const indexLegendItems = [];\n            (Object.keys(props.legendItems.indexLegend)).forEach(d => {\n                let item = {\n                    key: d,\n                    value: props.legendItems.indexLegend[d]\n                }\n                indexLegendItems.push(item);\n            });\n            if (props.legendItems['null']) {\n                indexLegendItems.push({\n                    key: 'null',\n                    value: props.legendItems['null']\n                })\n            }\n            const legendWidth = (width - props.margin.right - props.margin.left) / indexLegendItems.length;\n\n\n            // make legend\n            const legendDiv = chartDiv.appendSelect('div.legend-container');\n\n            const indexLegend = legendDiv.appendSelect('div.legend.indexLegend')\n                // .style('align-items', `${props.valign}`)\n                .selectAll('.legend-item')\n                .data(indexLegendItems); // for smooth data updation\n\n            indexLegend.enter().append('div')\n                .attr('class', `legend-item`)\n                .styles({\n                    'display': 'flex',\n                    'align-items': `start`\n                })\n                // .style('width', `${legendWidth}px`)\n                .html(d => {\n                    let color = (+d.key !== null) && !(isNaN(+d.key)) ? props.stripColor[+d.key] : props.baseColor;\n                    return `<span style=\"width:1rem; height:1rem;min-width:1rem; min-height:1rem; background: ${color}\"></span> <p style=\"margin:0 0 0 0.5rem;\">${d.value}</p>`\n                })\n                .merge(indexLegend)\n                .styles({\n                    'display': 'flex',\n                    'align-items': `start`\n                })\n                // .style('width', `${legendWidth}px`)\n                .html(d => {\n                    let color = (+d.key !== null) && !(isNaN(+d.key)) ? props.stripColor[+d.key] : props.baseColor;\n                    return `<span style=\"width:1rem; height:1rem;min-width:1rem; min-height:1rem; background: ${color}\"></span> <p style=\"margin:0 0 0 0.5rem;\">${d.value}</p>`\n                });\n\n            indexLegend.exit()\n                .transition(transition)\n                .remove();\n\n            if (props.legendItems.stepLegend) {\n                // step legend stuff\n                const stepLegendItems = [];\n                (Object.keys(props.legendItems.stepLegend)).forEach(d => {\n                    let item = {\n                        key: d,\n                        value: props.legendItems.stepLegend[d]\n                    }\n                    stepLegendItems.push(item);\n                });\n                console.log(stepLegendItems)\n\n                const stepLegend = legendDiv.appendSelect('div.legend.stepLegend')\n                    .selectAll('.legend-item')\n                    .data(stepLegendItems); // for smooth data updation\n\n                stepLegend.enter().append('div')\n                    .attr('class', 'legend-item')\n                    .styles({\n                        'display': 'flex',\n                        'align-items': `center`,\n                    })\n                    .html((d, i) => {\n                        let stepSize = (stripheight) / stepLegendItems.length;\n                        return `<span style=\"width:${8}px; height:${((+d.key) + 1)*stepSize}px; background:transparent; border: 0.5px solid #333333;\"></span><p style=\"margin:0 0 0 0.5rem;\">${d.value}</p>`\n                    })\n                    .merge(stepLegend)\n                    .styles({\n                        'display': 'flex',\n                        'align-items': `center`,\n                    })\n                    .html((d, i) => {\n                        let stepSize = (stripheight) / stepLegendItems.length;\n                        return `<span style=\"width:${8}px; height:${((+d.key) + 1)*stepSize}px; background:transparent; border: 0.5px solid #333333;\"></span><p style=\"margin:0 0 0 0.5rem;\">${d.value}</p>`\n                    });\n\n                stepLegend.exit()\n                    .transition(transition)\n                    .remove();\n            }\n\n\n\n        }\n        return this;\n    }\n}\n// console.log(this.defaultProps);\nexport default CountryLockdownIndicatorStrips;"]},"metadata":{},"sourceType":"module"}