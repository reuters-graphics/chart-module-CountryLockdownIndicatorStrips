{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Chart from '../lib/chart.js';\nimport ChartContainer from './furniture/ChartContainer';\nimport React from 'react';\nimport WeeklyAverage from '@reuters-graphics/chart-module-weeklyaverage';\nimport { base } from '@reuters-graphics/style-color/dist/categorical';\nimport casesData from './casesData.json';\nimport debounce from 'lodash/debounce';\nimport defaultData from './defaultData.json';\n\nclass ChartComponent extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      width: ''\n    });\n\n    _defineProperty(this, \"chartContainer\", React.createRef());\n\n    _defineProperty(this, \"myChartContainer\", React.createRef());\n\n    _defineProperty(this, \"chart\", new Chart());\n\n    _defineProperty(this, \"myChart\", new WeeklyAverage());\n\n    _defineProperty(this, \"resize\", debounce(() => {\n      this.chart.props({\n        legendItems: {\n          // should contain items from stripColor\n          // null: null,\n          // stepLegend: {\n          //   0: null,\n          //   1: null,\n          // },\n          indexLegend: {\n            0: 'no NONO',\n            1: 'recommend closing',\n            2: 'require closing on some levels',\n            3: 'require closing all levels',\n            4: null\n          }\n        }\n      }).draw();\n      this.myChart.draw();\n    }, 250));\n  }\n\n  componentDidMount() {\n    // Use our chart module.\n    this.chart.selection(this.chartContainer.current).data(defaultData).props({\n      locale: 'en',\n      dateSeries: ['2019-12-31', '2020-07-07'],\n      dataParams: {\n        date: 'date',\n        index: 'c1',\n        stepValue: 'flag',\n        steps: 2 // stepValue = 0, 1...\n\n      },\n      margin: {\n        top: 10,\n        right: 18,\n        bottom: 10,\n        left: 18\n      },\n      baseColor: 'rgba(255,255,255,0.1)',\n      stripColor: {\n        0: '#4C566A',\n        1: '#948072',\n        2: '#f68e26',\n        3: '#de2d26'\n      },\n      legendItems: {\n        // should contain items from stripColor\n        null: 'no data',\n        stepLegend: {\n          0: 'targeted',\n          1: 'nationwide'\n        },\n        indexLegend: {\n          0: 'no measures',\n          1: 'recommend closing',\n          2: 'require closing on some levels',\n          3: 'require closing all levels',\n          4: 'something'\n        }\n      },\n      chartTitle: 'School closing measures',\n      axis: true\n    }).draw(); // Add a listener to resize chart with the window.\n\n    window.addEventListener('resize', this.resize); // Gurman's chart\n\n    this.myChart.selection(this.myChartContainer.current).data(casesData).props({\n      stroke: 'rgba(255, 255, 255, 0.15)',\n      // colour of line\n      strokeWidth: 3.14,\n      // width of the line\n      fill: '#eee',\n      // colour of the bars\n      height: 120,\n      // chart height\n      avg_days: 7,\n      // avg line should be an how many day rolling avg\n      left_y_axis: true,\n      x_axis: false,\n      bars: false,\n      // True by default.\n      // If you want just the line, set value to true\n      margin: {\n        left: 18,\n        right: 18,\n        top: 10,\n        bottom: 5\n      },\n      date_range: ['2019-12-31', '2020-07-07'],\n      padding: 0,\n      // to set padding between the bars.\n      // value should be between 0 to 1\n      labels: true,\n      // Setting this to true will show a label\n      // to explain what the bars and line are\n      // text: {\n      //   subhed: 'Weekly average infections reported',\n      // },\n      variable_name: 'cases' // What is this a chart of? Infections? Deaths? Tests?\n\n    }).draw();\n  }\n\n  componentWillUnmount() {\n    // Remove listener if the component is removed, too.\n    window.removeEventListener('resize', this.resize);\n  }\n\n  componentDidUpdate() {\n    // Update the chart with the component.\n    // Can change data or props here, whatever...\n    this.chart.draw();\n    this.myChart.draw();\n  }\n\n  render() {\n    const {\n      width\n    } = this.state;\n    return __jsx(ChartContainer, {\n      width: width,\n      setWidth: width => this.setState({\n        width\n      })\n    }, \" \", __jsx(\"div\", {\n      id: \"myChart\",\n      ref: this.myChartContainer\n    }), __jsx(\"div\", {\n      id: \"chart\",\n      ref: this.chartContainer\n    }));\n  }\n\n}\n\nexport default ChartComponent;","map":null,"metadata":{},"sourceType":"module"}