{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport ChartComponent from './base/ChartComponent';\nimport d3 from './utils/d3';\nimport defaultData from './defaultData.json'; // see docs on https://github.com/reuters-graphics/graphics-atlas-client\n\nimport AtlasMetadataClient from '@reuters-graphics/graphics-atlas-client';\nconst atlastClient = new AtlasMetadataClient();\nconst dateParse = d3.timeParse(\"%Y-%m-%d\");\nconst dateFormat = d3.timeFormat(\"%b %e\");\nconst dateFormat_tt = d3.timeFormat(\"%B %e\");\nconst numberFormat_tt = d3.format(\",\");\n\nclass CountryLockdownIndicatorStrips extends ChartComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"defaultProps\", {\n      locale: 'en',\n      countryISO2: 'IN',\n      paramAccesors: {\n        date: 'date'\n      },\n      stroke: '#aaa',\n      strokeWidth: 1,\n      fill: 'steelblue',\n      height: 200\n    });\n\n    _defineProperty(this, \"defaultData\", defaultData);\n  }\n\n  draw() {\n    const data = this.data();\n    const props = this.props();\n    const node = this.selection().node();\n    console.log(data); // get country details from AtlasClient from ISO-2\n\n    props.country = atlastClient.getCountry(props.countryISO2); // format the lockdown data for strip-plot\n\n    const CHART_DATA = [];\n    const {\n      width\n    } = node.getBoundingClientRect();\n    const transition = d3.transition().duration(750);\n    const g = this.selection().appendSelect('svg') // see docs in ./utils/d3.js\n    .attr('width', width).attr('height', props.height).appendSelect('g'); // .attr('transform', `translate(${width / 2 - 60}, 0)`);\n\n    const circles = g.selectAll('circle').data(data, (d, i) => d);\n    circles.style('fill', props.fill).style('stroke', props.stroke);\n    circles.enter().append('circle').style('fill', props.fill).style('stroke', props.stroke).style('stroke-width', props.strokeWidth).attr('cy', props.height / 2).attr('cx', (d, i) => data.slice(0, i).reduce((a, b) => a + b, 0) + d / 2).merge(circles).transition(transition).attr('cx', (d, i) => data.slice(0, i).reduce((a, b) => a + b, 0) + d / 2).attr('r', d => d / 2);\n    circles.exit().transition(transition).attr('r', 0).remove();\n    return this;\n  }\n\n} // console.log(this.defaultProps);\n\n\nexport default CountryLockdownIndicatorStrips;","map":{"version":3,"sources":["/Users/prasanta/ReutersWork/INTERACTIVES/COVID-APP/chart-module-CountryLockdownIndicatorStrips/src/lib/chart.js"],"names":["ChartComponent","d3","defaultData","AtlasMetadataClient","atlastClient","dateParse","timeParse","dateFormat","timeFormat","dateFormat_tt","numberFormat_tt","format","CountryLockdownIndicatorStrips","locale","countryISO2","paramAccesors","date","stroke","strokeWidth","fill","height","draw","data","props","node","selection","console","log","country","getCountry","CHART_DATA","width","getBoundingClientRect","transition","duration","g","appendSelect","attr","circles","selectAll","d","i","style","enter","append","slice","reduce","a","b","merge","exit","remove"],"mappings":"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","sourcesContent":["import ChartComponent from './base/ChartComponent';\nimport d3 from './utils/d3';\nimport defaultData from './defaultData.json';\n\n// see docs on https://github.com/reuters-graphics/graphics-atlas-client\nimport AtlasMetadataClient from '@reuters-graphics/graphics-atlas-client';\nconst atlastClient = new AtlasMetadataClient();\n\nconst dateParse = d3.timeParse(\"%Y-%m-%d\");\nconst dateFormat = d3.timeFormat(\"%b %e\");\nconst dateFormat_tt = d3.timeFormat(\"%B %e\");\nconst numberFormat_tt = d3.format(\",\");\n\nclass CountryLockdownIndicatorStrips extends ChartComponent {\n  defaultProps = {\n    locale: 'en',\n    countryISO2: 'IN',\n    paramAccesors: {date: 'date', },\n    stroke: '#aaa',\n    strokeWidth: 1,\n    fill: 'steelblue',\n    height: 200,\n  };\n\n  defaultData = defaultData;\n\n\n\n  draw() {\n    const data = this.data();\n    const props = this.props();\n    const node = this.selection().node();\n    console.log(data)\n    // get country details from AtlasClient from ISO-2\n    props.country = atlastClient.getCountry(props.countryISO2);\n\n    // format the lockdown data for strip-plot\n    const CHART_DATA = [];\n\n    const { width } = node.getBoundingClientRect();\n\n    const transition = d3.transition()\n      .duration(750);\n\n    const g = this.selection()\n      .appendSelect('svg') // see docs in ./utils/d3.js\n      .attr('width', width)\n      .attr('height', props.height)\n      .appendSelect('g')\n      // .attr('transform', `translate(${width / 2 - 60}, 0)`);\n\n    const circles = g.selectAll('circle')\n      .data(data, (d, i) => d);\n\n    circles\n      .style('fill', props.fill)\n      .style('stroke', props.stroke);\n\n    circles.enter().append('circle')\n      .style('fill', props.fill)\n      .style('stroke', props.stroke)\n      .style('stroke-width', props.strokeWidth)\n      .attr('cy', props.height / 2)\n      .attr('cx', (d, i) =>\n        data.slice(0, i).reduce((a, b) => a + b, 0) + (d / 2)\n      )\n      .merge(circles)\n      .transition(transition)\n      .attr('cx', (d, i) =>\n        data.slice(0, i).reduce((a, b) => a + b, 0) + (d / 2)\n      )\n      .attr('r', d => d / 2);\n\n    circles.exit()\n      .transition(transition)\n      .attr('r', 0)\n      .remove();\n\n    return this;\n  }\n}\n// console.log(this.defaultProps);\nexport default CountryLockdownIndicatorStrips;\n"]},"metadata":{},"sourceType":"module"}