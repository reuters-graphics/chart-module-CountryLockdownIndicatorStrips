{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport ChartComponent from './base/ChartComponent';\nimport d3 from './utils/d3';\nimport defaultData from './defaultData.json'; // see docs on https://github.com/reuters-graphics/graphics-atlas-client\n\nimport AtlasMetadataClient from '@reuters-graphics/graphics-atlas-client';\nvar atlastClient = new AtlasMetadataClient();\nvar dateParse = d3.timeParse(\"%Y-%m-%d\");\nvar dateFormat = d3.timeFormat(\"%b %e\");\nvar dateFormat_tt = d3.timeFormat(\"%B %e\");\nvar numberFormat_tt = d3.format(\",\");\n\nvar CountryLockdownIndicatorStrips = /*#__PURE__*/function (_ChartComponent) {\n  _inherits(CountryLockdownIndicatorStrips, _ChartComponent);\n\n  var _super = _createSuper(CountryLockdownIndicatorStrips);\n\n  function CountryLockdownIndicatorStrips() {\n    var _this;\n\n    _classCallCheck(this, CountryLockdownIndicatorStrips);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"defaultProps\", {\n      locale: 'en',\n      countryISO2: 'IN',\n      dataAccessors: {\n        date: 'date',\n        index: 'c1',\n        flag: 'flag'\n      },\n      stroke: '#aaa',\n      strokeWidth: 1,\n      fill: 'steelblue',\n      height: 200\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"defaultData\", defaultData);\n\n    return _this;\n  }\n\n  _createClass(CountryLockdownIndicatorStrips, [{\n    key: \"draw\",\n    value: function draw() {\n      var data = this.data();\n      var props = this.props();\n      var node = this.selection().node();\n      console.log(data); // get country details from AtlasClient from ISO-2\n\n      props.country = atlastClient.getCountry(props.countryISO2); // format the lockdown data for strip-plot\n\n      var CHART_DATA = [];\n\n      var _node$getBoundingClie = node.getBoundingClientRect(),\n          width = _node$getBoundingClie.width;\n\n      var transition = d3.transition().duration(750);\n      var g = this.selection().appendSelect('svg') // see docs in ./utils/d3.js\n      .attr('width', width).attr('height', props.height).appendSelect('g'); // .attr('transform', `translate(${width / 2 - 60}, 0)`);\n\n      var circles = g.selectAll('circle').data(data, function (d, i) {\n        return d;\n      });\n      circles.style('fill', props.fill).style('stroke', props.stroke);\n      circles.enter().append('circle').style('fill', props.fill).style('stroke', props.stroke).style('stroke-width', props.strokeWidth).attr('cy', props.height / 2).attr('cx', function (d, i) {\n        return data.slice(0, i).reduce(function (a, b) {\n          return a + b;\n        }, 0) + d / 2;\n      }).merge(circles).transition(transition).attr('cx', function (d, i) {\n        return data.slice(0, i).reduce(function (a, b) {\n          return a + b;\n        }, 0) + d / 2;\n      }).attr('r', function (d) {\n        return d / 2;\n      });\n      circles.exit().transition(transition).attr('r', 0).remove();\n      return this;\n    }\n  }]);\n\n  return CountryLockdownIndicatorStrips;\n}(ChartComponent); // console.log(this.defaultProps);\n\n\nexport default CountryLockdownIndicatorStrips;","map":{"version":3,"sources":["/Users/prasanta/ReutersWork/INTERACTIVES/COVID-APP/chart-module-CountryLockdownIndicatorStrips/src/lib/chart.js"],"names":["ChartComponent","d3","defaultData","AtlasMetadataClient","atlastClient","dateParse","timeParse","dateFormat","timeFormat","dateFormat_tt","numberFormat_tt","format","CountryLockdownIndicatorStrips","locale","countryISO2","dataAccessors","date","index","flag","stroke","strokeWidth","fill","height","data","props","node","selection","console","log","country","getCountry","CHART_DATA","getBoundingClientRect","width","transition","duration","g","appendSelect","attr","circles","selectAll","d","i","style","enter","append","slice","reduce","a","b","merge","exit","remove"],"mappings":"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","sourcesContent":["import ChartComponent from './base/ChartComponent';\nimport d3 from './utils/d3';\nimport defaultData from './defaultData.json';\n\n// see docs on https://github.com/reuters-graphics/graphics-atlas-client\nimport AtlasMetadataClient from '@reuters-graphics/graphics-atlas-client';\nconst atlastClient = new AtlasMetadataClient();\n\nconst dateParse = d3.timeParse(\"%Y-%m-%d\");\nconst dateFormat = d3.timeFormat(\"%b %e\");\nconst dateFormat_tt = d3.timeFormat(\"%B %e\");\nconst numberFormat_tt = d3.format(\",\");\n\nclass CountryLockdownIndicatorStrips extends ChartComponent {\n  defaultProps = {\n    locale: 'en',\n    countryISO2: 'IN',\n    dataAccessors: {date: 'date', index: 'c1', flag: 'flag'},\n    stroke: '#aaa',\n    strokeWidth: 1,\n    fill: 'steelblue',\n    height: 200,\n  };\n\n  defaultData = defaultData;\n\n\n\n  draw() {\n    const data = this.data();\n    const props = this.props();\n    const node = this.selection().node();\n    console.log(data)\n    // get country details from AtlasClient from ISO-2\n    props.country = atlastClient.getCountry(props.countryISO2);\n\n    // format the lockdown data for strip-plot\n    const CHART_DATA = [];\n\n    const { width } = node.getBoundingClientRect();\n\n    const transition = d3.transition()\n      .duration(750);\n\n    const g = this.selection()\n      .appendSelect('svg') // see docs in ./utils/d3.js\n      .attr('width', width)\n      .attr('height', props.height)\n      .appendSelect('g')\n      // .attr('transform', `translate(${width / 2 - 60}, 0)`);\n\n    const circles = g.selectAll('circle')\n      .data(data, (d, i) => d);\n\n    circles\n      .style('fill', props.fill)\n      .style('stroke', props.stroke);\n\n    circles.enter().append('circle')\n      .style('fill', props.fill)\n      .style('stroke', props.stroke)\n      .style('stroke-width', props.strokeWidth)\n      .attr('cy', props.height / 2)\n      .attr('cx', (d, i) =>\n        data.slice(0, i).reduce((a, b) => a + b, 0) + (d / 2)\n      )\n      .merge(circles)\n      .transition(transition)\n      .attr('cx', (d, i) =>\n        data.slice(0, i).reduce((a, b) => a + b, 0) + (d / 2)\n      )\n      .attr('r', d => d / 2);\n\n    circles.exit()\n      .transition(transition)\n      .attr('r', 0)\n      .remove();\n\n    return this;\n  }\n}\n// console.log(this.defaultProps);\nexport default CountryLockdownIndicatorStrips;\n"]},"metadata":{},"sourceType":"module"}