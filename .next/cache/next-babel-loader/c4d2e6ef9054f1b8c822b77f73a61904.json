{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport ChartComponent from './base/ChartComponent';\nimport d3 from './utils/d3';\nimport defaultData from './defaultData.json'; // see docs on https://github.com/reuters-graphics/graphics-atlas-client\n\nimport AtlasMetadataClient from '@reuters-graphics/graphics-atlas-client';\nimport { interpolate, interpolateHsl, interpolateHcl } from 'd3';\nvar atlastClient = new AtlasMetadataClient();\nvar dateParse = d3.timeParse('%Y-%m-%d');\nvar dateFormat = d3.timeFormat('%b %e');\nvar dateFormat_tt = d3.timeFormat('%B %e');\nvar numberFormat_tt = d3.format(',');\n\nvar CountryLockdownIndicatorStrips = /*#__PURE__*/function (_ChartComponent) {\n  _inherits(CountryLockdownIndicatorStrips, _ChartComponent);\n\n  var _super = _createSuper(CountryLockdownIndicatorStrips);\n\n  function CountryLockdownIndicatorStrips() {\n    var _this;\n\n    _classCallCheck(this, CountryLockdownIndicatorStrips);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"defaultProps\", {\n      locale: 'en',\n      countryISO2: 'IN',\n      dataParams: {\n        date: 'date',\n        index: 'c1',\n        steps: 2,\n        // stepValue = 0, 1...\n        stepValue: 'flag'\n      },\n      height: 50,\n      margin: {\n        top: 10,\n        right: 10,\n        bottom: 10,\n        left: 10\n      },\n      valign: 'center',\n      // start, center, baseline\n      baseColor: '#ECEFF4',\n      stripColor: {\n        0: '#ECEFF4',\n        1: '#d1eeea',\n        2: '#ffe47f',\n        3: '#a50f15'\n      },\n      legendItems: {\n        // should contain items from stripColor\n        'null': 'No data',\n        'stepLegend': {\n          0: 'targeted',\n          1: 'nationwide'\n        },\n        0: 'no measures',\n        1: 'recommend closing',\n        2: 'require closing on some levels',\n        3: 'require closing all levels'\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"defaultData\", defaultData);\n\n    return _this;\n  }\n\n  _createClass(CountryLockdownIndicatorStrips, [{\n    key: \"draw\",\n    value: function draw() {\n      var data = this.data();\n      var props = this.props();\n      var node = this.selection().node(); // get country details from AtlasClient from ISO-2\n\n      props.country = atlastClient.getCountry(props.countryISO2);\n\n      var _node$getBoundingClie = node.getBoundingClientRect(),\n          width = _node$getBoundingClie.width;\n\n      var transition = d3.transition().duration(750); // main chart container\n\n      var chartDiv = this.selection().appendSelect('div') // see docs in ./utils/d3.js\n      .attr('class', 'CountryLockdownIndicatorStrips').style('width', \"\".concat(width, \"px\")).style('height', \"\".concat(props.height, \"px\")).appendSelect('div').style('transform', \"translate(\".concat(props.margin.left, \"px, \").concat(props.margin.top, \"px)\")); // set scales\n\n      var yScale = d3.scaleLinear().domain([0, props.dataParams.steps - 1]).range([props.height - props.margin.bottom, props.margin.top]);\n      var xScale = d3.scaleBand().domain(data.map(function (d) {\n        return dateParse(d[props.dataParams.date]);\n      })).range([props.margin.left, width - props.margin.right]).padding(0);\n      var colorDomain = props.stripColor ? Object.keys(props.stripColor).map(function (d) {\n        return +d;\n      }) : d3.extent(data.map(function (d) {\n        return d[props.dataParams.index];\n      }));\n      var colorRange = props.stripColor ? colorDomain.map(function (d) {\n        return props.stripColor[\"\".concat(d)];\n      }) : ['#cccccc', '#333333'];\n      var colorScale = d3.scaleLinear().domain(colorDomain).range(colorRange).interpolate(interpolateHcl); // make bars\n\n      var bars = chartDiv.appendSelect('div.bars-container').style('display', 'flex').style('align-items', \"\".concat(props.valign)).selectAll('.bar').data(data, function (d, i) {\n        return d[props.dataParams.date];\n      }); // for smooth data updation\n\n      bars.enter().append('div').attr('class', function (d) {\n        return \"bar \".concat(d[props.dataParams.date]);\n      }).style('display', 'inline-block').style('height', function (d) {\n        var stepSize = (props.height - props.margin.top - props.margin.bottom) / props.dataParams.steps;\n        var step = d[props.dataParams.stepValue] + 1;\n        return d[props.dataParams.index] ? step ? step * stepSize + 'px' : stepSize + 'px' : stepSize + 'px';\n      }).style('width', xScale.bandwidth() + 'px').style('background', function (d) {\n        var val = parseFloat(d[props.dataParams.index]);\n        return val !== null && !isNaN(val) ? colorScale(val) : props.baseColor;\n      }).merge(bars).transition(transition).style('display', 'inline-block').style('height', function (d) {\n        var stepSize = (props.height - props.margin.top - props.margin.bottom) / props.dataParams.steps;\n        var step = d[props.dataParams.stepValue] + 1;\n        return d[props.dataParams.index] ? step ? step * stepSize + 'px' : stepSize + 'px' : stepSize + 'px';\n      }).style('width', xScale.bandwidth() + 'px').style('background', function (d) {\n        var val = parseFloat(d[props.dataParams.index]);\n        console.log(val === null || isNaN(val));\n        return val !== null && !isNaN(val) ? colorScale(val) : props.baseColor;\n      });\n      bars.exit().transition(transition).attr('height', 0).remove(); // make legend\n\n      var legend = chartDiv.appendSelect('div.legend-container') // .style('display', 'flex')\n      // .style('align-items', `${props.valign}`)\n      .selectAll('.legend-div').data(data, function (d, i) {\n        return d[props.dataParams.date];\n      }); // for smooth data updation\n\n      return this;\n    }\n  }]);\n\n  return CountryLockdownIndicatorStrips;\n}(ChartComponent); // console.log(this.defaultProps);\n\n\nexport default CountryLockdownIndicatorStrips;","map":{"version":3,"sources":["/Users/prasanta/ReutersWork/INTERACTIVES/COVID-APP/chart-module-CountryLockdownIndicatorStrips/src/lib/chart.js"],"names":["ChartComponent","d3","defaultData","AtlasMetadataClient","interpolate","interpolateHsl","interpolateHcl","atlastClient","dateParse","timeParse","dateFormat","timeFormat","dateFormat_tt","numberFormat_tt","format","CountryLockdownIndicatorStrips","locale","countryISO2","dataParams","date","index","steps","stepValue","height","margin","top","right","bottom","left","valign","baseColor","stripColor","legendItems","data","props","node","selection","country","getCountry","getBoundingClientRect","width","transition","duration","chartDiv","appendSelect","attr","style","yScale","scaleLinear","domain","range","xScale","scaleBand","map","d","padding","colorDomain","Object","keys","extent","colorRange","colorScale","bars","selectAll","i","enter","append","stepSize","step","bandwidth","val","parseFloat","isNaN","merge","console","log","exit","remove","legend"],"mappings":"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","sourcesContent":["import ChartComponent from './base/ChartComponent';\nimport d3 from './utils/d3';\nimport defaultData from './defaultData.json';\n\n// see docs on https://github.com/reuters-graphics/graphics-atlas-client\nimport AtlasMetadataClient from '@reuters-graphics/graphics-atlas-client';\nimport { interpolate, interpolateHsl, interpolateHcl } from 'd3';\nconst atlastClient = new AtlasMetadataClient();\n\nconst dateParse = d3.timeParse('%Y-%m-%d');\nconst dateFormat = d3.timeFormat('%b %e');\nconst dateFormat_tt = d3.timeFormat('%B %e');\nconst numberFormat_tt = d3.format(',');\n\nclass CountryLockdownIndicatorStrips extends ChartComponent {\n    defaultProps = {\n        locale: 'en',\n        countryISO2: 'IN',\n        dataParams: {\n            date: 'date',\n            index: 'c1',\n            steps: 2, // stepValue = 0, 1...\n            stepValue: 'flag',\n        },\n        height: 50,\n        margin: {\n            top: 10,\n            right: 10,\n            bottom: 10,\n            left: 10,\n        },\n        valign: 'center', // start, center, baseline\n        baseColor: '#ECEFF4',\n        stripColor: {\n            0: '#ECEFF4',\n            1: '#d1eeea',\n            2: '#ffe47f',\n            3: '#a50f15',\n        },\n        legendItems: { // should contain items from stripColor\n            'null': 'No data',\n            'stepLegend': {\n                0: 'targeted',\n                1: 'nationwide'\n            },\n            0: 'no measures',\n            1: 'recommend closing',\n            2: 'require closing on some levels',\n            3: 'require closing all levels'\n        }\n    };\n\n    defaultData = defaultData;\n\n    draw() {\n        const data = this.data();\n        const props = this.props();\n        const node = this.selection().node();\n\n        // get country details from AtlasClient from ISO-2\n        props.country = atlastClient.getCountry(props.countryISO2);\n\n        const {\n            width,\n        } = node.getBoundingClientRect();\n\n        const transition = d3.transition()\n            .duration(750);\n\n        // main chart container\n        const chartDiv = this.selection()\n            .appendSelect('div') // see docs in ./utils/d3.js\n            .attr('class', 'CountryLockdownIndicatorStrips')\n            .style('width', `${width}px`)\n            .style('height', `${props.height}px`)\n            .appendSelect('div')\n            .style('transform', `translate(${props.margin.left}px, ${props.margin.top}px)`);\n\n        // set scales\n        const yScale = d3.scaleLinear()\n            .domain([0, props.dataParams.steps - 1])\n            .range([props.height - props.margin.bottom, props.margin.top]);\n\n        const xScale = d3.scaleBand()\n            .domain(data.map(d => dateParse(d[props.dataParams.date])))\n            .range([props.margin.left, width - props.margin.right])\n            .padding(0);\n\n        const colorDomain = props.stripColor ? (Object.keys(props.stripColor)).map(d => +d) : d3.extent(data.map(d => d[props.dataParams.index]));\n\n        const colorRange = props.stripColor ? colorDomain.map(d => props.stripColor[`${d}`]) : ['#cccccc', '#333333']\n\n        const colorScale = d3.scaleLinear()\n            .domain(colorDomain)\n            .range(colorRange)\n            .interpolate(interpolateHcl);\n\n        // make bars\n        const bars = chartDiv.appendSelect('div.bars-container')\n            .style('display', 'flex')\n            .style('align-items', `${props.valign}`)\n            .selectAll('.bar')\n            .data(data, (d, i) => d[props.dataParams.date]); // for smooth data updation\n\n        bars.enter().append('div')\n            .attr('class', d => `bar ${d[props.dataParams.date]}`)\n            .style('display', 'inline-block')\n            .style('height', d => {\n                const stepSize = (props.height - props.margin.top - props.margin.bottom) / props.dataParams.steps;\n                const step = d[props.dataParams.stepValue] + 1;\n                return d[props.dataParams.index] ? (step ? step * stepSize + 'px' : stepSize + 'px') : stepSize + 'px';\n            })\n            .style('width', xScale.bandwidth() + 'px')\n            .style('background', d => {\n                let val = parseFloat(d[props.dataParams.index]);\n                return (val !== null) && !(isNaN(val)) ? colorScale(val) : props.baseColor;\n            })\n            .merge(bars)\n            .transition(transition)\n            .style('display', 'inline-block')\n            .style('height', d => {\n                const stepSize = (props.height - props.margin.top - props.margin.bottom) / props.dataParams.steps;\n                const step = d[props.dataParams.stepValue] + 1;\n                return d[props.dataParams.index] ? (step ? step * stepSize + 'px' : stepSize + 'px') : stepSize + 'px';\n            })\n            .style('width', xScale.bandwidth() + 'px')\n            .style('background', d => {\n                let val = parseFloat(d[props.dataParams.index]);\n                console.log((val === null) || (isNaN(val)))\n                return (val !== null) && !(isNaN(val)) ? colorScale(val) : props.baseColor;\n            });\n\n        bars.exit()\n            .transition(transition)\n            .attr('height', 0)\n            .remove();\n\n        // make legend\n        const legend = chartDiv.appendSelect('div.legend-container')\n            // .style('display', 'flex')\n            // .style('align-items', `${props.valign}`)\n            .selectAll('.legend-div')\n            .data(data, (d, i) => d[props.dataParams.date]); // for smooth data updation\n\n        return this;\n    }\n}\n// console.log(this.defaultProps);\nexport default CountryLockdownIndicatorStrips;"]},"metadata":{},"sourceType":"module"}