{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport ChartComponent from './base/ChartComponent';\nimport d3 from './utils/d3';\nimport defaultData from './defaultData.json'; // see docs on https://github.com/reuters-graphics/graphics-atlas-client\n\nimport AtlasMetadataClient from '@reuters-graphics/graphics-atlas-client';\nconst atlastClient = new AtlasMetadataClient();\nconst dateParse = d3.timeParse(\"%Y-%m-%d\");\nconst dateFormat = d3.timeFormat(\"%b %e\");\nconst dateFormat_tt = d3.timeFormat(\"%B %e\");\nconst numberFormat_tt = d3.format(\",\");\n\nclass CountryLockdownIndicatorStrips extends ChartComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"defaultProps\", {\n      locale: 'en',\n      countryISO2: 'IN',\n      dataAccessors: {\n        date: 'date',\n        index: 'c1',\n        flag: 'flag'\n      },\n      height: 200,\n      margins: {\n        top: 10,\n        right: 10,\n        bottom: 10,\n        left: 10\n      },\n      stroke: '#aaa',\n      strokeWidth: 1,\n      fill: 'steelblue'\n    });\n\n    _defineProperty(this, \"defaultData\", defaultData);\n  }\n\n  draw() {\n    const data = this.data();\n    const props = this.props();\n    const node = this.selection().node();\n    console.log(data); // get country details from AtlasClient from ISO-2\n\n    props.country = atlastClient.getCountry(props.countryISO2); // format the lockdown data for strip-plot\n\n    const CHART_DATA = [];\n    const {\n      width\n    } = node.getBoundingClientRect();\n    const transition = d3.transition().duration(750);\n    const g = this.selection().appendSelect('svg') // see docs in ./utils/d3.js\n    .attr('width', width).attr('height', props.height).appendSelect('g').attr('transform', `translate(${props.margins.left}, ${props.margins.top})`); // const circles = g.selectAll('circle')\n    //   .data(data, (d, i) => d[props.dataAccessors.date]);\n    // circles\n    //   .style('fill', props.fill)\n    //   .style('stroke', props.stroke);\n    // circles.enter().append('circle')\n    //   .style('fill', props.fill)\n    //   .style('stroke', props.stroke)\n    //   .style('stroke-width', props.strokeWidth)\n    //   .attr('cy', props.height / 2)\n    //   .attr('cx', (d, i) =>\n    //     data.slice(0, i).reduce((a, b) => a + b, 0) + (d / 2)\n    //   )\n    //   .merge(circles)\n    //   .transition(transition)\n    //   .attr('cx', (d, i) =>\n    //     data.slice(0, i).reduce((a, b) => a + b, 0) + (d / 2)\n    //   )\n    //   .attr('r', d => d / 2);\n    // circles.exit()\n    //   .transition(transition)\n    //   .attr('r', 0)\n    //   .remove();\n\n    return this;\n  }\n\n} // console.log(this.defaultProps);\n\n\nexport default CountryLockdownIndicatorStrips;","map":{"version":3,"sources":["/Users/prasanta/ReutersWork/INTERACTIVES/COVID-APP/chart-module-CountryLockdownIndicatorStrips/src/lib/chart.js"],"names":["ChartComponent","d3","defaultData","AtlasMetadataClient","atlastClient","dateParse","timeParse","dateFormat","timeFormat","dateFormat_tt","numberFormat_tt","format","CountryLockdownIndicatorStrips","locale","countryISO2","dataAccessors","date","index","flag","height","margins","top","right","bottom","left","stroke","strokeWidth","fill","draw","data","props","node","selection","console","log","country","getCountry","CHART_DATA","width","getBoundingClientRect","transition","duration","g","appendSelect","attr"],"mappings":";;AAAA,OAAOA,cAAP,MAA2B,uBAA3B;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAOC,WAAP,MAAwB,oBAAxB,C,CAEA;;AACA,OAAOC,mBAAP,MAAgC,yCAAhC;AACA,MAAMC,YAAY,GAAG,IAAID,mBAAJ,EAArB;AAEA,MAAME,SAAS,GAAGJ,EAAE,CAACK,SAAH,CAAa,UAAb,CAAlB;AACA,MAAMC,UAAU,GAAGN,EAAE,CAACO,UAAH,CAAc,OAAd,CAAnB;AACA,MAAMC,aAAa,GAAGR,EAAE,CAACO,UAAH,CAAc,OAAd,CAAtB;AACA,MAAME,eAAe,GAAGT,EAAE,CAACU,MAAH,CAAU,GAAV,CAAxB;;AAEA,MAAMC,8BAAN,SAA6CZ,cAA7C,CAA4D;AAAA;AAAA;;AAAA,0CAC3C;AACba,MAAAA,MAAM,EAAE,IADK;AAEbC,MAAAA,WAAW,EAAE,IAFA;AAGbC,MAAAA,aAAa,EAAE;AAACC,QAAAA,IAAI,EAAE,MAAP;AAAeC,QAAAA,KAAK,EAAE,IAAtB;AAA4BC,QAAAA,IAAI,EAAE;AAAlC,OAHF;AAIbC,MAAAA,MAAM,EAAE,GAJK;AAKbC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,GAAG,EAAC,EAAN;AAAUC,QAAAA,KAAK,EAAC,EAAhB;AAAoBC,QAAAA,MAAM,EAAC,EAA3B;AAA+BC,QAAAA,IAAI,EAAC;AAApC,OALI;AAMbC,MAAAA,MAAM,EAAE,MANK;AAObC,MAAAA,WAAW,EAAE,CAPA;AAQbC,MAAAA,IAAI,EAAE;AARO,KAD2C;;AAAA,yCAa5CzB,WAb4C;AAAA;;AAiB1D0B,EAAAA,IAAI,GAAG;AACL,UAAMC,IAAI,GAAG,KAAKA,IAAL,EAAb;AACA,UAAMC,KAAK,GAAG,KAAKA,KAAL,EAAd;AACA,UAAMC,IAAI,GAAG,KAAKC,SAAL,GAAiBD,IAAjB,EAAb;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ,EAJK,CAKL;;AACAC,IAAAA,KAAK,CAACK,OAAN,GAAgB/B,YAAY,CAACgC,UAAb,CAAwBN,KAAK,CAAChB,WAA9B,CAAhB,CANK,CAQL;;AACA,UAAMuB,UAAU,GAAG,EAAnB;AAEA,UAAM;AAAEC,MAAAA;AAAF,QAAYP,IAAI,CAACQ,qBAAL,EAAlB;AAEA,UAAMC,UAAU,GAAGvC,EAAE,CAACuC,UAAH,GAChBC,QADgB,CACP,GADO,CAAnB;AAGA,UAAMC,CAAC,GAAG,KAAKV,SAAL,GACPW,YADO,CACM,KADN,EACa;AADb,KAEPC,IAFO,CAEF,OAFE,EAEON,KAFP,EAGPM,IAHO,CAGF,QAHE,EAGQd,KAAK,CAACX,MAHd,EAIPwB,YAJO,CAIM,GAJN,EAKPC,IALO,CAKF,WALE,EAKY,aAAYd,KAAK,CAACV,OAAN,CAAcI,IAAK,KAAIM,KAAK,CAACV,OAAN,CAAcC,GAAI,GALjE,CAAV,CAhBK,CAyBL;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA,WAAO,IAAP;AACD;;AAtEyD,C,CAwE5D;;;AACA,eAAeT,8BAAf","sourcesContent":["import ChartComponent from './base/ChartComponent';\nimport d3 from './utils/d3';\nimport defaultData from './defaultData.json';\n\n// see docs on https://github.com/reuters-graphics/graphics-atlas-client\nimport AtlasMetadataClient from '@reuters-graphics/graphics-atlas-client';\nconst atlastClient = new AtlasMetadataClient();\n\nconst dateParse = d3.timeParse(\"%Y-%m-%d\");\nconst dateFormat = d3.timeFormat(\"%b %e\");\nconst dateFormat_tt = d3.timeFormat(\"%B %e\");\nconst numberFormat_tt = d3.format(\",\");\n\nclass CountryLockdownIndicatorStrips extends ChartComponent {\n  defaultProps = {\n    locale: 'en',\n    countryISO2: 'IN',\n    dataAccessors: {date: 'date', index: 'c1', flag: 'flag'},\n    height: 200,\n    margins: { top:10, right:10, bottom:10, left:10},\n    stroke: '#aaa',\n    strokeWidth: 1,\n    fill: 'steelblue',\n\n  };\n\n  defaultData = defaultData;\n\n\n\n  draw() {\n    const data = this.data();\n    const props = this.props();\n    const node = this.selection().node();\n    console.log(data)\n    // get country details from AtlasClient from ISO-2\n    props.country = atlastClient.getCountry(props.countryISO2);\n\n    // format the lockdown data for strip-plot\n    const CHART_DATA = [];\n\n    const { width } = node.getBoundingClientRect();\n\n    const transition = d3.transition()\n      .duration(750);\n\n    const g = this.selection()\n      .appendSelect('svg') // see docs in ./utils/d3.js\n      .attr('width', width)\n      .attr('height', props.height)\n      .appendSelect('g')\n      .attr('transform', `translate(${props.margins.left}, ${props.margins.top})`);\n\n\n    \n    // const circles = g.selectAll('circle')\n    //   .data(data, (d, i) => d[props.dataAccessors.date]);\n\n    // circles\n    //   .style('fill', props.fill)\n    //   .style('stroke', props.stroke);\n\n    // circles.enter().append('circle')\n    //   .style('fill', props.fill)\n    //   .style('stroke', props.stroke)\n    //   .style('stroke-width', props.strokeWidth)\n    //   .attr('cy', props.height / 2)\n    //   .attr('cx', (d, i) =>\n    //     data.slice(0, i).reduce((a, b) => a + b, 0) + (d / 2)\n    //   )\n    //   .merge(circles)\n    //   .transition(transition)\n    //   .attr('cx', (d, i) =>\n    //     data.slice(0, i).reduce((a, b) => a + b, 0) + (d / 2)\n    //   )\n    //   .attr('r', d => d / 2);\n\n    // circles.exit()\n    //   .transition(transition)\n    //   .attr('r', 0)\n    //   .remove();\n\n    return this;\n  }\n}\n// console.log(this.defaultProps);\nexport default CountryLockdownIndicatorStrips;\n"]},"metadata":{},"sourceType":"module"}