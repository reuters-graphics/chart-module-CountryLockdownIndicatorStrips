{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/* eslint-disable no-trailing-spaces */\nimport ChartComponent from './base/ChartComponent';\nimport d3 from './utils/d3';\nimport { getDates, formatDateObject } from './utils/utils';\nimport defaultData from './defaultData.json';\nimport { interpolateHcl } from 'd3';\nimport d3SelectionMulti from 'd3-selection-multi'; // see docs on https://github.com/reuters-graphics/graphics-atlas-client\n// import AtlasMetadataClient from '@reuters-graphics/graphics-atlas-client';\n// const atlastClient = new AtlasMetadataClient();\n\nvar dateParse = d3.timeParse('%Y-%m-%d');\nvar dateFormat = d3.timeFormat('%b %e');\nvar dateFormat_tt = d3.timeFormat('%B %e');\nvar numberFormat_tt = d3.format(',');\n\nvar CountryLockdownIndicatorStrips = /*#__PURE__*/function (_ChartComponent) {\n  _inherits(CountryLockdownIndicatorStrips, _ChartComponent);\n\n  var _super = _createSuper(CountryLockdownIndicatorStrips);\n\n  function CountryLockdownIndicatorStrips() {\n    var _this;\n\n    _classCallCheck(this, CountryLockdownIndicatorStrips);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"defaultProps\", {\n      dateSeries: ['2019-12-31', '2020-07-10'],\n      // yyyy-mm-dd format\n      dataParams: {\n        date: 'date',\n        index: 'c1',\n        stepValue: 'flag',\n        steps: 2 // stepValue = 0, 1...\n\n      },\n      height: 150,\n      stripHeight: 50,\n      margin: {\n        top: 10,\n        right: 16,\n        bottom: 10,\n        left: 16\n      },\n      valign: 'center',\n      // start, center, baseline\n      baseColor: '#ECEFF4',\n      stripColor: {\n        // should be numeric values that are mapped from the data\n        0: '#d1eeea',\n        1: '#ffe47f',\n        2: 'orange',\n        3: '#a50f15'\n      },\n      legendItems: {\n        // should contain items from stripColor\n        \"null\": 'no data',\n        stepLegend: {\n          0: 'targeted',\n          1: 'nationwide'\n        },\n        indexLegend: {\n          0: 'no measures',\n          1: 'recommend closing',\n          2: 'require closing on some levels',\n          3: 'require closing all levels'\n        }\n      },\n      axis: true // markDates: ['2019-12-31','2020-03-25','2020-07-10'], // yyyy-mm-dddd\n\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"defaultData\", defaultData);\n\n    return _this;\n  }\n\n  _createClass(CountryLockdownIndicatorStrips, [{\n    key: \"draw\",\n    value: function draw() {\n      var allData = this.data();\n      var props = this.props();\n      var node = this.selection().node();\n\n      if (!props.dateSeries) {\n        props.dateSeries = [dateParse(allData[0].date), dateParse(allData[allData.length - 1].date)];\n      }\n\n      var dateSeries = getDates(props.dateSeries[0], props.dateSeries[1]); // set data for the date series\n\n      var data = dateSeries.map(function (d) {\n        var match = allData.find(function (e) {\n          return e[props.dataParams.date] === formatDateObject(d);\n        });\n\n        if (match) {\n          return match;\n        } else {\n          var obj = {};\n          obj[props.dataParams.date] = formatDateObject(d);\n          return obj;\n        }\n      }); // get country details from AtlasClient from ISO-2\n      // props.country = atlastClient.getCountry(props.countryISO2);\n\n      var _node$getBoundingClie = node.getBoundingClientRect(),\n          width = _node$getBoundingClie.width;\n\n      var transition = d3.transition().duration(750); // main chart container\n\n      var chartDiv = this.selection().appendSelect('div') // see docs in ./utils/d3.js\n      .attr('class', 'CountryLockdownIndicatorStrips').style('width', \"\".concat(width, \"px\")) // .style('height', `${props.height}px`)\n      .appendSelect('div').styles({\n        'padding-top': \"\".concat(props.margin.top, \"px\"),\n        'padding-right': \"\".concat(props.margin.right, \"px\"),\n        'padding-bottom': \"\".concat(props.margin.bottom, \"px\"),\n        'padding-left': \"\".concat(props.margin.left, \"px\")\n      });\n      var stripheight = props.legendItems ? props.stripHeight - props.margin.top : props.height - props.margin.top - props.margin.bottom; // set scales\n\n      var yScale = d3.scaleLinear().domain([0, props.dataParams.steps - 1]).range([stripheight, props.margin.top]);\n      var xScale = d3.scaleBand().domain(dateSeries).range([0, width - props.margin.left - props.margin.right]).padding(0);\n      var colorDomain = props.stripColor ? Object.keys(props.stripColor).map(function (d) {\n        return +d;\n      }) : d3.extent(data.map(function (d) {\n        return d[props.dataParams.index];\n      }));\n      var colorRange = props.stripColor ? colorDomain.map(function (d) {\n        return props.stripColor[\"\".concat(d)];\n      }) : ['#cccccc', '#333333'];\n      var colorScale = d3.scaleLinear().domain(colorDomain).range(colorRange).interpolate(interpolateHcl); // make bars\n\n      var bars = chartDiv.appendSelect('div.bars-container').styles({\n        display: 'flex',\n        'align-items': \"\".concat(props.valign)\n      }).selectAll('.bar').data(data, function (d, i) {\n        return d[props.dataParams.date];\n      }); // for smooth data updation\n\n      bars.enter().append('div').attr('class', function (d) {\n        return \"bar \".concat(d[props.dataParams.date]);\n      }).style('display', 'inline-block').style('height', function (d) {\n        var stepSize = stripheight / props.dataParams.steps;\n        var step = d[props.dataParams.stepValue] + 1;\n        return d[props.dataParams.index] ? step ? step * stepSize + 'px' : stepSize + 'px' : stepSize + 'px';\n      }).style('width', xScale.bandwidth() + 'px').style('background', function (d) {\n        var val = parseFloat(d[props.dataParams.index]);\n        return val !== null && !isNaN(val) ? colorScale(val) : props.baseColor;\n      }).merge(bars).transition(transition).style('display', 'inline-block').style('height', function (d) {\n        var stepSize = stripheight / props.dataParams.steps;\n        var step = d[props.dataParams.stepValue] + 1;\n        return d[props.dataParams.index] ? step ? step * stepSize + 'px' : stepSize + 'px' : stepSize + 'px';\n      }).style('width', xScale.bandwidth() + 'px').style('background', function (d) {\n        var val = parseFloat(d[props.dataParams.index]);\n        return val !== null && !isNaN(val) ? colorScale(val) : props.baseColor;\n      });\n      bars.exit().transition(transition).attr('height', 0).remove(); // add axis\n\n      if (props.axis) {\n        var markDates = props.markDates ? props.markDates.map(function (d) {\n          return dateParse(d);\n        }) : [dateSeries[0], dateSeries.slice(-1)[0]];\n        console.log(markDates);\n        var xAxis = chartDiv.appendSelect('svg').attr('width', width - props.margin.left - props.margin.right).attr('height', 25).attr('transform', \"translate(0, 0)\");\n        xAxis.appendSelect('g.axis-x').attr('class', 'axis-x axis').transition(transition).attr('transform', 'translate(0,0)').call(d3.axisBottom(xScale).tickValues(markDates).tickFormat(dateFormat));\n      } // chart legend\n\n\n      if (props.legendItems) {\n        var indexLegendItems = [];\n        Object.keys(props.legendItems.indexLegend).forEach(function (d) {\n          var item = {\n            key: d,\n            value: props.legendItems.indexLegend[d]\n          };\n          indexLegendItems.push(item);\n        });\n\n        if (props.legendItems[\"null\"]) {\n          indexLegendItems.push({\n            key: 'null',\n            value: props.legendItems[\"null\"]\n          });\n        }\n\n        var legendWidth = (width - props.margin.right - props.margin.left) / indexLegendItems.length; // make legend\n\n        var legendDiv = chartDiv.appendSelect('div.legend-container');\n        var indexLegend = legendDiv.appendSelect('div.legend.indexLegend') // .style('align-items', `${props.valign}`)\n        .selectAll('.legend-item').data(indexLegendItems); // for smooth data updation\n\n        indexLegend.enter().append('div').attr('class', 'legend-item').styles({\n          display: 'flex',\n          'align-items': 'start'\n        }) // .style('width', `${legendWidth}px`)\n        .html(function (d) {\n          var color = +d.key !== null && !isNaN(+d.key) ? props.stripColor[+d.key] : props.baseColor;\n          return \"<span style=\\\"width:1rem; height:1rem;min-width:1rem; min-height:1rem; background: \".concat(color, \"\\\"></span> <p style=\\\"margin:0 0 0 0.5rem;\\\">\").concat(d.value, \"</p>\");\n        }).merge(indexLegend).styles({\n          display: 'flex',\n          'align-items': 'start'\n        }).style('width', \"\".concat(legendWidth, \"px\")).html(function (d) {\n          var color = +d.key !== null && !isNaN(+d.key) ? props.stripColor[+d.key] : props.baseColor;\n          return \"<span style=\\\"width:1rem; height:1rem;min-width:1rem; min-height:1rem; background: \".concat(color, \"\\\"></span> <p style=\\\"margin:0 0 0 0.5rem;\\\">\").concat(d.value, \"</p>\");\n        });\n        indexLegend.exit().transition(transition).remove();\n\n        if (props.legendItems.stepLegend) {\n          // step legend stuff\n          var stepLegendItems = [];\n          Object.keys(props.legendItems.stepLegend).forEach(function (d) {\n            var item = {\n              key: d,\n              value: props.legendItems.stepLegend[d]\n            };\n            stepLegendItems.push(item);\n          });\n          console.log(stepLegendItems);\n          var stepLegend = legendDiv.appendSelect('div.legend.stepLegend').selectAll('.legend-item').data(stepLegendItems); // for smooth data updation\n\n          stepLegend.enter().append('div').attr('class', 'legend-item').styles({\n            display: 'flex',\n            'align-items': 'center'\n          }).html(function (d, i) {\n            var stepSize = stripheight / stepLegendItems.length;\n            return \"<span style=\\\"width:\".concat(8, \"px; height:\", (+d.key + 1) * stepSize, \"px; background:transparent; border: 0.5px solid #333333;\\\"></span><p style=\\\"margin:0 0 0 0.5rem;\\\">\").concat(d.value, \"</p>\");\n          }).merge(stepLegend).styles({\n            display: 'flex',\n            'align-items': 'center'\n          }).html(function (d, i) {\n            var stepSize = stripheight / stepLegendItems.length;\n            return \"<span style=\\\"width:\".concat(8, \"px; height:\", (+d.key + 1) * stepSize, \"px; background:transparent; border: 0.5px solid #333333;\\\"></span><p style=\\\"margin:0 0 0 0.5rem;\\\">\").concat(d.value, \"</p>\");\n          });\n          stepLegend.exit().transition(transition).remove();\n        }\n      }\n\n      return this;\n    }\n  }]);\n\n  return CountryLockdownIndicatorStrips;\n}(ChartComponent); // console.log(this.defaultProps);\n\n\nexport default CountryLockdownIndicatorStrips;","map":{"version":3,"sources":["/Users/prasanta/ReutersWork/INTERACTIVES/COVID-APP/chart-module-CountryLockdownIndicatorStrips/src/lib/chart.js"],"names":["ChartComponent","d3","getDates","formatDateObject","defaultData","interpolateHcl","d3SelectionMulti","dateParse","timeParse","dateFormat","timeFormat","dateFormat_tt","numberFormat_tt","format","CountryLockdownIndicatorStrips","dateSeries","dataParams","date","index","stepValue","steps","height","stripHeight","margin","top","right","bottom","left","valign","baseColor","stripColor","legendItems","stepLegend","indexLegend","axis","allData","data","props","node","selection","length","map","d","match","find","e","obj","getBoundingClientRect","width","transition","duration","chartDiv","appendSelect","attr","style","styles","stripheight","yScale","scaleLinear","domain","range","xScale","scaleBand","padding","colorDomain","Object","keys","extent","colorRange","colorScale","interpolate","bars","display","selectAll","i","enter","append","stepSize","step","bandwidth","val","parseFloat","isNaN","merge","exit","remove","markDates","slice","console","log","xAxis","call","axisBottom","tickValues","tickFormat","indexLegendItems","forEach","item","key","value","push","legendWidth","legendDiv","html","color","stepLegendItems"],"mappings":"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","sourcesContent":["/* eslint-disable no-trailing-spaces */\nimport ChartComponent from './base/ChartComponent';\nimport d3 from './utils/d3';\nimport { getDates, formatDateObject } from './utils/utils';\nimport defaultData from './defaultData.json';\nimport { interpolateHcl } from 'd3';\nimport d3SelectionMulti from 'd3-selection-multi';\n// see docs on https://github.com/reuters-graphics/graphics-atlas-client\n// import AtlasMetadataClient from '@reuters-graphics/graphics-atlas-client';\n// const atlastClient = new AtlasMetadataClient();\n\nconst dateParse = d3.timeParse('%Y-%m-%d');\nconst dateFormat = d3.timeFormat('%b %e');\nconst dateFormat_tt = d3.timeFormat('%B %e');\nconst numberFormat_tt = d3.format(',');\n\nclass CountryLockdownIndicatorStrips extends ChartComponent {\n    defaultProps = {\n      dateSeries: ['2019-12-31', '2020-07-10'], // yyyy-mm-dd format\n      dataParams: {\n        date: 'date',\n        index: 'c1',\n        stepValue: 'flag',\n        steps: 2, // stepValue = 0, 1...\n      },\n      height: 150,\n      stripHeight: 50,\n      margin: {\n        top: 10,\n        right: 16,\n        bottom: 10,\n        left: 16,\n      },\n      valign: 'center', // start, center, baseline\n      baseColor: '#ECEFF4',\n      stripColor: { // should be numeric values that are mapped from the data\n        0: '#d1eeea',\n        1: '#ffe47f',\n        2: 'orange',\n        3: '#a50f15',\n      },\n      legendItems: { // should contain items from stripColor\n        null: 'no data',\n        stepLegend: {\n          0: 'targeted',\n          1: 'nationwide',\n        },\n        indexLegend: {\n          0: 'no measures',\n          1: 'recommend closing',\n          2: 'require closing on some levels',\n          3: 'require closing all levels',\n        },\n      },\n      axis: true,\n      // markDates: ['2019-12-31','2020-03-25','2020-07-10'], // yyyy-mm-dddd\n    };\n\n    defaultData = defaultData;\n\n    draw() {\n      const allData = this.data();\n      const props = this.props();\n      const node = this.selection().node();\n\n      if (!props.dateSeries) {\n        props.dateSeries = [dateParse(allData[0].date), dateParse(allData[allData.length - 1].date)];\n      }\n      const dateSeries = getDates(props.dateSeries[0], props.dateSeries[1]);   \n\n      // set data for the date series\n      const data = dateSeries.map((d) => {\n        const match = allData.find((e) => (e[props.dataParams.date]) === (formatDateObject(d)));\n        if (match) {\n          return match;\n        } else {\n          const obj = {};\n          obj[props.dataParams.date] = formatDateObject(d);\n          return obj;\n        }\n      }); \n\n      // get country details from AtlasClient from ISO-2\n      // props.country = atlastClient.getCountry(props.countryISO2);\n\n      const {\n        width,\n      } = node.getBoundingClientRect();\n\n      const transition = d3.transition()\n        .duration(750);\n\n      // main chart container\n      const chartDiv = this.selection()\n        .appendSelect('div') // see docs in ./utils/d3.js\n        .attr('class', 'CountryLockdownIndicatorStrips')\n        .style('width', `${width}px`)\n      // .style('height', `${props.height}px`)\n        .appendSelect('div')\n        .styles({\n          'padding-top': `${props.margin.top}px`,\n          'padding-right': `${props.margin.right}px`,\n          'padding-bottom': `${props.margin.bottom}px`,\n          'padding-left': `${props.margin.left}px`,\n        });\n\n      const stripheight = props.legendItems ? (props.stripHeight - props.margin.top) : (props.height - props.margin.top - props.margin.bottom);\n\n      // set scales\n      const yScale = d3.scaleLinear()\n        .domain([0, props.dataParams.steps - 1])\n        .range([stripheight, props.margin.top]);\n\n      const xScale = d3.scaleBand()\n        .domain(dateSeries)\n        .range([0, width - props.margin.left - props.margin.right])\n        .padding(0);\n\n      const colorDomain = props.stripColor ? (Object.keys(props.stripColor)).map(d => +d) : d3.extent(data.map(d => d[props.dataParams.index]));\n\n      const colorRange = props.stripColor ? colorDomain.map(d => props.stripColor[`${d}`]) : ['#cccccc', '#333333'];\n\n      const colorScale = d3.scaleLinear()\n        .domain(colorDomain)\n        .range(colorRange)\n        .interpolate(interpolateHcl);\n\n      // make bars\n      const bars = chartDiv.appendSelect('div.bars-container')\n        .styles({\n          display: 'flex',\n          'align-items': `${props.valign}`,\n        })\n        .selectAll('.bar')\n        .data(data, (d, i) => d[props.dataParams.date]); // for smooth data updation\n\n      bars.enter().append('div')\n        .attr('class', d => `bar ${d[props.dataParams.date]}`)\n        .style('display', 'inline-block')\n        .style('height', d => {\n          const stepSize = (stripheight) / props.dataParams.steps;\n          const step = d[props.dataParams.stepValue] + 1;\n          return d[props.dataParams.index] ? (step ? step * stepSize + 'px' : stepSize + 'px') : stepSize + 'px';\n        })\n        .style('width', xScale.bandwidth() + 'px')\n        .style('background', d => {\n          const val = parseFloat(d[props.dataParams.index]);\n          return (val !== null) && !(isNaN(val)) ? colorScale(val) : props.baseColor;\n        })\n        .merge(bars)\n        .transition(transition)\n        .style('display', 'inline-block')\n        .style('height', d => {\n          const stepSize = (stripheight) / props.dataParams.steps;\n          const step = d[props.dataParams.stepValue] + 1;\n          return d[props.dataParams.index] ? (step ? step * stepSize + 'px' : stepSize + 'px') : stepSize + 'px';\n        })\n        .style('width', xScale.bandwidth() + 'px')\n        .style('background', d => {\n          const val = parseFloat(d[props.dataParams.index]);\n          return (val !== null) && !(isNaN(val)) ? colorScale(val) : props.baseColor;\n        });\n\n      bars.exit()\n        .transition(transition)\n        .attr('height', 0)\n        .remove();\n\n      // add axis\n      if (props.axis) {\n        const markDates = props.markDates ? props.markDates.map(d=>dateParse(d)) : [dateSeries[0], dateSeries.slice(-1)[0]];\n\n        console.log(markDates)\n\n        const xAxis = chartDiv.appendSelect('svg')\n          .attr('width', width - props.margin.left - props.margin.right)\n          .attr('height', 25)\n          .attr('transform', `translate(0, 0)`);\n\n        xAxis.appendSelect('g.axis-x')\n          .attr('class', 'axis-x axis')\n          .transition(transition)\n          .attr('transform', 'translate(0,0)')\n          .call(\n            d3.axisBottom(xScale)\n              .tickValues(markDates)\n              .tickFormat(dateFormat)\n          );\n      }\n\n      // chart legend\n      if (props.legendItems) {\n        const indexLegendItems = [];\n        (Object.keys(props.legendItems.indexLegend)).forEach(d => {\n          const item = {\n            key: d,\n            value: props.legendItems.indexLegend[d],\n          };\n          indexLegendItems.push(item);\n        });\n        if (props.legendItems.null) {\n          indexLegendItems.push({\n            key: 'null',\n            value: props.legendItems.null,\n          });\n        }\n        const legendWidth = (width - props.margin.right - props.margin.left) / indexLegendItems.length;\n\n        // make legend\n        const legendDiv = chartDiv.appendSelect('div.legend-container');\n\n        const indexLegend = legendDiv.appendSelect('div.legend.indexLegend')\n        // .style('align-items', `${props.valign}`)\n          .selectAll('.legend-item')\n          .data(indexLegendItems); // for smooth data updation\n\n        indexLegend.enter().append('div')\n          .attr('class', 'legend-item')\n          .styles({\n            display: 'flex',\n            'align-items': 'start',\n          })\n        // .style('width', `${legendWidth}px`)\n          .html(d => {\n            const color = (+d.key !== null) && !(isNaN(+d.key)) ? props.stripColor[+d.key] : props.baseColor;\n            return `<span style=\"width:1rem; height:1rem;min-width:1rem; min-height:1rem; background: ${color}\"></span> <p style=\"margin:0 0 0 0.5rem;\">${d.value}</p>`;\n          })\n          .merge(indexLegend)\n          .styles({\n            display: 'flex',\n            'align-items': 'start',\n          })\n          .style('width', `${legendWidth}px`)\n          .html(d => {\n            const color = (+d.key !== null) && !(isNaN(+d.key)) ? props.stripColor[+d.key] : props.baseColor;\n            return `<span style=\"width:1rem; height:1rem;min-width:1rem; min-height:1rem; background: ${color}\"></span> <p style=\"margin:0 0 0 0.5rem;\">${d.value}</p>`;\n          });\n\n        indexLegend.exit()\n          .transition(transition)\n          .remove();\n\n        if (props.legendItems.stepLegend) {\n          // step legend stuff\n          const stepLegendItems = [];\n          (Object.keys(props.legendItems.stepLegend)).forEach(d => {\n            const item = {\n              key: d,\n              value: props.legendItems.stepLegend[d],\n            };\n            stepLegendItems.push(item);\n          });\n          console.log(stepLegendItems);\n\n          const stepLegend = legendDiv.appendSelect('div.legend.stepLegend')\n            .selectAll('.legend-item')\n            .data(stepLegendItems); // for smooth data updation\n\n          stepLegend.enter().append('div')\n            .attr('class', 'legend-item')\n            .styles({\n              display: 'flex',\n              'align-items': 'center',\n            })\n            .html((d, i) => {\n              const stepSize = (stripheight) / stepLegendItems.length;\n              return `<span style=\"width:${8}px; height:${((+d.key) + 1) * stepSize}px; background:transparent; border: 0.5px solid #333333;\"></span><p style=\"margin:0 0 0 0.5rem;\">${d.value}</p>`;\n            })\n            .merge(stepLegend)\n            .styles({\n              display: 'flex',\n              'align-items': 'center',\n            })\n            .html((d, i) => {\n              const stepSize = (stripheight) / stepLegendItems.length;\n              return `<span style=\"width:${8}px; height:${((+d.key) + 1) * stepSize}px; background:transparent; border: 0.5px solid #333333;\"></span><p style=\"margin:0 0 0 0.5rem;\">${d.value}</p>`;\n            });\n\n          stepLegend.exit()\n            .transition(transition)\n            .remove();\n        }\n      }\n      return this;\n    }\n}\n// console.log(this.defaultProps);\nexport default CountryLockdownIndicatorStrips;\n"]},"metadata":{},"sourceType":"module"}