{"ast":null,"code":"var _jsxFileName = \"/Users/prasanta/ReutersWork/INTERACTIVES/COVID-APP/chart-module-CountryLockdownIndicatorStrips/src/demo/Chart.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Chart from '../lib/chart.js';\nimport ChartContainer from './furniture/ChartContainer';\nimport React from 'react';\nimport WeeklyAverage from '@reuters-graphics/chart-module-weeklyaverage';\nimport { base } from '@reuters-graphics/style-color/dist/categorical';\nimport casesData from './casesData.json';\nimport debounce from 'lodash/debounce';\nimport defaultData from './defaultData.json';\n\nclass ChartComponent extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      width: ''\n    });\n\n    _defineProperty(this, \"chartContainer\", React.createRef());\n\n    _defineProperty(this, \"myChartContainer\", React.createRef());\n\n    _defineProperty(this, \"chart\", new Chart());\n\n    _defineProperty(this, \"myChart\", new WeeklyAverage());\n\n    _defineProperty(this, \"resize\", debounce(() => {\n      this.chart.props({\n        legendItems: {\n          // should contain items from stripColor\n          // null: null,\n          // stepLegend: {\n          //   0: null,\n          //   1: null,\n          // },\n          indexLegend: {\n            0: 'no NONO',\n            1: 'recommend closing',\n            2: 'require closing on some levels',\n            3: 'require closing all levels',\n            4: null\n          }\n        }\n      }).draw();\n      this.myChart.draw();\n    }, 250));\n  }\n\n  componentDidMount() {\n    // Use our chart module.\n    this.chart.selection(this.chartContainer.current).data(defaultData).props({\n      locale: 'en',\n      dateSeries: ['2019-12-31', '2020-07-07'],\n      dataParams: {\n        date: 'date',\n        index: 'c1',\n        stepValue: 'flag',\n        steps: 2 // stepValue = 0, 1...\n\n      },\n      margin: {\n        top: 10,\n        right: 18,\n        bottom: 10,\n        left: 18\n      },\n      baseColor: 'rgba(255,255,255,0.1)',\n      stripColor: {\n        0: '#4C566A' // 1: '#948072',\n        // 2: '#f68e26',\n        // 3: '#de2d26',\n\n      },\n      legendItems: {\n        // should contain items from stripColor\n        null: 'no data',\n        stepLegend: {\n          0: 'targeted',\n          1: 'nationwide'\n        },\n        indexLegend: {\n          0: 'no measures',\n          1: 'recommend closing',\n          2: 'require closing on some levels',\n          3: 'require closing all levels',\n          4: 'something'\n        }\n      },\n      chartTitle: 'School closing measures',\n      axis: true\n    }).draw(); // Add a listener to resize chart with the window.\n\n    window.addEventListener('resize', this.resize); // Gurman's chart\n\n    this.myChart.selection(this.myChartContainer.current).data(casesData).props({\n      stroke: 'rgba(255, 255, 255, 0.15)',\n      // colour of line\n      strokeWidth: 3.14,\n      // width of the line\n      fill: '#eee',\n      // colour of the bars\n      height: 120,\n      // chart height\n      avg_days: 7,\n      // avg line should be an how many day rolling avg\n      left_y_axis: true,\n      x_axis: false,\n      bars: false,\n      // True by default.\n      // If you want just the line, set value to true\n      margin: {\n        left: 18,\n        right: 18,\n        top: 10,\n        bottom: 5\n      },\n      date_range: ['2019-12-31', '2020-07-07'],\n      padding: 0,\n      // to set padding between the bars.\n      // value should be between 0 to 1\n      labels: true,\n      // Setting this to true will show a label\n      // to explain what the bars and line are\n      // text: {\n      //   subhed: 'Weekly average infections reported',\n      // },\n      variable_name: 'cases' // What is this a chart of? Infections? Deaths? Tests?\n\n    }).draw();\n  }\n\n  componentWillUnmount() {\n    // Remove listener if the component is removed, too.\n    window.removeEventListener('resize', this.resize);\n  }\n\n  componentDidUpdate() {\n    // Update the chart with the component.\n    // Can change data or props here, whatever...\n    this.chart.draw();\n    this.myChart.draw();\n  }\n\n  render() {\n    const {\n      width\n    } = this.state;\n    return __jsx(ChartContainer, {\n      width: width,\n      setWidth: width => this.setState({\n        width\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }\n    }, \" \", __jsx(\"div\", {\n      id: \"myChart\",\n      ref: this.myChartContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }\n    }), __jsx(\"div\", {\n      id: \"chart\",\n      ref: this.chartContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }\n    }));\n  }\n\n}\n\nexport default ChartComponent;","map":{"version":3,"sources":["/Users/prasanta/ReutersWork/INTERACTIVES/COVID-APP/chart-module-CountryLockdownIndicatorStrips/src/demo/Chart.js"],"names":["Chart","ChartContainer","React","WeeklyAverage","base","casesData","debounce","defaultData","ChartComponent","Component","width","createRef","chart","props","legendItems","indexLegend","draw","myChart","componentDidMount","selection","chartContainer","current","data","locale","dateSeries","dataParams","date","index","stepValue","steps","margin","top","right","bottom","left","baseColor","stripColor","null","stepLegend","chartTitle","axis","window","addEventListener","resize","myChartContainer","stroke","strokeWidth","fill","height","avg_days","left_y_axis","x_axis","bars","date_range","padding","labels","variable_name","componentWillUnmount","removeEventListener","componentDidUpdate","render","state","setState"],"mappings":"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","sourcesContent":["import Chart from '../lib/chart.js';\nimport ChartContainer from './furniture/ChartContainer';\nimport React from 'react';\nimport WeeklyAverage from '@reuters-graphics/chart-module-weeklyaverage';\nimport { base } from '@reuters-graphics/style-color/dist/categorical';\nimport casesData from './casesData.json';\nimport debounce from 'lodash/debounce';\nimport defaultData from './defaultData.json';\n\nclass ChartComponent extends React.Component {\n    state = { width: '' };\n    chartContainer = React.createRef();\n\n    myChartContainer = React.createRef();\n\n    // Instantiate and add our chart class to this component.\n    chart = new Chart();\n    myChart = new WeeklyAverage();\n\n    // A resize function to redraw the chart.\n    resize = debounce(() => {\n      this.chart\n        .props({\n          legendItems: { // should contain items from stripColor\n            // null: null,\n            // stepLegend: {\n            //   0: null,\n            //   1: null,\n            // },\n            indexLegend: {\n              0: 'no NONO',\n              1: 'recommend closing',\n              2: 'require closing on some levels',\n              3: 'require closing all levels',\n              4: null,\n            },\n          },\n        })\n        .draw();\n      this.myChart.draw();\n    }, 250);\n\n    componentDidMount() {\n      // Use our chart module.\n      this.chart\n        .selection(this.chartContainer.current)\n        .data(defaultData)\n        .props({\n          locale: 'en',\n          dateSeries: ['2019-12-31', '2020-07-07'],\n          dataParams: {\n            date: 'date',\n            index: 'c1',\n            stepValue: 'flag',\n            steps: 2, // stepValue = 0, 1...\n          },\n          margin: {\n            top: 10,\n            right: 18,\n            bottom: 10,\n            left: 18,\n          },\n          baseColor: 'rgba(255,255,255,0.1)',\n          stripColor: {\n            0: '#4C566A',\n            // 1: '#948072',\n            // 2: '#f68e26',\n            // 3: '#de2d26',\n          },\n          legendItems: { // should contain items from stripColor\n            null: 'no data',\n            stepLegend: {\n              0: 'targeted',\n              1: 'nationwide',\n            },\n            indexLegend: {\n              0: 'no measures',\n              1: 'recommend closing',\n              2: 'require closing on some levels',\n              3: 'require closing all levels',\n              4: 'something',\n            },\n          },\n          chartTitle: 'School closing measures',\n          axis: true,\n        })\n        .draw();\n\n      // Add a listener to resize chart with the window.\n      window.addEventListener('resize', this.resize);\n\n      // Gurman's chart\n\n      this.myChart\n        .selection(this.myChartContainer.current)\n        .data(casesData)\n        .props({\n          stroke: 'rgba(255, 255, 255, 0.15)', // colour of line\n          strokeWidth: 3.14, // width of the line\n          fill: '#eee', // colour of the bars\n          height: 120, // chart height\n          avg_days: 7, // avg line should be an how many day rolling avg\n          left_y_axis: true,\n          x_axis: false,\n          bars: false, // True by default.\n          // If you want just the line, set value to true\n          margin: {\n            left: 18, right: 18, top: 10, bottom: 5,\n          },\n          date_range: ['2019-12-31', '2020-07-07'],\n          padding: 0, // to set padding between the bars.\n          // value should be between 0 to 1\n\n          labels: true, // Setting this to true will show a label\n          // to explain what the bars and line are\n          // text: {\n          //   subhed: 'Weekly average infections reported',\n          // },\n          variable_name: 'cases', // What is this a chart of? Infections? Deaths? Tests?\n        })\n        .draw();\n    }\n\n    componentWillUnmount() {\n      // Remove listener if the component is removed, too.\n      window.removeEventListener('resize', this.resize);\n    }\n\n    componentDidUpdate() {\n      // Update the chart with the component.\n      // Can change data or props here, whatever...\n      this.chart.draw();\n      this.myChart.draw();\n    }\n\n    render() {\n      const { width } = this.state;\n      return (\n        <ChartContainer\n          width={width}\n          setWidth={\n            (width) => this.setState({ width })\n          }\n        > {/* This is our chart container 👇 */}\n          <div id='myChart' ref={this.myChartContainer} />\n          <div id='chart' ref={this.chartContainer} />\n        </ChartContainer>\n      );\n    }\n}\n\nexport default ChartComponent;\n"]},"metadata":{},"sourceType":"module"}