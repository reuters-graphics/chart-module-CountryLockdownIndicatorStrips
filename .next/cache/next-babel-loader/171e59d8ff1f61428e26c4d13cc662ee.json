{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport ChartComponent from './base/ChartComponent';\nimport d3 from './utils/d3';\nimport defaultData from './defaultData.json'; // import { interpolate, interpolateHsl, interpolateHcl } from 'd3';\n\nimport d3SelectionMulti from 'd3-selection-multi'; // see docs on https://github.com/reuters-graphics/graphics-atlas-client\n// import AtlasMetadataClient from '@reuters-graphics/graphics-atlas-client';\n// const atlastClient = new AtlasMetadataClient();\n\nconst dateParse = d3.timeParse('%Y-%m-%d');\nconst dateFormat = d3.timeFormat('%b %e');\nconst dateFormat_tt = d3.timeFormat('%B %e');\nconst numberFormat_tt = d3.format(',');\n\nclass CountryLockdownIndicatorStrips extends ChartComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"defaultProps\", {\n      dataParams: {\n        date: 'date',\n        index: 'c1',\n        steps: 2,\n        // stepValue = 0, 1...\n        stepValue: 'flag'\n      },\n      height: 250,\n      margin: {\n        top: 10,\n        right: 10,\n        bottom: 10,\n        left: 10\n      },\n      valign: 'center',\n      // start, center, baseline\n      baseColor: '#ECEFF4',\n      stripColor: {\n        // should be numeric values that are mapped from the data\n        0: '#d1eeea',\n        1: '#ffe47f',\n        2: 'orange',\n        3: '#a50f15'\n      },\n      legendItems: {\n        // should contain items from stripColor\n        'null': 'no data',\n        'stepLegend': {\n          0: 'targeted',\n          1: 'nationwide'\n        },\n        'indexLegend': {\n          0: 'no measures',\n          1: 'recommend closing',\n          2: 'require closing (only some levels or categories, eg just high school, or just public schools)',\n          3: 'require closing all levels'\n        }\n      }\n    });\n\n    _defineProperty(this, \"defaultData\", defaultData);\n  }\n\n  draw() {\n    const data = this.data();\n    const props = this.props();\n    const node = this.selection().node(); // get country details from AtlasClient from ISO-2\n    // props.country = atlastClient.getCountry(props.countryISO2);\n\n    const {\n      width\n    } = node.getBoundingClientRect();\n    const transition = d3.transition().duration(750); // main chart container\n\n    const chartDiv = this.selection().appendSelect('div') // see docs in ./utils/d3.js\n    .attr('class', `CountryLockdownIndicatorStrips`).style('width', `${width}px`).style('height', `auto`).appendSelect('div').styles({\n      'margin-top': `${props.margin.top}px`,\n      'margin-right': `${props.margin.right}px`,\n      'margin-bottom': `${props.margin.bottom}px`,\n      'margin-left': `${props.margin.left}px`\n    }); // set scales\n\n    const yScale = d3.scaleLinear().domain([0, props.dataParams.steps - 1]).range([props.height - props.margin.bottom, props.margin.top]);\n    const xScale = d3.scaleBand().domain(data.map(d => dateParse(d[props.dataParams.date]))).range([props.margin.left, width - props.margin.right]).padding(0);\n    const colorDomain = props.stripColor ? Object.keys(props.stripColor).map(d => +d) : d3.extent(data.map(d => d[props.dataParams.index]));\n    const colorRange = props.stripColor ? colorDomain.map(d => props.stripColor[`${d}`]) : ['#cccccc', '#333333'];\n    const colorScale = d3.scaleLinear().domain(colorDomain).range(colorRange).interpolate(interpolateHcl); // make bars\n\n    const bars = chartDiv.appendSelect('div.bars-container').style('display', 'flex').style('align-items', `${props.valign}`).selectAll('.bar').data(data, (d, i) => d[props.dataParams.date]); // for smooth data updation\n\n    const stripheight = props.legendItems ? (props.height - props.margin.top - props.margin.bottom) * 0.2 : props.height - props.margin.top - props.margin.bottom;\n    bars.enter().append('div').attr('class', d => `bar ${d[props.dataParams.date]}`).style('display', 'inline-block').style('height', d => {\n      const stepSize = stripheight / props.dataParams.steps;\n      const step = d[props.dataParams.stepValue] + 1;\n      return d[props.dataParams.index] ? step ? step * stepSize + 'px' : stepSize + 'px' : stepSize + 'px';\n    }).style('width', xScale.bandwidth() + 'px').style('background', d => {\n      let val = parseFloat(d[props.dataParams.index]);\n      return val !== null && !isNaN(val) ? colorScale(val) : props.baseColor;\n    }).merge(bars).transition(transition).style('display', 'inline-block').style('height', d => {\n      const stepSize = stripheight / props.dataParams.steps;\n      const step = d[props.dataParams.stepValue] + 1;\n      return d[props.dataParams.index] ? step ? step * stepSize + 'px' : stepSize + 'px' : stepSize + 'px';\n    }).style('width', xScale.bandwidth() + 'px').style('background', d => {\n      let val = parseFloat(d[props.dataParams.index]);\n      return val !== null && !isNaN(val) ? colorScale(val) : props.baseColor;\n    });\n    bars.exit().transition(transition).attr('height', 0).remove();\n\n    if (props.legendItems) {\n      const indexLegendItems = [];\n      Object.keys(props.legendItems.indexLegend).forEach(d => {\n        let item = {\n          key: d,\n          value: props.legendItems.indexLegend[d]\n        };\n        indexLegendItems.push(item);\n      });\n\n      if (props.legendItems['null']) {\n        indexLegendItems.push({\n          key: 'null',\n          value: props.legendItems['null']\n        });\n      }\n\n      const legendWidth = (width - props.margin.right - props.margin.left) / indexLegendItems.length;\n      console.log(indexLegendItems); // make legend\n\n      const indexLegend = chartDiv.appendSelect('div.legend-container') // .style('align-items', `${props.valign}`)\n      .selectAll('.legend-div').data(indexLegendItems); // for smooth data updation\n\n      indexLegend.enter().append('div').attr('class', `legend-div indexLegend`).style('display', 'flex').style('align-items', `start`) // .style('width', `${legendWidth}px`)\n      .html(d => {\n        let color = +d.key !== null && !isNaN(+d.key) ? props.stripColor[+d.key] : props.baseColor;\n        return `<span style=\"width:1rem; height:1rem;min-width:1rem; min-height:1rem; background: ${color}\"></span> <p style=\"margin:0 0 0 0.5rem;\">${d.value}</p>`;\n      }).merge(indexLegend) // .style('width', `${legendWidth}px`)\n      .html(d => {\n        let color = +d.key !== null && !isNaN(+d.key) ? props.stripColor[+d.key] : props.baseColor;\n        return `<span style=\"width:1rem; height:1rem;min-width:1rem; min-height:1rem; background: ${color}\"></span> <p style=\"margin:0 0 0 0.5rem;\">${d.value}</p>`;\n      });\n      indexLegend.exit().transition(transition).remove();\n    }\n\n    return this;\n  }\n\n} // console.log(this.defaultProps);\n\n\nexport default CountryLockdownIndicatorStrips;","map":{"version":3,"sources":["/Users/prasanta/ReutersWork/INTERACTIVES/COVID-APP/chart-module-CountryLockdownIndicatorStrips/src/lib/chart.js"],"names":["ChartComponent","d3","defaultData","d3SelectionMulti","dateParse","timeParse","dateFormat","timeFormat","dateFormat_tt","numberFormat_tt","format","CountryLockdownIndicatorStrips","dataParams","date","index","steps","stepValue","height","margin","top","right","bottom","left","valign","baseColor","stripColor","legendItems","draw","data","props","node","selection","width","getBoundingClientRect","transition","duration","chartDiv","appendSelect","attr","style","styles","yScale","scaleLinear","domain","range","xScale","scaleBand","map","d","padding","colorDomain","Object","keys","extent","colorRange","colorScale","interpolate","interpolateHcl","bars","selectAll","i","stripheight","enter","append","stepSize","step","bandwidth","val","parseFloat","isNaN","merge","exit","remove","indexLegendItems","indexLegend","forEach","item","key","value","push","legendWidth","length","console","log","html","color"],"mappings":"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","sourcesContent":["import ChartComponent from './base/ChartComponent';\nimport d3 from './utils/d3';\nimport defaultData from './defaultData.json';\n// import { interpolate, interpolateHsl, interpolateHcl } from 'd3';\nimport d3SelectionMulti from 'd3-selection-multi';\n// see docs on https://github.com/reuters-graphics/graphics-atlas-client\n// import AtlasMetadataClient from '@reuters-graphics/graphics-atlas-client';\n// const atlastClient = new AtlasMetadataClient();\n\nconst dateParse = d3.timeParse('%Y-%m-%d');\nconst dateFormat = d3.timeFormat('%b %e');\nconst dateFormat_tt = d3.timeFormat('%B %e');\nconst numberFormat_tt = d3.format(',');\n\nclass CountryLockdownIndicatorStrips extends ChartComponent {\n    defaultProps = {\n        dataParams: {\n            date: 'date',\n            index: 'c1',\n            steps: 2, // stepValue = 0, 1...\n            stepValue: 'flag',\n        },\n        height: 250,\n        margin: {\n            top: 10,\n            right: 10,\n            bottom: 10,\n            left: 10,\n        },\n        valign: 'center', // start, center, baseline\n        baseColor: '#ECEFF4',\n        stripColor: { // should be numeric values that are mapped from the data\n            0: '#d1eeea',\n            1: '#ffe47f',\n            2: 'orange',\n            3: '#a50f15',\n        },\n        legendItems: { // should contain items from stripColor\n            'null': 'no data',\n            'stepLegend': {\n                0: 'targeted',\n                1: 'nationwide'\n            },\n            'indexLegend': {\n                0: 'no measures',\n                1: 'recommend closing',\n                2: 'require closing (only some levels or categories, eg just high school, or just public schools)',\n                3: 'require closing all levels'\n            },\n        }\n    };\n\n    defaultData = defaultData;\n\n    draw() {\n        const data = this.data();\n        const props = this.props();\n        const node = this.selection().node();\n\n        // get country details from AtlasClient from ISO-2\n        // props.country = atlastClient.getCountry(props.countryISO2);\n\n        const {\n            width\n        } = node.getBoundingClientRect();\n\n        const transition = d3.transition()\n            .duration(750);\n\n        // main chart container\n        const chartDiv = this.selection()\n            .appendSelect('div') // see docs in ./utils/d3.js\n            .attr('class', `CountryLockdownIndicatorStrips`)\n            .style('width', `${width}px`)\n            .style('height', `auto`)\n            .appendSelect('div')\n            .styles({\n                'margin-top': `${props.margin.top}px`,\n                'margin-right': `${props.margin.right}px`,\n                'margin-bottom': `${props.margin.bottom}px`,\n                'margin-left': `${props.margin.left}px`,\n            });\n\n        // set scales\n        const yScale = d3.scaleLinear()\n            .domain([0, props.dataParams.steps - 1])\n            .range([props.height - props.margin.bottom, props.margin.top]);\n\n        const xScale = d3.scaleBand()\n            .domain(data.map(d => dateParse(d[props.dataParams.date])))\n            .range([props.margin.left, width - props.margin.right])\n            .padding(0);\n\n        const colorDomain = props.stripColor ? (Object.keys(props.stripColor)).map(d => +d) : d3.extent(data.map(d => d[props.dataParams.index]));\n\n        const colorRange = props.stripColor ? colorDomain.map(d => props.stripColor[`${d}`]) : ['#cccccc', '#333333']\n\n        const colorScale = d3.scaleLinear()\n            .domain(colorDomain)\n            .range(colorRange)\n            .interpolate(interpolateHcl);\n\n        // make bars\n        const bars = chartDiv.appendSelect('div.bars-container')\n            .style('display', 'flex')\n            .style('align-items', `${props.valign}`)\n            .selectAll('.bar')\n            .data(data, (d, i) => d[props.dataParams.date]); // for smooth data updation\n\n        const stripheight = props.legendItems ? (props.height - props.margin.top - props.margin.bottom) * 0.2 : (props.height - props.margin.top - props.margin.bottom);\n\n        bars.enter().append('div')\n            .attr('class', d => `bar ${d[props.dataParams.date]}`)\n            .style('display', 'inline-block')\n            .style('height', d => {\n                const stepSize = (stripheight) / props.dataParams.steps;\n                const step = d[props.dataParams.stepValue] + 1;\n                return d[props.dataParams.index] ? (step ? step * stepSize + 'px' : stepSize + 'px') : stepSize + 'px';\n            })\n            .style('width', xScale.bandwidth() + 'px')\n            .style('background', d => {\n                let val = parseFloat(d[props.dataParams.index]);\n                return (val !== null) && !(isNaN(val)) ? colorScale(val) : props.baseColor;\n            })\n            .merge(bars)\n            .transition(transition)\n            .style('display', 'inline-block')\n            .style('height', d => {\n                const stepSize = (stripheight) / props.dataParams.steps;\n                const step = d[props.dataParams.stepValue] + 1;\n                return d[props.dataParams.index] ? (step ? step * stepSize + 'px' : stepSize + 'px') : stepSize + 'px';\n            })\n            .style('width', xScale.bandwidth() + 'px')\n            .style('background', d => {\n                let val = parseFloat(d[props.dataParams.index]);\n                return (val !== null) && !(isNaN(val)) ? colorScale(val) : props.baseColor;\n            });\n\n        bars.exit()\n            .transition(transition)\n            .attr('height', 0)\n            .remove();\n\n\n        if (props.legendItems) {\n            const indexLegendItems = [];\n            (Object.keys(props.legendItems.indexLegend)).forEach(d => {\n                let item = {\n                    key: d,\n                    value: props.legendItems.indexLegend[d]\n                }\n                indexLegendItems.push(item);\n            });\n            if (props.legendItems['null']) {\n                indexLegendItems.push({\n                    key: 'null',\n                    value: props.legendItems['null']\n                })\n            }\n            const legendWidth = (width - props.margin.right - props.margin.left) / indexLegendItems.length;\n            console.log(indexLegendItems)\n                // make legend\n            const indexLegend = chartDiv.appendSelect('div.legend-container')\n                // .style('align-items', `${props.valign}`)\n                .selectAll('.legend-div')\n                .data(indexLegendItems); // for smooth data updation\n\n            indexLegend.enter().append('div')\n                .attr('class', `legend-div indexLegend`)\n                .style('display', 'flex')\n                .style('align-items', `start`)\n                // .style('width', `${legendWidth}px`)\n                .html(d => {\n                    let color = (+d.key !== null) && !(isNaN(+d.key)) ? props.stripColor[+d.key] : props.baseColor;\n                    return `<span style=\"width:1rem; height:1rem;min-width:1rem; min-height:1rem; background: ${color}\"></span> <p style=\"margin:0 0 0 0.5rem;\">${d.value}</p>`\n                })\n                .merge(indexLegend)\n                // .style('width', `${legendWidth}px`)\n                .html(d => {\n                    let color = (+d.key !== null) && !(isNaN(+d.key)) ? props.stripColor[+d.key] : props.baseColor;\n                    return `<span style=\"width:1rem; height:1rem;min-width:1rem; min-height:1rem; background: ${color}\"></span> <p style=\"margin:0 0 0 0.5rem;\">${d.value}</p>`\n                });\n\n            indexLegend.exit()\n                .transition(transition)\n                .remove();\n\n\n        }\n        return this;\n    }\n}\n// console.log(this.defaultProps);\nexport default CountryLockdownIndicatorStrips;"]},"metadata":{},"sourceType":"module"}