{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/prasanta/ReutersWork/INTERACTIVES/COVID-APP/chart-module-CountryLockdownIndicatorStrips/src/demo/Chart.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport Chart from '../lib/chart.js';\nimport ChartContainer from './furniture/ChartContainer';\nimport React from 'react';\nimport { base } from '@reuters-graphics/style-color/dist/categorical';\nimport debounce from 'lodash/debounce';\nimport WeeklyAverage from '@reuters-graphics/chart-module-weeklyaverage';\n\nvar ChartComponent = /*#__PURE__*/function (_React$Component) {\n  _inherits(ChartComponent, _React$Component);\n\n  var _super = _createSuper(ChartComponent);\n\n  function ChartComponent() {\n    var _this;\n\n    _classCallCheck(this, ChartComponent);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      width: ''\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"chartContainer\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"myChartContainer\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"chart\", new Chart());\n\n    _defineProperty(_assertThisInitialized(_this), \"myChart\", new WeeklyAverage());\n\n    _defineProperty(_assertThisInitialized(_this), \"resize\", debounce(function () {\n      _this.chart.draw();\n    }, 250));\n\n    return _this;\n  }\n\n  _createClass(ChartComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // Use our chart module.\n      this.chart.selection(this.chartContainer.current) // .props({ fill: base.blue.hex })\n      // .data()\n      .draw(); // Add a listener to resize chart with the window.\n\n      window.addEventListener('resize', this.resize); // Gurman's chart\n\n      this.myChart.selection(this.myChartContainer.current).data([// the data format needs a date and count variable. \n      {\n        \"date\": \"2020-07-05\",\n        \"count\": 10000\n      }, {\n        \"date\": \"2020-07-06\",\n        \"count\": 10000\n      }]).props({\n        stroke: 'steelblue',\n        // colour of line\n        strokeWidth: 2.5,\n        // width of the line\n        fill: '#eee',\n        // colour of the bars\n        height: 200,\n        // chart height\n        avg_days: 7,\n        // avg line should be an how many day rolling avg\n        bars: true,\n        // True by default. \n        // If you want just the line, set value to true\n        padding: 0,\n        // to set padding between the bars. \n        // value should be between 0 to 1\n        labels: false,\n        // Setting this to true will show a label\n        // to explain what the bars and line are\n        variable_name: 'cases' // What is this a chart of? Infections? Deaths? Tests?\n\n      }).draw();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // Remove listener if the component is removed, too.\n      window.removeEventListener('resize', this.resize);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      // Update the chart with the component.\n      // Can change data or props here, whatever...\n      this.chart.draw();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var width = this.state.width;\n      return __jsx(ChartContainer, {\n        width: width,\n        setWidth: function setWidth(width) {\n          return _this2.setState({\n            width: width\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 7\n        }\n      }, \" \", __jsx(\"div\", {\n        id: \"myChart\",\n        ref: this.myChartContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 7\n        }\n      }), __jsx(\"div\", {\n        id: \"chart\",\n        ref: this.chartContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 7\n        }\n      }));\n    }\n  }]);\n\n  return ChartComponent;\n}(React.Component);\n\nexport default ChartComponent;","map":{"version":3,"sources":["/Users/prasanta/ReutersWork/INTERACTIVES/COVID-APP/chart-module-CountryLockdownIndicatorStrips/src/demo/Chart.js"],"names":["Chart","ChartContainer","React","base","debounce","WeeklyAverage","ChartComponent","width","createRef","chart","draw","selection","chartContainer","current","window","addEventListener","resize","myChart","myChartContainer","data","props","stroke","strokeWidth","fill","height","avg_days","bars","padding","labels","variable_name","removeEventListener","state","setState","Component"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,iBAAlB;AACA,OAAOC,cAAP,MAA2B,4BAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,gDAArB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AAEA,OAAOC,aAAP,MAA0B,8CAA1B;;IAIMC,c;;;;;;;;;;;;;;;;4DACM;AAAEC,MAAAA,KAAK,EAAE;AAAT,K;;qEACSL,KAAK,CAACM,SAAN,E;;uEAEEN,KAAK,CAACM,SAAN,E;;4DAGX,IAAIR,KAAJ,E;;8DACE,IAAIK,aAAJ,E;;6DAGDD,QAAQ,CAAC,YAAM;AAAE,YAAKK,KAAL,CAAWC,IAAX;AAAoB,KAA7B,EAA+B,GAA/B,C;;;;;;;wCAEG;AAClB;AACA,WAAKD,KAAL,CACGE,SADH,CACa,KAAKC,cAAL,CAAoBC,OADjC,EAEA;AACA;AAHA,OAIGH,IAJH,GAFkB,CAQlB;;AACAI,MAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkC,KAAKC,MAAvC,EATkB,CAWlB;;AAEA,WAAKC,OAAL,CACHN,SADG,CACO,KAAKO,gBAAL,CAAsBL,OAD7B,EAEHM,IAFG,CAEE,CACL;AACA;AAAC,gBAAO,YAAR;AAAqB,iBAAQ;AAA7B,OAFK,EAGL;AAAC,gBAAO,YAAR;AAAqB,iBAAQ;AAA7B,OAHK,CAFF,EAOHC,KAPG,CAOG;AACRC,QAAAA,MAAM,EAAE,WADA;AACa;AACrBC,QAAAA,WAAW,EAAE,GAFL;AAEU;AAClBC,QAAAA,IAAI,EAAE,MAHE;AAGM;AACdC,QAAAA,MAAM,EAAE,GAJA;AAIK;AACbC,QAAAA,QAAQ,EAAE,CALF;AAKK;AAEbC,QAAAA,IAAI,EAAE,IAPE;AAOI;AACT;AAEHC,QAAAA,OAAO,EAAE,CAVD;AAUI;AACG;AAEfC,QAAAA,MAAM,EAAE,KAbA;AAaO;AACG;AAElBC,QAAAA,aAAa,EAAE,OAhBP,CAgBgB;;AAhBhB,OAPH,EAyBHnB,IAzBG;AA2BD;;;2CAEsB;AACrB;AACAI,MAAAA,MAAM,CAACgB,mBAAP,CAA2B,QAA3B,EAAqC,KAAKd,MAA1C;AACD;;;yCAEoB;AACnB;AACA;AACA,WAAKP,KAAL,CAAWC,IAAX;AACD;;;6BAEQ;AAAA;;AAAA,UACCH,KADD,GACW,KAAKwB,KADhB,CACCxB,KADD;AAEP,aACA,MAAC,cAAD;AACE,QAAA,KAAK,EAAEA,KADT;AAEE,QAAA,QAAQ,EACN,kBAACA,KAAD;AAAA,iBAAW,MAAI,CAACyB,QAAL,CAAc;AAAEzB,YAAAA,KAAK,EAALA;AAAF,WAAd,CAAX;AAAA,SAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAMA;AAAK,QAAA,EAAE,EAAC,SAAR;AAAkB,QAAA,GAAG,EAAE,KAAKW,gBAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANA,EAOA;AAAK,QAAA,EAAE,EAAC,OAAR;AAAe,QAAA,GAAG,EAAE,KAAKN,cAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPA,CADA;AAWD;;;;EA/EwBV,KAAK,CAAC+B,S;;AAkFnC,eAAe3B,cAAf","sourcesContent":["import Chart from '../lib/chart.js';\nimport ChartContainer from './furniture/ChartContainer';\nimport React from 'react';\nimport { base } from '@reuters-graphics/style-color/dist/categorical';\nimport debounce from 'lodash/debounce';\n\nimport WeeklyAverage from '@reuters-graphics/chart-module-weeklyaverage';\n\n\n\nclass ChartComponent extends React.Component {\n    state = { width: '' };\n    chartContainer = React.createRef();\n\n    myChartContainer = React.createRef();\n\n    // Instantiate and add our chart class to this component.\n    chart = new Chart();\n    myChart = new WeeklyAverage();\n\n    // A resize function to redraw the chart.\n    resize = debounce(() => { this.chart.draw(); }, 250);\n\n    componentDidMount() {\n      // Use our chart module.\n      this.chart\n        .selection(this.chartContainer.current)\n      // .props({ fill: base.blue.hex })\n      // .data()\n        .draw();\n\n      // Add a listener to resize chart with the window.\n      window.addEventListener('resize', this.resize);\n\n      // Gurman's chart\n\n      this.myChart\n  .selection(this.myChartContainer.current)\n  .data([\n  \t// the data format needs a date and count variable. \n  \t{\"date\":\"2020-07-05\",\"count\":10000},\n  \t{\"date\":\"2020-07-06\",\"count\":10000}\n  ])\n  .props({\n\tstroke: 'steelblue', // colour of line\n\tstrokeWidth: 2.5, // width of the line\n\tfill: '#eee', // colour of the bars\n\theight: 200, // chart height\n\tavg_days: 7, // avg line should be an how many day rolling avg\n\n\tbars: true, // True by default. \n\t\t\t\t// If you want just the line, set value to true\n\n\tpadding: 0, // to set padding between the bars. \n                // value should be between 0 to 1\n\n\tlabels: false, // Setting this to true will show a label\n                   // to explain what the bars and line are\n\n\tvariable_name: 'cases', // What is this a chart of? Infections? Deaths? Tests?\n  })\n  .draw();\n\n    }\n\n    componentWillUnmount() {\n      // Remove listener if the component is removed, too.\n      window.removeEventListener('resize', this.resize);\n    }\n\n    componentDidUpdate() {\n      // Update the chart with the component.\n      // Can change data or props here, whatever...\n      this.chart.draw();\n    }\n\n    render() {\n      const { width } = this.state;\n      return (\n      <ChartContainer\n        width={width}\n        setWidth={\n          (width) => this.setState({ width })\n        }\n      > {/* This is our chart container 👇 */} \n      <div id='myChart' ref={this.myChartContainer}/>\n      <div id='chart'ref={this.chartContainer}/>\n      </ChartContainer>\n      );\n    }\n}\n\nexport default ChartComponent;\n"]},"metadata":{},"sourceType":"module"}