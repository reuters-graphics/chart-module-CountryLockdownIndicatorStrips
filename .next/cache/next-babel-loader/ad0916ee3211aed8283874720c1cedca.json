{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction createColorValues(_ref) {\n  var hex = _ref.hex,\n      rgbArray = _ref.rgbArray;\n\n  var _rgbArray = _slicedToArray(rgbArray, 3),\n      red = _rgbArray[0],\n      green = _rgbArray[1],\n      blue = _rgbArray[2];\n\n  return {\n    hex: hex,\n    rgbArray: rgbArray,\n    rgb: \"rgb(\".concat(red, \", \").concat(green, \", \").concat(blue, \")\"),\n    rgba: function rgba() {\n      var alpha = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 255;\n      return \"rgba(\".concat(red, \", \").concat(green, \", \").concat(blue, \", \").concat(alpha, \")\");\n    },\n    rgbaArray: function rgbaArray() {\n      var alpha = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 255;\n      return [red, green, blue, alpha];\n    }\n  };\n}\n\nfunction createColorAliasObjects(color) {\n  var values = createColorValues(color);\n  var objects = color.aliases.map(function (alias) {\n    var colorObject = {};\n    colorObject[alias] = values;\n    return colorObject;\n  });\n  return Object.assign.apply(Object, [{}].concat(_toConsumableArray(objects)));\n}\n\nfunction createColorScheme(scheme) {\n  var aliasObjects = scheme.map(function (color) {\n    return createColorAliasObjects(color);\n  });\n  var aliasScheme = Object.assign.apply(Object, [{}].concat(_toConsumableArray(aliasObjects)));\n  var colorScheme = Object.assign({}, aliasScheme, {\n    all: scheme.map(function (color) {\n      return Object.assign({\n        variables: color.variables,\n        aliases: color.aliases\n      }, createColorValues(color));\n    })\n  });\n\n  colorScheme.first = function () {\n    return colorScheme.all[0];\n  };\n\n  colorScheme.last = function () {\n    return colorScheme.all[colorScheme.all.length - 1];\n  };\n\n  return colorScheme;\n}\n\nvar baseLiteScheme = [{\n  hex: '#333333',\n  variables: ['$black-lite'],\n  aliases: ['blackLite'],\n  rgbArray: [51, 51, 51]\n}, {\n  hex: '#cccccc',\n  variables: ['$gray-lite'],\n  aliases: ['grayLite'],\n  rgbArray: [204, 204, 204]\n}, {\n  hex: '#f9f9f9',\n  variables: ['$white-lite'],\n  aliases: ['whiteLite'],\n  rgbArray: [249, 249, 249]\n}, {\n  hex: '#948072',\n  variables: ['$brown-lite'],\n  aliases: ['brownLite'],\n  rgbArray: [148, 128, 114]\n}, {\n  hex: '#ffd430',\n  variables: ['$yellow-lite'],\n  aliases: ['yellowLite'],\n  rgbArray: [255, 212, 48]\n}, {\n  hex: '#f68e26',\n  variables: ['$orange-lite'],\n  aliases: ['orangeLite'],\n  rgbArray: [246, 142, 38]\n}, {\n  hex: '#ee665b',\n  variables: ['$red-lite'],\n  aliases: ['redLite'],\n  rgbArray: [238, 102, 91]\n}, {\n  hex: '#74c476',\n  variables: ['$green-lite'],\n  aliases: ['greenLite'],\n  rgbArray: [116, 196, 118]\n}, {\n  hex: '#569ed3',\n  variables: ['$blue-lite'],\n  aliases: ['blueLite'],\n  rgbArray: [86, 158, 211]\n}, {\n  hex: '#4ec7ff',\n  variables: ['$cyan-lite'],\n  aliases: ['cyanLite'],\n  rgbArray: [78, 199, 255]\n}, {\n  hex: '#9582c1',\n  variables: ['$purple-lite'],\n  aliases: ['purpleLite'],\n  rgbArray: [149, 130, 193]\n}];\nvar baseScheme = [{\n  hex: '#000000',\n  variables: ['$black'],\n  aliases: ['black'],\n  rgbArray: [0, 0, 0]\n}, {\n  hex: '#666666',\n  variables: ['$gray'],\n  aliases: ['gray'],\n  rgbArray: [102, 102, 102]\n}, {\n  hex: '#ffffff',\n  variables: ['$white'],\n  aliases: ['white'],\n  rgbArray: [255, 255, 255]\n}, {\n  hex: '#7d604c',\n  variables: ['$brown'],\n  aliases: ['brown'],\n  rgbArray: [125, 96, 76]\n}, {\n  hex: '#f4c100',\n  variables: ['$yellow'],\n  aliases: ['yellow'],\n  rgbArray: [244, 193, 0]\n}, {\n  hex: '#e6550d',\n  variables: ['$orange'],\n  aliases: ['orange'],\n  rgbArray: [230, 85, 13]\n}, {\n  hex: '#de2d26',\n  variables: ['$red'],\n  aliases: ['red'],\n  rgbArray: [222, 45, 38]\n}, {\n  hex: '#31a354',\n  variables: ['$green'],\n  aliases: ['green'],\n  rgbArray: [49, 163, 84]\n}, {\n  hex: '#3182bd',\n  variables: ['$blue'],\n  aliases: ['blue'],\n  rgbArray: [49, 130, 189]\n}, {\n  hex: '#00a1eb',\n  variables: ['$cyan'],\n  aliases: ['cyan'],\n  rgbArray: [0, 161, 235]\n}, {\n  hex: '#6a51a3',\n  variables: ['$purple'],\n  aliases: ['purple'],\n  rgbArray: [106, 81, 163]\n}];\nvar polsCaScheme = [{\n  hex: '#ec2033',\n  variables: ['$pols-ca-liberal'],\n  aliases: ['liberal'],\n  rgbArray: [236, 32, 51]\n}, {\n  hex: '#2ab8eb',\n  variables: ['$pols-ca-conservative'],\n  aliases: ['conservative'],\n  rgbArray: [42, 184, 235]\n}, {\n  hex: '#f26725',\n  variables: ['$pols-ca-new-democratic'],\n  aliases: ['newDemocratic'],\n  rgbArray: [242, 103, 37]\n}, {\n  hex: '#0aa74b',\n  variables: ['$pols-ca-green'],\n  aliases: ['green'],\n  rgbArray: [10, 167, 75]\n}, {\n  hex: '#0a4286',\n  variables: ['$pols-ca-peoples-party'],\n  aliases: ['peoplesParty'],\n  rgbArray: [10, 66, 134]\n}];\nvar polsEsScheme = [{\n  hex: '#ec2033',\n  variables: ['$pols-es-socialists'],\n  aliases: ['socialists'],\n  rgbArray: [236, 32, 51]\n}, {\n  hex: '#1f8fce',\n  variables: ['$pols-es-peoples-party'],\n  aliases: ['peoplesParty'],\n  rgbArray: [31, 143, 206]\n}, {\n  hex: '#cadb2e',\n  variables: ['$pols-es-vox'],\n  aliases: ['vox'],\n  rgbArray: [202, 219, 46]\n}, {\n  hex: '#952978',\n  variables: ['$pols-es-unidas-podemos'],\n  aliases: ['unidasPodemos'],\n  rgbArray: [149, 41, 120]\n}, {\n  hex: '#f26725',\n  variables: ['$pols-es-ciudadanos'],\n  aliases: ['ciudadanos'],\n  rgbArray: [242, 103, 37]\n}, {\n  hex: '#fdc218',\n  variables: ['$pols-es-erc-catalan'],\n  aliases: ['ercCatalan'],\n  rgbArray: [253, 194, 24]\n}, {\n  hex: '#d0a115',\n  variables: ['$pols-es-jxc-catalan'],\n  aliases: ['jxcCatalan'],\n  rgbArray: [208, 161, 21]\n}, {\n  hex: '#008c3e',\n  variables: ['$pols-es-eaj-pnv-basque'],\n  aliases: ['eajPnvBasque'],\n  rgbArray: [0, 140, 62]\n}, {\n  hex: '#005e25',\n  variables: ['$pols-es-ehb-basque'],\n  aliases: ['ehbBasque'],\n  rgbArray: [0, 94, 37]\n}];\nvar polsUkScheme = [{\n  hex: '#4093b2',\n  variables: ['$pols-uk-conservative'],\n  aliases: ['conservative'],\n  rgbArray: [64, 147, 178]\n}, {\n  hex: '#ec5156',\n  variables: ['$pols-uk-labour'],\n  aliases: ['labour'],\n  rgbArray: [236, 81, 86]\n}, {\n  hex: '#eaaa00',\n  variables: ['$pols-uk-liberal-democrats'],\n  aliases: ['liberalDemocrats'],\n  rgbArray: [234, 170, 0]\n}, {\n  hex: '#2AB8EB',\n  variables: ['$pols-uk-brexit-party'],\n  aliases: ['brexitParty'],\n  rgbArray: [42, 184, 235]\n}];\nvar baseLite = createColorScheme(baseLiteScheme);\nvar base = createColorScheme(baseScheme);\nvar polsCa = createColorScheme(polsCaScheme);\nvar polsEs = createColorScheme(polsEsScheme);\nvar polsUk = createColorScheme(polsUkScheme);\nexport { base, baseLite, polsCa, polsEs, polsUk };","map":null,"metadata":{},"sourceType":"module"}