{"ast":null,"code":"var _jsxFileName = \"/Users/prasanta/ReutersWork/INTERACTIVES/COVID-APP/chart-module-CountryLockdownIndicatorStrips/src/demo/Chart.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Chart from '../lib/chart.js';\nimport ChartContainer from './furniture/ChartContainer';\nimport React from 'react';\nimport { base } from '@reuters-graphics/style-color/dist/categorical';\nimport debounce from 'lodash/debounce';\nimport WeeklyAverage from '@reuters-graphics/chart-module-weeklyaverage';\n\nclass ChartComponent extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      width: ''\n    });\n\n    _defineProperty(this, \"chartContainer\", React.createRef());\n\n    _defineProperty(this, \"myChartContainer\", React.createRef());\n\n    _defineProperty(this, \"chart\", new Chart());\n\n    _defineProperty(this, \"myChart\", new WeeklyAverage());\n\n    _defineProperty(this, \"resize\", debounce(() => {\n      this.chart.draw();\n    }, 250));\n  }\n\n  componentDidMount() {\n    // Use our chart module.\n    this.chart.selection(this.chartContainer.current) // .props({ fill: base.blue.hex })\n    // .data()\n    .draw(); // Add a listener to resize chart with the window.\n\n    window.addEventListener('resize', this.resize); // Gurman's chart\n\n    this.myChart.selection(this.myChartContainer.current).data([// the data format needs a date and count variable. \n    {\n      \"date\": \"2020-07-05\",\n      \"count\": 10000\n    }, {\n      \"date\": \"2020-07-06\",\n      \"count\": 10000\n    }]).props({\n      stroke: 'steelblue',\n      // colour of line\n      strokeWidth: 2.5,\n      // width of the line\n      fill: '#eee',\n      // colour of the bars\n      height: 200,\n      // chart height\n      avg_days: 7,\n      // avg line should be an how many day rolling avg\n      bars: true,\n      // True by default. \n      // If you want just the line, set value to true\n      padding: 0,\n      // to set padding between the bars. \n      // value should be between 0 to 1\n      labels: false,\n      // Setting this to true will show a label\n      // to explain what the bars and line are\n      variable_name: 'cases' // What is this a chart of? Infections? Deaths? Tests?\n\n    }).draw();\n  }\n\n  componentWillUnmount() {\n    // Remove listener if the component is removed, too.\n    window.removeEventListener('resize', this.resize);\n  }\n\n  componentDidUpdate() {\n    // Update the chart with the component.\n    // Can change data or props here, whatever...\n    this.chart.draw();\n  }\n\n  render() {\n    const {\n      width\n    } = this.state;\n    return __jsx(ChartContainer, {\n      width: width,\n      setWidth: width => this.setState({\n        width\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 7\n      }\n    }, \" \", __jsx(\"div\", {\n      id: \"myChart\",\n      ref: this.myChartContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }\n    }), __jsx(\"div\", {\n      id: \"chart\",\n      ref: this.chartContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }\n    }));\n  }\n\n}\n\nexport default ChartComponent;","map":{"version":3,"sources":["/Users/prasanta/ReutersWork/INTERACTIVES/COVID-APP/chart-module-CountryLockdownIndicatorStrips/src/demo/Chart.js"],"names":["Chart","ChartContainer","React","base","debounce","WeeklyAverage","ChartComponent","Component","width","createRef","chart","draw","componentDidMount","selection","chartContainer","current","window","addEventListener","resize","myChart","myChartContainer","data","props","stroke","strokeWidth","fill","height","avg_days","bars","padding","labels","variable_name","componentWillUnmount","removeEventListener","componentDidUpdate","render","state","setState"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,iBAAlB;AACA,OAAOC,cAAP,MAA2B,4BAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,gDAArB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AAEA,OAAOC,aAAP,MAA0B,8CAA1B;;AAIA,MAAMC,cAAN,SAA6BJ,KAAK,CAACK,SAAnC,CAA6C;AAAA;AAAA;;AAAA,mCACjC;AAAEC,MAAAA,KAAK,EAAE;AAAT,KADiC;;AAAA,4CAExBN,KAAK,CAACO,SAAN,EAFwB;;AAAA,8CAItBP,KAAK,CAACO,SAAN,EAJsB;;AAAA,mCAOjC,IAAIT,KAAJ,EAPiC;;AAAA,qCAQ/B,IAAIK,aAAJ,EAR+B;;AAAA,oCAWhCD,QAAQ,CAAC,MAAM;AAAE,WAAKM,KAAL,CAAWC,IAAX;AAAoB,KAA7B,EAA+B,GAA/B,CAXwB;AAAA;;AAazCC,EAAAA,iBAAiB,GAAG;AAClB;AACA,SAAKF,KAAL,CACGG,SADH,CACa,KAAKC,cAAL,CAAoBC,OADjC,EAEA;AACA;AAHA,KAIGJ,IAJH,GAFkB,CAQlB;;AACAK,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkC,KAAKC,MAAvC,EATkB,CAWlB;;AAEA,SAAKC,OAAL,CACHN,SADG,CACO,KAAKO,gBAAL,CAAsBL,OAD7B,EAEHM,IAFG,CAEE,CACL;AACA;AAAC,cAAO,YAAR;AAAqB,eAAQ;AAA7B,KAFK,EAGL;AAAC,cAAO,YAAR;AAAqB,eAAQ;AAA7B,KAHK,CAFF,EAOHC,KAPG,CAOG;AACRC,MAAAA,MAAM,EAAE,WADA;AACa;AACrBC,MAAAA,WAAW,EAAE,GAFL;AAEU;AAClBC,MAAAA,IAAI,EAAE,MAHE;AAGM;AACdC,MAAAA,MAAM,EAAE,GAJA;AAIK;AACbC,MAAAA,QAAQ,EAAE,CALF;AAKK;AAEbC,MAAAA,IAAI,EAAE,IAPE;AAOI;AACT;AAEHC,MAAAA,OAAO,EAAE,CAVD;AAUI;AACG;AAEfC,MAAAA,MAAM,EAAE,KAbA;AAaO;AACG;AAElBC,MAAAA,aAAa,EAAE,OAhBP,CAgBgB;;AAhBhB,KAPH,EAyBHpB,IAzBG;AA2BD;;AAEDqB,EAAAA,oBAAoB,GAAG;AACrB;AACAhB,IAAAA,MAAM,CAACiB,mBAAP,CAA2B,QAA3B,EAAqC,KAAKf,MAA1C;AACD;;AAEDgB,EAAAA,kBAAkB,GAAG;AACnB;AACA;AACA,SAAKxB,KAAL,CAAWC,IAAX;AACD;;AAEDwB,EAAAA,MAAM,GAAG;AACP,UAAM;AAAE3B,MAAAA;AAAF,QAAY,KAAK4B,KAAvB;AACA,WACA,MAAC,cAAD;AACE,MAAA,KAAK,EAAE5B,KADT;AAEE,MAAA,QAAQ,EACLA,KAAD,IAAW,KAAK6B,QAAL,CAAc;AAAE7B,QAAAA;AAAF,OAAd,CAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAMA;AAAK,MAAA,EAAE,EAAC,SAAR;AAAkB,MAAA,GAAG,EAAE,KAAKY,gBAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANA,EAOA;AAAK,MAAA,EAAE,EAAC,OAAR;AAAe,MAAA,GAAG,EAAE,KAAKN,cAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPA,CADA;AAWD;;AA/EwC;;AAkF7C,eAAeR,cAAf","sourcesContent":["import Chart from '../lib/chart.js';\nimport ChartContainer from './furniture/ChartContainer';\nimport React from 'react';\nimport { base } from '@reuters-graphics/style-color/dist/categorical';\nimport debounce from 'lodash/debounce';\n\nimport WeeklyAverage from '@reuters-graphics/chart-module-weeklyaverage';\n\n\n\nclass ChartComponent extends React.Component {\n    state = { width: '' };\n    chartContainer = React.createRef();\n\n    myChartContainer = React.createRef();\n\n    // Instantiate and add our chart class to this component.\n    chart = new Chart();\n    myChart = new WeeklyAverage();\n\n    // A resize function to redraw the chart.\n    resize = debounce(() => { this.chart.draw(); }, 250);\n\n    componentDidMount() {\n      // Use our chart module.\n      this.chart\n        .selection(this.chartContainer.current)\n      // .props({ fill: base.blue.hex })\n      // .data()\n        .draw();\n\n      // Add a listener to resize chart with the window.\n      window.addEventListener('resize', this.resize);\n\n      // Gurman's chart\n\n      this.myChart\n  .selection(this.myChartContainer.current)\n  .data([\n  \t// the data format needs a date and count variable. \n  \t{\"date\":\"2020-07-05\",\"count\":10000},\n  \t{\"date\":\"2020-07-06\",\"count\":10000}\n  ])\n  .props({\n\tstroke: 'steelblue', // colour of line\n\tstrokeWidth: 2.5, // width of the line\n\tfill: '#eee', // colour of the bars\n\theight: 200, // chart height\n\tavg_days: 7, // avg line should be an how many day rolling avg\n\n\tbars: true, // True by default. \n\t\t\t\t// If you want just the line, set value to true\n\n\tpadding: 0, // to set padding between the bars. \n                // value should be between 0 to 1\n\n\tlabels: false, // Setting this to true will show a label\n                   // to explain what the bars and line are\n\n\tvariable_name: 'cases', // What is this a chart of? Infections? Deaths? Tests?\n  })\n  .draw();\n\n    }\n\n    componentWillUnmount() {\n      // Remove listener if the component is removed, too.\n      window.removeEventListener('resize', this.resize);\n    }\n\n    componentDidUpdate() {\n      // Update the chart with the component.\n      // Can change data or props here, whatever...\n      this.chart.draw();\n    }\n\n    render() {\n      const { width } = this.state;\n      return (\n      <ChartContainer\n        width={width}\n        setWidth={\n          (width) => this.setState({ width })\n        }\n      > {/* This is our chart container ðŸ‘‡ */} \n      <div id='myChart' ref={this.myChartContainer}/>\n      <div id='chart'ref={this.chartContainer}/>\n      </ChartContainer>\n      );\n    }\n}\n\nexport default ChartComponent;\n"]},"metadata":{},"sourceType":"module"}