{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport ChartComponent from './base/ChartComponent';\nimport d3 from './utils/d3';\nimport defaultData from './defaultData.json'; // see docs on https://github.com/reuters-graphics/graphics-atlas-client\n\nimport AtlasMetadataClient from '@reuters-graphics/graphics-atlas-client';\nvar atlastClient = new AtlasMetadataClient();\nvar dateParse = d3.timeParse('%Y-%m-%d');\nvar dateFormat = d3.timeFormat('%b %e');\nvar dateFormat_tt = d3.timeFormat('%B %e');\nvar numberFormat_tt = d3.format(',');\n\nvar CountryLockdownIndicatorStrips = /*#__PURE__*/function (_ChartComponent) {\n  _inherits(CountryLockdownIndicatorStrips, _ChartComponent);\n\n  var _super = _createSuper(CountryLockdownIndicatorStrips);\n\n  function CountryLockdownIndicatorStrips() {\n    var _this;\n\n    _classCallCheck(this, CountryLockdownIndicatorStrips);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"defaultProps\", {\n      locale: 'en',\n      countryISO2: 'IN',\n      dataParams: {\n        date: 'date',\n        index: 'c1',\n        steps: 2,\n        // stepValue = 0, 1...\n        stepValue: 'flag'\n      },\n      height: 200,\n      margin: {\n        top: 10,\n        right: 10,\n        bottom: 10,\n        left: 10\n      },\n      valign: 'center',\n      // start, center, baseline\n      baseColor: '#ECEFF4',\n      stripColor: {\n        0: '#ECEFF4',\n        1: '#d1eeea',\n        2: '#ffe47f',\n        3: '#a50f15'\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"defaultData\", defaultData);\n\n    return _this;\n  }\n\n  _createClass(CountryLockdownIndicatorStrips, [{\n    key: \"draw\",\n    value: function draw() {\n      var data = this.data();\n      var props = this.props();\n      var node = this.selection().node(); // get country details from AtlasClient from ISO-2\n\n      props.country = atlastClient.getCountry(props.countryISO2);\n\n      var _node$getBoundingClie = node.getBoundingClientRect(),\n          width = _node$getBoundingClie.width;\n\n      var transition = d3.transition().duration(750); // main chart container\n\n      var chartDiv = this.selection().appendSelect('div') // see docs in ./utils/d3.js\n      .attr('class', 'CountryLockdownIndicatorStrips').style('width', \"\".concat(width, \"px\")).style('height', \"\".concat(props.height, \"px\")).appendSelect('div').style('transform', \"translate(\".concat(props.margin.left, \"px, \").concat(props.margin.top, \"px)\")); // set scales\n\n      var yScale = d3.scaleLinear().domain([0, props.dataParams.steps - 1]).range([props.height - props.margin.bottom, props.margin.top]);\n      var xScale = d3.scaleBand().domain(data.map(function (d) {\n        return dateParse(d[props.dataParams.date]);\n      })).range([props.margin.left, width - props.margin.right]).padding(0);\n      var colorDomain = props.stripColor ? Object.keys(props.stripColor).map(function (d) {\n        return +d;\n      }) : d3.extent(data.map(function (d) {\n        return d[props.dataParams.index];\n      }));\n      var colorScale = d3.scaleLinear().domain(colorDomain).range(['green', 'red']); // make bars\n\n      var bars = chartDiv.appendSelect('div.bars-container').style('display', 'flex').style('align-items', \"\".concat(props.valign)).selectAll('.bar').data(data, function (d, i) {\n        return d[props.dataParams.date];\n      }); // for smooth data updation\n\n      bars.enter().append('div').attr('class', function (d) {\n        return \"bar \".concat(d[props.dataParams.date]);\n      }).style('height', function (d) {\n        var stepSize = (props.height - props.margin.top - props.margin.bottom) / props.dataParams.steps;\n        var step = d[props.dataParams.stepValue] + 1;\n        return d[props.dataParams.index] ? step ? step * stepSize + 'px' : stepSize + 'px' : stepSize + 'px';\n      }).style('width', xScale.bandwidth() + 'px').style('display', 'inline-block') // .style('background', props.baseColor)\n      .style('background', function (d) {\n        var val = parseFloat(d[props.dataParams.index]);\n        console.log(val);\n        return val === null || val === NaN ? props.baseColor : '#000000';\n      }); // const circles = g.selectAll('circle')\n      //   .data(data, (d, i) => d[props.dataParams.date]);\n      // circles\n      //   .style('fill', props.fill)\n      //   .style('stroke', props.stroke);\n      // circles.enter().append('circle')\n      //   .style('fill', props.fill)\n      //   .style('stroke', props.stroke)\n      //   .style('stroke-width', props.strokeWidth)\n      //   .attr('cy', props.height / 2)\n      //   .attr('cx', (d, i) =>\n      //     data.slice(0, i).reduce((a, b) => a + b, 0) + (d / 2)\n      //   )\n      //   .merge(circles)\n      //   .transition(transition)\n      //   .attr('cx', (d, i) =>\n      //     data.slice(0, i).reduce((a, b) => a + b, 0) + (d / 2)\n      //   )\n      //   .attr('r', d => d / 2);\n      // circles.exit()\n      //   .transition(transition)\n      //   .attr('r', 0)\n      //   .remove();\n\n      return this;\n    }\n  }]);\n\n  return CountryLockdownIndicatorStrips;\n}(ChartComponent); // console.log(this.defaultProps);\n\n\nexport default CountryLockdownIndicatorStrips;","map":{"version":3,"sources":["/Users/prasanta/ReutersWork/INTERACTIVES/COVID-APP/chart-module-CountryLockdownIndicatorStrips/src/lib/chart.js"],"names":["ChartComponent","d3","defaultData","AtlasMetadataClient","atlastClient","dateParse","timeParse","dateFormat","timeFormat","dateFormat_tt","numberFormat_tt","format","CountryLockdownIndicatorStrips","locale","countryISO2","dataParams","date","index","steps","stepValue","height","margin","top","right","bottom","left","valign","baseColor","stripColor","data","props","node","selection","country","getCountry","getBoundingClientRect","width","transition","duration","chartDiv","appendSelect","attr","style","yScale","scaleLinear","domain","range","xScale","scaleBand","map","d","padding","colorDomain","Object","keys","extent","colorScale","bars","selectAll","i","enter","append","stepSize","step","bandwidth","val","parseFloat","console","log","NaN"],"mappings":"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","sourcesContent":["import ChartComponent from './base/ChartComponent';\nimport d3 from './utils/d3';\nimport defaultData from './defaultData.json';\n\n// see docs on https://github.com/reuters-graphics/graphics-atlas-client\nimport AtlasMetadataClient from '@reuters-graphics/graphics-atlas-client';\nconst atlastClient = new AtlasMetadataClient();\n\nconst dateParse = d3.timeParse('%Y-%m-%d');\nconst dateFormat = d3.timeFormat('%b %e');\nconst dateFormat_tt = d3.timeFormat('%B %e');\nconst numberFormat_tt = d3.format(',');\n\nclass CountryLockdownIndicatorStrips extends ChartComponent {\n    defaultProps = {\n        locale: 'en',\n        countryISO2: 'IN',\n        dataParams: {\n            date: 'date',\n            index: 'c1',\n            steps: 2, // stepValue = 0, 1...\n            stepValue: 'flag',\n        },\n        height: 200,\n        margin: {\n            top: 10,\n            right: 10,\n            bottom: 10,\n            left: 10,\n        },\n        valign: 'center', // start, center, baseline\n        baseColor: '#ECEFF4',\n        stripColor: {\n            0: '#ECEFF4',\n            1: '#d1eeea',\n            2: '#ffe47f',\n            3: '#a50f15',\n        },\n    };\n\n    defaultData = defaultData;\n\n    draw() {\n        const data = this.data();\n        const props = this.props();\n        const node = this.selection().node();\n\n        // get country details from AtlasClient from ISO-2\n        props.country = atlastClient.getCountry(props.countryISO2);\n\n        const {\n            width,\n        } = node.getBoundingClientRect();\n\n        const transition = d3.transition()\n            .duration(750);\n\n        // main chart container\n        const chartDiv = this.selection()\n            .appendSelect('div') // see docs in ./utils/d3.js\n            .attr('class', 'CountryLockdownIndicatorStrips')\n            .style('width', `${width}px`)\n            .style('height', `${props.height}px`)\n            .appendSelect('div')\n            .style('transform', `translate(${props.margin.left}px, ${props.margin.top}px)`);\n\n        // set scales\n        const yScale = d3.scaleLinear()\n            .domain([0, props.dataParams.steps - 1])\n            .range([props.height - props.margin.bottom, props.margin.top]);\n\n        const xScale = d3.scaleBand()\n            .domain(data.map(d => dateParse(d[props.dataParams.date])))\n            .range([props.margin.left, width - props.margin.right])\n            .padding(0);\n\n        const colorDomain = props.stripColor ? (Object.keys(props.stripColor)).map(d => +d) : d3.extent(data.map(d => d[props.dataParams.index]));\n\n        const colorScale = d3.scaleLinear()\n            .domain(colorDomain)\n            .range(['green', 'red']);\n\n        // make bars\n        const bars = chartDiv.appendSelect('div.bars-container')\n            .style('display', 'flex')\n            .style('align-items', `${props.valign}`)\n            .selectAll('.bar')\n            .data(data, (d, i) => d[props.dataParams.date]); // for smooth data updation\n\n        bars.enter().append('div')\n            .attr('class', d => `bar ${d[props.dataParams.date]}`)\n            .style('height', d => {\n                const stepSize = (props.height - props.margin.top - props.margin.bottom) / props.dataParams.steps;\n                const step = d[props.dataParams.stepValue] + 1;\n                return d[props.dataParams.index] ? (step ? step * stepSize + 'px' : stepSize + 'px') : stepSize + 'px';\n            })\n            .style('width', xScale.bandwidth() + 'px')\n            .style('display', 'inline-block')\n            // .style('background', props.baseColor)\n            .style('background', d => {\n                let val = parseFloat(d[props.dataParams.index]);\n                console.log(val)\n                return (val === null || val === NaN) ? props.baseColor : '#000000';\n            });\n\n        // const circles = g.selectAll('circle')\n        //   .data(data, (d, i) => d[props.dataParams.date]);\n\n        // circles\n        //   .style('fill', props.fill)\n        //   .style('stroke', props.stroke);\n\n        // circles.enter().append('circle')\n        //   .style('fill', props.fill)\n        //   .style('stroke', props.stroke)\n        //   .style('stroke-width', props.strokeWidth)\n        //   .attr('cy', props.height / 2)\n        //   .attr('cx', (d, i) =>\n        //     data.slice(0, i).reduce((a, b) => a + b, 0) + (d / 2)\n        //   )\n        //   .merge(circles)\n        //   .transition(transition)\n        //   .attr('cx', (d, i) =>\n        //     data.slice(0, i).reduce((a, b) => a + b, 0) + (d / 2)\n        //   )\n        //   .attr('r', d => d / 2);\n\n        // circles.exit()\n        //   .transition(transition)\n        //   .attr('r', 0)\n        //   .remove();\n\n        return this;\n    }\n}\n// console.log(this.defaultProps);\nexport default CountryLockdownIndicatorStrips;"]},"metadata":{},"sourceType":"module"}