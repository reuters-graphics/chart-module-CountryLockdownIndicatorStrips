{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/* eslint-disable no-trailing-spaces */\nimport ChartComponent from './base/ChartComponent';\nimport d3 from './utils/d3';\nimport { getDates, formatDateObject } from './utils/utils';\nimport defaultData from './defaultData.json';\nimport { interpolateHcl } from 'd3';\nimport d3SelectionMulti from 'd3-selection-multi';\nimport D3Locale from '@reuters-graphics/d3-locale'; // see docs on https://github.com/reuters-graphics/graphics-atlas-client\n// import AtlasMetadataClient from '@reuters-graphics/graphics-atlas-client';\n// const atlastClient = new AtlasMetadataClient();\n// const dateFormat_tt = d3.timeFormat('%B %e');\n// const numberFormat_tt = d3.format(',');\n\nvar dateParse = d3.timeParse('%Y-%m-%d');\n\nvar CountryLockdownIndicatorStrips = /*#__PURE__*/function (_ChartComponent) {\n  _inherits(CountryLockdownIndicatorStrips, _ChartComponent);\n\n  var _super = _createSuper(CountryLockdownIndicatorStrips);\n\n  function CountryLockdownIndicatorStrips() {\n    var _this;\n\n    _classCallCheck(this, CountryLockdownIndicatorStrips);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"defaultProps\", {\n      locale: 'en',\n      // See docs https://github.com/reuters-graphics/d3-locale \n      dateSeries: ['2019-12-31', '2020-07-07'],\n      // yyyy-mm-dd format\n      dataParams: {\n        date: 'date',\n        index: 'c1',\n        stepValue: 'flag',\n        steps: 2 // stepValue = 0, 1...\n\n      },\n      height: 150,\n      stripHeight: 50,\n      margin: {\n        top: 10,\n        right: 18,\n        bottom: 10,\n        left: 18\n      },\n      valign: 'center',\n      // start, center, baseline\n      baseColor: 'rgba(255,255,255,0.1)',\n      stripColor: {\n        // should be numeric values that are mapped from the data\n        0: '#4C566A',\n        1: '#948072',\n        2: '#f68e26',\n        3: '#de2d26'\n      },\n      // stripColor: { // should be numeric values that are mapped from the data\n      //   0: 'rgba(255,255,255,0.25)', // '#4C566A',\n      //   1: 'rgba(255,255,255,0.5)',\n      //   2: 'rgba(255,255,255,0.75)',\n      //   3: 'rgba(255,195,195,1)',\n      // },\n      legendItems: {\n        // should contain items from stripColor\n        \"null\": 'no data',\n        stepLegend: {\n          0: 'targeted',\n          1: 'nationwide'\n        },\n        indexLegend: {\n          0: 'no measures',\n          1: 'recommend closing',\n          2: 'require closing on some levels',\n          3: 'require closing all levels'\n        }\n      },\n      chartTitle: 'School closing measures',\n      axis: true,\n      markDates: ['2019-12-31', '2020-03-25', '2020-07-07'] // yyyy-mm-dddd\n\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"defaultData\", defaultData);\n\n    return _this;\n  }\n\n  _createClass(CountryLockdownIndicatorStrips, [{\n    key: \"draw\",\n    value: function draw() {\n      var allData = this.data();\n      var props = this.props();\n      var node = this.selection().node(); // date formatters\n\n      var locale = new D3Locale(props.locale);\n      var dateFormat = locale.formatTime('%b %e'); // get date range to be plotted\n\n      if (!props.dateSeries) {\n        props.dateSeries = [dateParse(allData[0].date), dateParse(allData[allData.length - 1].date)];\n      }\n\n      var dateSeries = getDates(props.dateSeries[0], props.dateSeries[1]); // console.log((dateSeries));\n      // set data for the date series\n\n      var data = dateSeries.map(function (d) {\n        var match = allData.find(function (e) {\n          return e[props.dataParams.date] === formatDateObject(d);\n        });\n\n        if (match) {\n          return match;\n        } else {\n          var obj = {};\n          obj[props.dataParams.date] = formatDateObject(d);\n          return obj;\n        }\n      }); // console.log(data);\n      // get country details from AtlasClient from ISO-2\n      // props.country = atlastClient.getCountry(props.countryISO2);\n\n      var _node$getBoundingClie = node.getBoundingClientRect(),\n          width = _node$getBoundingClie.width;\n\n      var transition = d3.transition().duration(750);\n      var stripheight = props.legendItems ? props.stripHeight - props.margin.top : props.height - props.margin.top - props.margin.bottom; // set scales\n\n      var xScale = d3.scaleBand().domain(dateSeries).range([0, width - props.margin.left - props.margin.right]).padding(0);\n      var yScale = d3.scaleLinear().domain([0, props.dataParams.steps - 1]).range([stripheight / props.dataParams.steps, stripheight]);\n      var colorDomain = props.stripColor ? Object.keys(props.stripColor).map(function (d) {\n        return +d;\n      }) : d3.extent(data.map(function (d) {\n        return d[props.dataParams.index];\n      }));\n      var colorRange = props.stripColor ? colorDomain.map(function (d) {\n        return props.stripColor[\"\".concat(d)];\n      }) : ['#cccccc', '#333333'];\n      var colorScale = d3.scaleLinear().domain(colorDomain).range(colorRange).interpolate(interpolateHcl); // main chart container\n\n      var chartDiv = this.selection().appendSelect('div') // see docs in ./utils/d3.js\n      .attr('class', 'CountryLockdownIndicatorStrips').style('width', \"\".concat(width, \"px\")) // .style('height', `${props.height}px`)\n      .appendSelect('div').styles({\n        'padding-top': \"\".concat(props.margin.top, \"px\"),\n        'padding-right': \"\".concat(props.margin.right, \"px\"),\n        'padding-bottom': \"\".concat(props.margin.bottom, \"px\"),\n        'padding-left': \"\".concat(props.margin.left, \"px\")\n      }); // make bars\n\n      var bars = chartDiv.appendSelect('div.bars-container').styles({\n        display: 'flex',\n        'align-items': \"\".concat(props.valign)\n      }).selectAll('.bar').data(data, function (d, i) {\n        return d[props.dataParams.date];\n      }); // for smooth data updation\n\n      bars.enter().append('div').attr('class', function (d) {\n        return \"bar \".concat(d[props.dataParams.date]);\n      }).style('display', 'inline-block').style('height', function (d) {\n        return yScale(d[props.dataParams.stepValue]) + 'px';\n      }).style('width', xScale.bandwidth() + 'px').style('background', function (d) {\n        var val = parseFloat(d[props.dataParams.index]);\n        return val !== null && !isNaN(val) ? colorScale(val) : props.baseColor;\n      }).merge(bars).transition(transition).style('display', 'inline-block').style('height', function (d) {\n        return yScale(d[props.dataParams.stepValue]) + 'px';\n      }).style('width', xScale.bandwidth() + 'px').style('background', function (d) {\n        var val = parseFloat(d[props.dataParams.index]);\n        return val !== null && !isNaN(val) ? colorScale(val) : props.baseColor;\n      });\n      bars.exit().transition(transition).attr('height', 0).remove(); // add axis\n      // console.log(xScale(dateParse('2020-07-07')));\n\n      if (props.axis) {\n        if (props.dataParams.steps > 1) {\n          var stepChange = [];\n\n          var _loop = function _loop(i) {\n            var match = data.find(function (e) {\n              return e[props.dataParams.stepValue] === i;\n            });\n\n            if (match) {\n              stepChange.push(match[props.dataParams.date]);\n            }\n          };\n\n          for (var i = 1; i < props.dataParams.steps; i++) {\n            _loop(i);\n          }\n        }\n\n        var markDates = props.markDates ? props.markDates.map(function (d) {\n          if (!isNaN(xScale(dateParse(d)))) {\n            return dateParse(d);\n          }\n        }).filter(function (d) {\n          return !isNaN(d);\n        }) : [dateSeries[0], dateSeries.slice(-1)[0]];\n        var xAxis = chartDiv.appendSelect('svg').attr('width', width - props.margin.left - props.margin.right).attr('height', 25).attr('transform', 'translate(0, 0)');\n        xAxis.appendSelect('g.axis-x').attr('class', 'axis-x axis').transition(transition).attr('transform', 'translate(0,0)').call(d3.axisBottom(xScale).tickValues(markDates).tickFormat(dateFormat));\n      } // add chart title\n\n\n      if (props.chartTitle) {\n        chartDiv.appendSelect('div.chart-title').attr('class', 'font-display chart-title').html(\"<h6>\".concat(props.chartTitle, \"</h6>\"));\n      } // chart legend\n\n\n      if (props.legendItems) {\n        var indexLegendItems = [];\n        Object.keys(props.legendItems.indexLegend).forEach(function (d) {\n          var item = {\n            key: d,\n            value: props.legendItems.indexLegend[d]\n          };\n          indexLegendItems.push(item);\n        });\n\n        if (props.legendItems[\"null\"]) {\n          indexLegendItems.unshift({\n            key: 'null',\n            value: props.legendItems[\"null\"]\n          });\n        } // const legendWidth = (width - props.margin.right - props.margin.left) / indexLegendItems.length;\n        // make legend\n\n\n        var legendDiv = chartDiv.appendSelect('div.legend-container');\n        var indexLegend = legendDiv.appendSelect('div.legend.indexLegend').selectAll('.legend-item').data(indexLegendItems); // for smooth data updation\n\n        indexLegend.enter().append('div').attr('class', 'legend-item').style('display', 'flex').style('margin', function (d) {\n          if (d.key === 'null') {\n            return '1rem 0';\n          }\n        }) // .style('width', `${legendWidth}px`)\n        .html(function (d) {\n          var color = +d.key !== null && !isNaN(+d.key) ? props.stripColor[+d.key] : props.baseColor;\n          return \"<span style=\\\"width:1.5rem;min-width:1rem; min-height:1rem; background: \".concat(color, \"\\\"></span> <p style=\\\"margin:0 0 0 0.5rem;\\\">\").concat(d.value, \"</p>\");\n        }).merge(indexLegend).style('display', 'flex') // .style('width', `${legendWidth}px`)\n        .html(function (d) {\n          var color = +d.key !== null && !isNaN(+d.key) ? props.stripColor[+d.key] : props.baseColor;\n          return \"<span style=\\\"width:1.5rem; min-width:1rem; min-height:1rem; background: \".concat(color, \"\\\"></span> <p style=\\\"margin:0 0 0 0.5rem;\\\">\").concat(d.value, \"</p>\");\n        });\n        indexLegend.exit().transition(transition).remove();\n\n        if (props.legendItems.stepLegend) {\n          // step legend stuff\n          var stepLegendItems = [];\n          Object.keys(props.legendItems.stepLegend).forEach(function (d) {\n            var item = {\n              key: d,\n              value: props.legendItems.stepLegend[d]\n            };\n            stepLegendItems.push(item);\n          }); // console.log(stepLegendItems);\n\n          var stepLegend = legendDiv.appendSelect('div.legend.stepLegend').style('align-items', \"\".concat(props.valign)).selectAll('.legend-item').data(stepLegendItems); // for smooth data updation\n\n          stepLegend.enter().append('div').attr('class', 'legend-item').style('display', 'flex').style('flex-flow', 'column-reverse') // .style('width', `${legendWidth}px`)\n          .html(function (d, i) {\n            var stepSize = stripheight / stepLegendItems.length;\n            return \"<span style=\\\"width:100%; height:\".concat((+d.key + 1) * stepSize, \"px; background-color:\").concat(props.baseColor, \";\\\"></span><p style=\\\"margin:0 0.5rem 0.5rem 0.5rem;\\\">\").concat(d.value, \"</p>\");\n          }).merge(stepLegend).style('display', 'flex').style('flex-flow', 'column-reverse') // .style('width', `${legendWidth}px`)\n          .html(function (d, i) {\n            var stepSize = stripheight / stepLegendItems.length;\n            return \"<span style=\\\"width:100%; height:\".concat((+d.key + 1) * stepSize, \"px; background-color:\").concat(props.baseColor, \";\\\"></span><p style=\\\"margin:0 0.5rem 0.5rem 0.5rem;\\\">\").concat(d.value, \"</p>\");\n          });\n          stepLegend.exit().transition(transition).remove();\n        }\n      }\n\n      return this;\n    }\n  }]);\n\n  return CountryLockdownIndicatorStrips;\n}(ChartComponent); // console.log(this.defaultProps);\n\n\nexport default CountryLockdownIndicatorStrips;","map":{"version":3,"sources":["/Users/prasanta/ReutersWork/INTERACTIVES/COVID-APP/chart-module-CountryLockdownIndicatorStrips/src/lib/chart.js"],"names":["ChartComponent","d3","getDates","formatDateObject","defaultData","interpolateHcl","d3SelectionMulti","D3Locale","dateParse","timeParse","CountryLockdownIndicatorStrips","locale","dateSeries","dataParams","date","index","stepValue","steps","height","stripHeight","margin","top","right","bottom","left","valign","baseColor","stripColor","legendItems","stepLegend","indexLegend","chartTitle","axis","markDates","allData","data","props","node","selection","dateFormat","formatTime","length","map","d","match","find","e","obj","getBoundingClientRect","width","transition","duration","stripheight","xScale","scaleBand","domain","range","padding","yScale","scaleLinear","colorDomain","Object","keys","extent","colorRange","colorScale","interpolate","chartDiv","appendSelect","attr","style","styles","bars","display","selectAll","i","enter","append","bandwidth","val","parseFloat","isNaN","merge","exit","remove","stepChange","push","filter","slice","xAxis","call","axisBottom","tickValues","tickFormat","html","indexLegendItems","forEach","item","key","value","unshift","legendDiv","color","stepLegendItems","stepSize"],"mappings":"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","sourcesContent":["/* eslint-disable no-trailing-spaces */\nimport ChartComponent from './base/ChartComponent';\nimport d3 from './utils/d3';\nimport { getDates, formatDateObject } from './utils/utils';\nimport defaultData from './defaultData.json';\nimport { interpolateHcl } from 'd3';\nimport d3SelectionMulti from 'd3-selection-multi';\nimport D3Locale from '@reuters-graphics/d3-locale';\n// see docs on https://github.com/reuters-graphics/graphics-atlas-client\n// import AtlasMetadataClient from '@reuters-graphics/graphics-atlas-client';\n// const atlastClient = new AtlasMetadataClient();\n\n// const dateFormat_tt = d3.timeFormat('%B %e');\n// const numberFormat_tt = d3.format(',');\nconst dateParse = d3.timeParse('%Y-%m-%d');\n\nclass CountryLockdownIndicatorStrips extends ChartComponent {\n    defaultProps = {\n      locale: 'en', // See docs https://github.com/reuters-graphics/d3-locale \n      dateSeries: ['2019-12-31', '2020-07-07'], // yyyy-mm-dd format\n      dataParams: {\n        date: 'date',\n        index: 'c1',\n        stepValue: 'flag',\n        steps: 2, // stepValue = 0, 1...\n      },\n      height: 150,\n      stripHeight: 50,\n      margin: {\n        top: 10,\n        right: 18,\n        bottom: 10,\n        left: 18,\n      },\n      valign: 'center', // start, center, baseline\n      baseColor: 'rgba(255,255,255,0.1)',\n      stripColor: { // should be numeric values that are mapped from the data\n        0: '#4C566A',\n        1: '#948072',\n        2: '#f68e26',\n        3: '#de2d26',\n      },\n      // stripColor: { // should be numeric values that are mapped from the data\n      //   0: 'rgba(255,255,255,0.25)', // '#4C566A',\n      //   1: 'rgba(255,255,255,0.5)',\n      //   2: 'rgba(255,255,255,0.75)',\n      //   3: 'rgba(255,195,195,1)',\n      // },\n      legendItems: { // should contain items from stripColor\n        null: 'no data',\n        stepLegend: {\n          0: 'targeted',\n          1: 'nationwide',\n        },\n        indexLegend: {\n          0: 'no measures',\n          1: 'recommend closing',\n          2: 'require closing on some levels',\n          3: 'require closing all levels',\n        },\n      },\n      chartTitle: 'School closing measures',\n      axis: true,\n      markDates: ['2019-12-31', '2020-03-25', '2020-07-07'], // yyyy-mm-dddd\n    };\n\n    defaultData = defaultData;\n\n    draw() {\n      const allData = this.data();\n      const props = this.props();\n      const node = this.selection().node();\n\n      // date formatters\n      const locale = new D3Locale(props.locale);\n      const dateFormat = locale.formatTime('%b %e');\n\n      // get date range to be plotted\n      if (!props.dateSeries) {\n        props.dateSeries = [dateParse(allData[0].date), dateParse(allData[allData.length - 1].date)];\n      }\n      const dateSeries = getDates(props.dateSeries[0], props.dateSeries[1]);   \n      // console.log((dateSeries));\n\n      // set data for the date series\n      const data = dateSeries.map((d) => {\n        const match = allData.find((e) => (e[props.dataParams.date]) === (formatDateObject(d)));\n        if (match) {\n          return match;\n        } else {\n          const obj = {};\n          obj[props.dataParams.date] = formatDateObject(d);\n          return obj;\n        }\n      }); \n      // console.log(data);\n      // get country details from AtlasClient from ISO-2\n      // props.country = atlastClient.getCountry(props.countryISO2);\n\n      const {\n        width,\n      } = node.getBoundingClientRect();\n\n      const transition = d3.transition()\n        .duration(750);\n\n      const stripheight = props.legendItems ? (props.stripHeight - props.margin.top) : (props.height - props.margin.top - props.margin.bottom);\n\n      // set scales\n  \n      const xScale = d3.scaleBand()\n        .domain(dateSeries)\n        .range([0, width - props.margin.left - props.margin.right])\n        .padding(0);\n\n      const yScale = d3.scaleLinear()\n        .domain([0, props.dataParams.steps - 1])\n        .range([stripheight / (props.dataParams.steps), stripheight]);\n\n      const colorDomain = props.stripColor ? (Object.keys(props.stripColor)).map(d => +d) : d3.extent(data.map(d => d[props.dataParams.index]));\n  \n      const colorRange = props.stripColor ? colorDomain.map(d => props.stripColor[`${d}`]) : ['#cccccc', '#333333'];\n  \n      const colorScale = d3.scaleLinear()\n        .domain(colorDomain)\n        .range(colorRange)\n        .interpolate(interpolateHcl);\n\n      // main chart container\n      const chartDiv = this.selection()\n        .appendSelect('div') // see docs in ./utils/d3.js\n        .attr('class', 'CountryLockdownIndicatorStrips')\n        .style('width', `${width}px`)\n      // .style('height', `${props.height}px`)\n        .appendSelect('div')\n        .styles({\n          'padding-top': `${props.margin.top}px`,\n          'padding-right': `${props.margin.right}px`,\n          'padding-bottom': `${props.margin.bottom}px`,\n          'padding-left': `${props.margin.left}px`,\n        });\n\n      // make bars\n      const bars = chartDiv.appendSelect('div.bars-container')\n        .styles({\n          display: 'flex',\n          'align-items': `${props.valign}`,\n        })\n        .selectAll('.bar')\n        .data(data, (d, i) => d[props.dataParams.date]); // for smooth data updation\n\n      bars.enter().append('div')\n        .attr('class', d => `bar ${d[props.dataParams.date]}`)\n        .style('display', 'inline-block')\n        .style('height', d => {\n          return yScale(d[props.dataParams.stepValue]) + 'px';\n        })\n        .style('width', xScale.bandwidth() + 'px')\n        .style('background', d => {\n          const val = parseFloat(d[props.dataParams.index]);\n          return (val !== null) && !(isNaN(val)) ? colorScale(val) : props.baseColor;\n        })\n        .merge(bars)\n        .transition(transition)\n        .style('display', 'inline-block')\n        .style('height', d => {\n          return yScale(d[props.dataParams.stepValue]) + 'px';\n        })\n        .style('width', xScale.bandwidth() + 'px')\n        .style('background', d => {\n          const val = parseFloat(d[props.dataParams.index]);\n          return (val !== null) && !(isNaN(val)) ? colorScale(val) : props.baseColor;\n        });\n\n      bars.exit()\n        .transition(transition)\n        .attr('height', 0)\n        .remove();\n\n      // add axis\n      // console.log(xScale(dateParse('2020-07-07')));\n      if (props.axis) {\n        if (props.dataParams.steps > 1) {\n          const stepChange = [];\n          for (let i = 1; i < props.dataParams.steps; i++) {\n            const match = data.find((e) => (e[props.dataParams.stepValue]) === i);\n            if (match) {\n              stepChange.push(match[props.dataParams.date]);\n            }\n          }\n        }\n        const markDates = props.markDates ? \n          props.markDates.map(d => {\n            if (!isNaN(xScale(dateParse(d)))) {\n              return dateParse(d);\n            } \n          }).filter(d => !isNaN(d)) : [dateSeries[0], dateSeries.slice(-1)[0]];\n\n        const xAxis = chartDiv.appendSelect('svg')\n          .attr('width', width - props.margin.left - props.margin.right)\n          .attr('height', 25)\n          .attr('transform', 'translate(0, 0)');\n\n        xAxis.appendSelect('g.axis-x')\n          .attr('class', 'axis-x axis')\n          .transition(transition)\n          .attr('transform', 'translate(0,0)')\n          .call(\n            d3.axisBottom(xScale)\n              .tickValues(markDates)\n              .tickFormat(dateFormat)\n          );\n      }\n      // add chart title\n      if (props.chartTitle) {\n        chartDiv.appendSelect('div.chart-title')\n          .attr('class', 'font-display chart-title')\n          .html(`<h6>${props.chartTitle}</h6>`);\n      }\n      \n      // chart legend\n      if (props.legendItems) {\n        const indexLegendItems = [];\n        (Object.keys(props.legendItems.indexLegend)).forEach(d => {\n          const item = {\n            key: d,\n            value: props.legendItems.indexLegend[d],\n          };\n          indexLegendItems.push(item);\n        });\n        if (props.legendItems.null) {\n          indexLegendItems.unshift({\n            key: 'null',\n            value: props.legendItems.null,\n          });\n        }\n        // const legendWidth = (width - props.margin.right - props.margin.left) / indexLegendItems.length;\n\n        // make legend\n        const legendDiv = chartDiv.appendSelect('div.legend-container');\n\n        const indexLegend = legendDiv.appendSelect('div.legend.indexLegend')\n          .selectAll('.legend-item')\n          .data(indexLegendItems); // for smooth data updation\n\n        indexLegend.enter().append('div')\n          .attr('class', 'legend-item')\n          .style('display', 'flex')\n          .style('margin', d => {\n            if (d.key === 'null') { return '1rem 0'; }\n          })\n          // .style('width', `${legendWidth}px`)\n          .html(d => {\n            const color = (+d.key !== null) && !(isNaN(+d.key)) ? props.stripColor[+d.key] : props.baseColor;\n            return `<span style=\"width:1.5rem;min-width:1rem; min-height:1rem; background: ${color}\"></span> <p style=\"margin:0 0 0 0.5rem;\">${d.value}</p>`;\n          })\n          .merge(indexLegend)\n          .style('display', 'flex')\n          // .style('width', `${legendWidth}px`)\n          .html(d => {\n            const color = (+d.key !== null) && !(isNaN(+d.key)) ? props.stripColor[+d.key] : props.baseColor;\n            return `<span style=\"width:1.5rem; min-width:1rem; min-height:1rem; background: ${color}\"></span> <p style=\"margin:0 0 0 0.5rem;\">${d.value}</p>`;\n          });\n\n        indexLegend.exit()\n          .transition(transition)\n          .remove();\n\n        if (props.legendItems.stepLegend) {\n          // step legend stuff\n          const stepLegendItems = [];\n          (Object.keys(props.legendItems.stepLegend)).forEach(d => {\n            const item = {\n              key: d,\n              value: props.legendItems.stepLegend[d],\n            };\n            stepLegendItems.push(item);\n          });\n          // console.log(stepLegendItems);\n\n          const stepLegend = legendDiv.appendSelect('div.legend.stepLegend')\n            .style('align-items', `${props.valign}`)\n            .selectAll('.legend-item')\n            .data(stepLegendItems); // for smooth data updation\n\n          stepLegend.enter().append('div')\n            .attr('class', 'legend-item')\n            .style('display', 'flex')\n            .style('flex-flow', 'column-reverse')\n            // .style('width', `${legendWidth}px`)\n            .html((d, i) => {\n              const stepSize = (stripheight) / stepLegendItems.length;\n              return `<span style=\"width:100%; height:${((+d.key) + 1) * stepSize}px; background-color:${props.baseColor};\"></span><p style=\"margin:0 0.5rem 0.5rem 0.5rem;\">${d.value}</p>`;\n            })\n            .merge(stepLegend)\n            .style('display', 'flex')\n            .style('flex-flow', 'column-reverse')\n            // .style('width', `${legendWidth}px`)\n            .html((d, i) => {\n              const stepSize = (stripheight) / stepLegendItems.length;\n              return `<span style=\"width:100%; height:${((+d.key) + 1) * stepSize}px; background-color:${props.baseColor};\"></span><p style=\"margin:0 0.5rem 0.5rem 0.5rem;\">${d.value}</p>`;\n            });\n\n          stepLegend.exit()\n            .transition(transition)\n            .remove();\n        }\n      }\n      return this;\n    }\n}\n// console.log(this.defaultProps);\nexport default CountryLockdownIndicatorStrips;\n"]},"metadata":{},"sourceType":"module"}