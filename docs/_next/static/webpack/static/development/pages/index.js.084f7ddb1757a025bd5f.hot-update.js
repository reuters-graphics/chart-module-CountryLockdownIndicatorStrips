webpackHotUpdate("static/development/pages/index.js",{

/***/ "./src/lib/chart.js":
/*!**************************!*\
  !*** ./src/lib/chart.js ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/classCallCheck */ \"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/createClass */ \"./node_modules/@babel/runtime/helpers/esm/createClass.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/assertThisInitialized */ \"./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/esm/inherits */ \"./node_modules/@babel/runtime/helpers/esm/inherits.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/esm/possibleConstructorReturn */ \"./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/esm/getPrototypeOf */ \"./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/esm/defineProperty */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var _base_ChartComponent__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./base/ChartComponent */ \"./src/lib/base/ChartComponent.js\");\n/* harmony import */ var _utils_d3__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/d3 */ \"./src/lib/utils/d3.js\");\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/utils */ \"./src/lib/utils/utils.js\");\n/* harmony import */ var _defaultData_json__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./defaultData.json */ \"./src/lib/defaultData.json\");\nvar _defaultData_json__WEBPACK_IMPORTED_MODULE_10___namespace = /*#__PURE__*/__webpack_require__.t(/*! ./defaultData.json */ \"./src/lib/defaultData.json\", 1);\n/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! d3 */ \"./node_modules/d3/index.js\");\n/* harmony import */ var d3_selection_multi__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! d3-selection-multi */ \"./node_modules/d3-selection-multi/index.js\");\n/* harmony import */ var _reuters_graphics_d3_locale__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @reuters-graphics/d3-locale */ \"./node_modules/@reuters-graphics/d3-locale/dist/index.js\");\n/* harmony import */ var _reuters_graphics_d3_locale__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(_reuters_graphics_d3_locale__WEBPACK_IMPORTED_MODULE_13__);\n\n\n\n\n\n\n\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return Object(_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/* eslint-disable no-trailing-spaces */\n\n\n\n\n\n\n // see docs on https://github.com/reuters-graphics/graphics-atlas-client\n// import AtlasMetadataClient from '@reuters-graphics/graphics-atlas-client';\n// const atlastClient = new AtlasMetadataClient();\n// const dateFormat_tt = d3.timeFormat('%B %e');\n// const numberFormat_tt = d3.format(',');\n\nvar dateParse = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].timeParse('%Y-%m-%d');\n\nvar CountryLockdownIndicatorStrips = /*#__PURE__*/function (_ChartComponent) {\n  Object(_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(CountryLockdownIndicatorStrips, _ChartComponent);\n\n  var _super = _createSuper(CountryLockdownIndicatorStrips);\n\n  function CountryLockdownIndicatorStrips() {\n    var _this;\n\n    Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, CountryLockdownIndicatorStrips);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(Object(_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_this), \"defaultProps\", {\n      locale: 'en',\n      // See docs https://github.com/reuters-graphics/d3-locale \n      // dateSeries: ['2019-12-31', '2020-07-07'], // yyyy-mm-dd format\n      // dataParams: {\n      //   date: 'date',\n      //   index: 'c1',\n      //   stepValue: 'flag',\n      //   steps: 2, // stepValue = 0, 1...\n      // },\n      height: 150,\n      stripHeight: 50,\n      margin: {\n        top: 10,\n        right: 18,\n        bottom: 10,\n        left: 18\n      },\n      valign: 'center',\n      // start, center, baseline\n      baseColor: 'rgba(255,255,255,0.1)',\n      // stripColor: { // should be numeric values that are mapped from the data\n      //   0: 'rgba(255,255,255,0.25)', // '#4C566A',\n      //   1: 'rgba(255,255,255,0.5)',\n      //   2: 'rgba(255,255,255,0.75)',\n      //   3: 'rgba(255,195,195,1)',\n      // },\n      // legendItems: { // should contain items from stripColor\n      //   null: 'no data',\n      //   stepLegend: {\n      //     0: 'targeted',\n      //     1: 'nationwide',\n      //   },\n      //   indexLegend: {\n      //     0: 'no measures',\n      //     1: 'recommend closing',\n      //     2: 'require closing on some levels',\n      //     3: 'require closing all levels',\n      //   },\n      // },\n      // chartTitle: 'School closing measures',\n      axis: true // markDates: ['2019-12-31', '2020-03-25', '2020-07-07'], // yyyy-mm-dddd\n\n    });\n\n    Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(Object(_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_this), \"defaultData\", _defaultData_json__WEBPACK_IMPORTED_MODULE_10__);\n\n    return _this;\n  }\n\n  Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(CountryLockdownIndicatorStrips, [{\n    key: \"draw\",\n    value: function draw() {\n      var allData = this.data();\n      var props = this.props();\n      var node = this.selection().node(); // date formatters\n\n      var locale = new _reuters_graphics_d3_locale__WEBPACK_IMPORTED_MODULE_13___default.a(props.locale);\n      var dateFormat = locale.formatTime('%b %e'); // get date range to be plotted\n\n      if (!props.dateSeries) {\n        props.dateSeries = [dateParse(allData[0].date), dateParse(allData[allData.length - 1].date)];\n      }\n\n      var dateSeries = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_9__[\"getDates\"])(props.dateSeries[0], props.dateSeries[1]); // console.log((dateSeries));\n      // set data for the date series\n\n      var data = dateSeries.map(function (d) {\n        var match = allData.find(function (e) {\n          return e[props.dataParams.date] === Object(_utils_utils__WEBPACK_IMPORTED_MODULE_9__[\"formatDateObject\"])(d);\n        });\n\n        if (match) {\n          return match;\n        } else {\n          var obj = {};\n          obj[props.dataParams.date] = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_9__[\"formatDateObject\"])(d);\n          return obj;\n        }\n      }); // console.log(data);\n      // get country details from AtlasClient from ISO-2\n      // props.country = atlastClient.getCountry(props.countryISO2);\n\n      var _node$getBoundingClie = node.getBoundingClientRect(),\n          width = _node$getBoundingClie.width;\n\n      var transition = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].transition().duration(750);\n      var stripheight = props.legendItems ? props.stripHeight - props.margin.top : props.height - props.margin.top - props.margin.bottom; // set scales\n\n      var xScale = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].scaleBand().domain(dateSeries).range([0, width - props.margin.left - props.margin.right]).padding(0);\n      var yScale = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].scaleLinear().domain([0, props.dataParams.steps - 1]).range([stripheight / props.dataParams.steps, stripheight]);\n      var colorDomain = props.stripColor ? Object.keys(props.stripColor).map(function (d) {\n        return +d;\n      }) : _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].extent(data.map(function (d) {\n        return d[props.dataParams.index];\n      }));\n      var colorRange = props.stripColor ? colorDomain.map(function (d) {\n        return props.stripColor[\"\".concat(d)];\n      }) : ['#333333', '#cccccc'];\n      var colorScale = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].scaleLinear().domain(colorDomain).range(colorRange).interpolate(d3__WEBPACK_IMPORTED_MODULE_11__[\"interpolateHcl\"]); // main chart container\n\n      var chartDiv = this.selection().appendSelect('div') // see docs in ./utils/d3.js\n      .attr('class', 'CountryLockdownIndicatorStrips').style('width', \"\".concat(width, \"px\")) // .style('height', `${props.height}px`)\n      .appendSelect('div').styles({\n        'padding-top': \"\".concat(props.margin.top, \"px\"),\n        'padding-right': \"\".concat(props.margin.right, \"px\"),\n        'padding-bottom': \"\".concat(props.margin.bottom, \"px\"),\n        'padding-left': \"\".concat(props.margin.left, \"px\")\n      }); // make bars\n\n      var bars = chartDiv.appendSelect('div.bars-container').styles({\n        display: 'flex',\n        'align-items': \"\".concat(props.valign),\n        'justify-content': 'center'\n      }).selectAll('.bar').data(data, function (d, i) {\n        return d[props.dataParams.date];\n      }); // for smooth data updation\n\n      bars.enter().append('div').attr('class', function (d) {\n        return \"bar \".concat(d[props.dataParams.date]);\n      }).style('display', 'inline-block').style('height', function (d) {\n        if (isNaN(d[props.dataParams.stepValue])) {\n          return yScale(0) + 'px';\n        } else {\n          return yScale(d[props.dataParams.stepValue]) + 'px';\n        }\n      }).style('width', xScale.bandwidth() + 'px').style('background', function (d) {\n        var val = parseFloat(d[props.dataParams.index]);\n        return val !== null && !isNaN(val) ? colorScale(val) : props.baseColor;\n      }).merge(bars).transition(transition).style('display', 'inline-block').style('height', function (d) {\n        if (isNaN(d[props.dataParams.stepValue])) {\n          return yScale(0) + 'px';\n        } else {\n          return yScale(d[props.dataParams.stepValue]) + 'px';\n        }\n      }).style('width', xScale.bandwidth() + 'px').style('background', function (d) {\n        var val = parseFloat(d[props.dataParams.index]);\n        return val !== null && !isNaN(val) ? colorScale(val) : props.baseColor;\n      });\n      bars.exit().transition(transition).attr('height', 0).remove(); // add axis\n      // console.log(xScale(dateParse('2020-07-07')));\n\n      if (props.axis) {\n        var stepChange = [];\n\n        if (props.dataParams.steps > 1) {\n          var _loop = function _loop(i) {\n            var match = data.find(function (e) {\n              return e[props.dataParams.stepValue] === i;\n            });\n\n            if (match) {\n              stepChange.push(dateParse(match[props.dataParams.date]));\n            }\n          };\n\n          for (var i = 1; i < props.dataParams.steps; i++) {\n            _loop(i);\n          }\n        }\n\n        var markDates = props.markDates ? props.markDates.map(function (d) {\n          if (!isNaN(xScale(dateParse(d)))) {\n            return dateParse(d);\n          }\n        }).filter(function (d) {\n          return !isNaN(d);\n        }) : [dateSeries[0], dateSeries.slice(-1)[0]].concat(stepChange); // console.log(markDates);\n\n        var xAxis = chartDiv.appendSelect('svg').attr('width', width - props.margin.left - props.margin.right).attr('height', 25).attr('transform', 'translate(0, 0)');\n        xAxis.appendSelect('g.axis-x').attr('class', 'axis-x axis').transition(transition).attr('transform', 'translate(0,0)').call(_utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].axisBottom(xScale).tickValues(markDates).tickFormat(dateFormat));\n      } // add chart title\n\n\n      if (props.chartTitle) {\n        chartDiv.appendSelect('div.chart-title').attr('class', 'font-display chart-title').html(\"<h6>\".concat(props.chartTitle, \"</h6>\"));\n      } // chart legend\n\n\n      if (props.legendItems) {\n        if (props.legendItems.indexLegend) {\n          var indexLegendItems = [];\n          Object.keys(props.legendItems.indexLegend).forEach(function (d) {\n            var item = {\n              key: d,\n              value: props.legendItems.indexLegend[d]\n            };\n            indexLegendItems.push(item);\n          });\n\n          if (props.legendItems[\"null\"]) {\n            indexLegendItems.unshift({\n              key: 'null',\n              value: props.legendItems[\"null\"]\n            });\n          } // const legendWidth = (width - props.margin.right - props.margin.left) / indexLegendItems.length;\n          // make legend\n\n\n          var _legendDiv = chartDiv.appendSelect('div.legend-container');\n\n          var indexLegend = _legendDiv.appendSelect('div.legend.indexLegend').selectAll('.legend-item').data(indexLegendItems); // for smooth data updation\n\n\n          indexLegend.enter().append('div').attr('class', 'legend-item').style('display', 'flex').style('margin', function (d) {\n            if (d.key === 'null') {\n              return '1rem 0';\n            }\n          }) // .style('width', `${legendWidth}px`)\n          .html(function (d) {\n            var color = +d.key !== null && !isNaN(+d.key) ? colorScale(+d.key) : props.baseColor;\n            return \"<span style=\\\"width:1.5rem;min-width:1rem; min-height:1rem; background: \".concat(color, \"\\\"></span> <p style=\\\"margin:0 0 0 0.5rem;\\\">\").concat(d.value, \"</p>\");\n          }).merge(indexLegend).style('display', 'flex') // .style('width', `${legendWidth}px`)\n          .html(function (d) {\n            var color = +d.key !== null && !isNaN(+d.key) ? colorScale(+d.key) : props.baseColor;\n            return \"<span style=\\\"width:1.5rem; min-width:1rem; min-height:1rem; background: \".concat(color, \"\\\"></span> <p style=\\\"margin:0 0 0 0.5rem;\\\">\").concat(d.value, \"</p>\");\n          });\n          indexLegend.exit().transition(transition).remove();\n        }\n\n        if (props.legendItems.stepLegend) {\n          // step legend stuff\n          var stepLegendItems = [];\n          Object.keys(props.legendItems.stepLegend).forEach(function (d) {\n            var item = {\n              key: d,\n              value: props.legendItems.stepLegend[d]\n            };\n            stepLegendItems.push(item);\n          }); // console.log(stepLegendItems);\n\n          var stepLegend = legendDiv.appendSelect('div.legend.stepLegend').style('align-items', \"\".concat(props.valign)).selectAll('.legend-item').data(stepLegendItems); // for smooth data updation\n\n          stepLegend.enter().append('div').attr('class', 'legend-item').style('display', 'flex').style('flex-flow', 'column-reverse') // .style('width', `${legendWidth}px`)\n          .html(function (d, i) {\n            var stepSize = stripheight / stepLegendItems.length;\n            return \"<span style=\\\"width:100%; height:\".concat((+d.key + 1) * stepSize, \"px; background-color:\").concat(props.baseColor, \";\\\"></span><p style=\\\"margin:0 0.5rem 0.5rem 0.5rem;\\\">\").concat(d.value, \"</p>\");\n          }).merge(stepLegend).style('display', 'flex').style('flex-flow', 'column-reverse') // .style('width', `${legendWidth}px`)\n          .html(function (d, i) {\n            var stepSize = stripheight / stepLegendItems.length;\n            return \"<span style=\\\"width:100%; height:\".concat((+d.key + 1) * stepSize, \"px; background-color:\").concat(props.baseColor, \";\\\"></span><p style=\\\"margin:0 0.5rem 0.5rem 0.5rem;\\\">\").concat(d.value, \"</p>\");\n          });\n          stepLegend.exit().transition(transition).remove();\n        }\n      }\n\n      return this;\n    }\n  }]);\n\n  return CountryLockdownIndicatorStrips;\n}(_base_ChartComponent__WEBPACK_IMPORTED_MODULE_7__[\"default\"]); // console.log(this.defaultProps);\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (CountryLockdownIndicatorStrips);\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports_1 = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports_1, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports_1)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports_1;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports_1)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NoYXJ0LmpzPzdiYjgiXSwibmFtZXMiOlsiZGF0ZVBhcnNlIiwiZDMiLCJ0aW1lUGFyc2UiLCJDb3VudHJ5TG9ja2Rvd25JbmRpY2F0b3JTdHJpcHMiLCJsb2NhbGUiLCJoZWlnaHQiLCJzdHJpcEhlaWdodCIsIm1hcmdpbiIsInRvcCIsInJpZ2h0IiwiYm90dG9tIiwibGVmdCIsInZhbGlnbiIsImJhc2VDb2xvciIsImF4aXMiLCJkZWZhdWx0RGF0YSIsImFsbERhdGEiLCJkYXRhIiwicHJvcHMiLCJub2RlIiwic2VsZWN0aW9uIiwiRDNMb2NhbGUiLCJkYXRlRm9ybWF0IiwiZm9ybWF0VGltZSIsImRhdGVTZXJpZXMiLCJkYXRlIiwibGVuZ3RoIiwiZ2V0RGF0ZXMiLCJtYXAiLCJkIiwibWF0Y2giLCJmaW5kIiwiZSIsImRhdGFQYXJhbXMiLCJmb3JtYXREYXRlT2JqZWN0Iiwib2JqIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwid2lkdGgiLCJ0cmFuc2l0aW9uIiwiZHVyYXRpb24iLCJzdHJpcGhlaWdodCIsImxlZ2VuZEl0ZW1zIiwieFNjYWxlIiwic2NhbGVCYW5kIiwiZG9tYWluIiwicmFuZ2UiLCJwYWRkaW5nIiwieVNjYWxlIiwic2NhbGVMaW5lYXIiLCJzdGVwcyIsImNvbG9yRG9tYWluIiwic3RyaXBDb2xvciIsIk9iamVjdCIsImtleXMiLCJleHRlbnQiLCJpbmRleCIsImNvbG9yUmFuZ2UiLCJjb2xvclNjYWxlIiwiaW50ZXJwb2xhdGUiLCJpbnRlcnBvbGF0ZUhjbCIsImNoYXJ0RGl2IiwiYXBwZW5kU2VsZWN0IiwiYXR0ciIsInN0eWxlIiwic3R5bGVzIiwiYmFycyIsImRpc3BsYXkiLCJzZWxlY3RBbGwiLCJpIiwiZW50ZXIiLCJhcHBlbmQiLCJpc05hTiIsInN0ZXBWYWx1ZSIsImJhbmR3aWR0aCIsInZhbCIsInBhcnNlRmxvYXQiLCJtZXJnZSIsImV4aXQiLCJyZW1vdmUiLCJzdGVwQ2hhbmdlIiwicHVzaCIsIm1hcmtEYXRlcyIsImZpbHRlciIsInNsaWNlIiwiY29uY2F0IiwieEF4aXMiLCJjYWxsIiwiYXhpc0JvdHRvbSIsInRpY2tWYWx1ZXMiLCJ0aWNrRm9ybWF0IiwiY2hhcnRUaXRsZSIsImh0bWwiLCJpbmRleExlZ2VuZCIsImluZGV4TGVnZW5kSXRlbXMiLCJmb3JFYWNoIiwiaXRlbSIsImtleSIsInZhbHVlIiwidW5zaGlmdCIsImxlZ2VuZERpdiIsImNvbG9yIiwic3RlcExlZ2VuZCIsInN0ZXBMZWdlbmRJdGVtcyIsInN0ZXBTaXplIiwiQ2hhcnRDb21wb25lbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBOztBQUNBLElBQU1BLFNBQVMsR0FBR0MsaURBQUUsQ0FBQ0MsU0FBSCxDQUFhLFVBQWIsQ0FBbEI7O0lBRU1DLDhCOzs7Ozs7Ozs7Ozs7Ozs7O3VOQUNhO0FBQ2JDLFlBQU0sRUFBRSxJQURLO0FBQ0M7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBQyxZQUFNLEVBQUUsR0FUSztBQVViQyxpQkFBVyxFQUFFLEVBVkE7QUFXYkMsWUFBTSxFQUFFO0FBQ05DLFdBQUcsRUFBRSxFQURDO0FBRU5DLGFBQUssRUFBRSxFQUZEO0FBR05DLGNBQU0sRUFBRSxFQUhGO0FBSU5DLFlBQUksRUFBRTtBQUpBLE9BWEs7QUFpQmJDLFlBQU0sRUFBRSxRQWpCSztBQWlCSztBQUNsQkMsZUFBUyxFQUFFLHVCQWxCRTtBQW1CYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FDLFVBQUksRUFBRSxJQXZDTyxDQXdDYjs7QUF4Q2EsSzs7c05BMkNEQywrQzs7Ozs7OzsyQkFFUDtBQUNMLFVBQU1DLE9B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VkgsQ0FVUyxTQVZULEVBVW9CLE1BVnBCLEVBV0dBLEtBWEgsQ0FXUyxXQVhULEVBV3NCLGdCQVh0QixFQVlFO0FBWkYsV0FhRzRCLElBYkgsQ0FhUSxVQUFDOUQsQ0FBRCxFQUFJdUMsQ0FBSixFQUFVO0FBQ2QsZ0JBQU1tQyxRQUFRLEdBQUkvRCxXQUFELEdBQWdCOEQsZUFBZSxDQUFDNUUsTUFBakQ7QUFDQSw4REFBMEMsQ0FBRSxDQUFDRyxDQUFDLENBQUNtRSxHQUFKLEdBQVcsQ0FBWixJQUFpQk8sUUFBM0Qsa0NBQTJGckYsS0FBSyxDQUFDTCxTQUFqRyxvRUFBaUtnQixDQUFDLENBQUNvRSxLQUFuSztBQUNELFdBaEJIO0FBa0JBSSxvQkFBVSxDQUFDeEIsSUFBWCxHQUNHdkMsVUFESCxDQUNjQSxVQURkLEVBRUd3QyxNQUZIO0FBR0Q7QUFDRjs7QUFDRCxhQUFPLElBQVA7QUFDRDs7OztFQTFTd0MwQiw0RCxHQTRTN0M7OztBQUNlckcsNkZBQWYiLCJmaWxlIjoiLi9zcmMvbGliL2NoYXJ0LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgbm8tdHJhaWxpbmctc3BhY2VzICovXG5pbXBvcnQgQ2hhcnRDb21wb25lbnQgZnJvbSAnLi9iYXNlL0NoYXJ0Q29tcG9uZW50JztcbmltcG9ydCBkMyBmcm9tICcuL3V0aWxzL2QzJztcbmltcG9ydCB7IGdldERhdGVzLCBmb3JtYXREYXRlT2JqZWN0IH0gZnJvbSAnLi91dGlscy91dGlscyc7XG5pbXBvcnQgZGVmYXVsdERhdGEgZnJvbSAnLi9kZWZhdWx0RGF0YS5qc29uJztcbmltcG9ydCB7IGludGVycG9sYXRlSGNsIH0gZnJvbSAnZDMnO1xuaW1wb3J0IGQzU2VsZWN0aW9uTXVsdGkgZnJvbSAnZDMtc2VsZWN0aW9uLW11bHRpJztcbmltcG9ydCBEM0xvY2FsZSBmcm9tICdAcmV1dGVycy1ncmFwaGljcy9kMy1sb2NhbGUnO1xuLy8gc2VlIGRvY3Mgb24gaHR0cHM6Ly9naXRodWIuY29tL3JldXRlcnMtZ3JhcGhpY3MvZ3JhcGhpY3MtYXRsYXMtY2xpZW50XG4vLyBpbXBvcnQgQXRsYXNNZXRhZGF0YUNsaWVudCBmcm9tICdAcmV1dGVycy1ncmFwaGljcy9ncmFwaGljcy1hdGxhcy1jbGllbnQnO1xuLy8gY29uc3QgYXRsYXN0Q2xpZW50ID0gbmV3IEF0bGFzTWV0YWRhdGFDbGllbnQoKTtcblxuLy8gY29uc3QgZGF0ZUZvcm1hdF90dCA9IGQzLnRpbWVGb3JtYXQoJyVCICVlJyk7XG4vLyBjb25zdCBudW1iZXJGb3JtYXRfdHQgPSBkMy5mb3JtYXQoJywnKTtcbmNvbnN0IGRhdGVQYXJzZSA9IGQzLnRpbWVQYXJzZSgnJVktJW0tJWQnKTtcblxuY2xhc3MgQ291bnRyeUxvY2tkb3duSW5kaWNhdG9yU3RyaXBzIGV4dGVuZHMgQ2hhcnRDb21wb25lbnQge1xuICAgIGRlZmF1bHRQcm9wcyA9IHtcbiAgICAgIGxvY2FsZTogJ2VuJywgLy8gU2VlIGRvY3MgaHR0cHM6Ly9naXRodWIuY29tL3JldXRlcnMtZ3JhcGhpY3MvZDMtbG9jYWxlIFxuICAgICAgLy8gZGF0ZVNlcmllczogWycyMDE5LTEyLTMxJywgJzIwMjAtMDctMDcnXSwgLy8geXl5eS1tbS1kZCBmb3JtYXRcbiAgICAgIC8vIGRhdGFQYXJhbXM6IHtcbiAgICAgIC8vICAgZGF0ZTogJ2RhdGUnLFxuICAgICAgLy8gICBpbmRleDogJ2MxJyxcbiAgICAgIC8vICAgc3RlcFZhbHVlOiAnZmxhZycsXG4gICAgICAvLyAgIHN0ZXBzOiAyLCAvLyBzdGVwVmFsdWUgPSAwLCAxLi4uXG4gICAgICAvLyB9LFxuICAgICAgaGVpZ2h0OiAxNTAsXG4gICAgICBzdHJpcEhlaWdodDogNTAsXG4gICAgICBtYXJnaW46IHtcbiAgICAgICAgdG9wOiAxMCxcbiAgICAgICAgcmlnaHQ6IDE4LFxuICAgICAgICBib3R0b206IDEwLFxuICAgICAgICBsZWZ0OiAxOCxcbiAgICAgIH0sXG4gICAgICB2YWxpZ246ICdjZW50ZXInLCAvLyBzdGFydCwgY2VudGVyLCBiYXNlbGluZVxuICAgICAgYmFzZUNvbG9yOiAncmdiYSgyNTUsMjU1LDI1NSwwLjEpJyxcbiAgICAgIC8vIHN0cmlwQ29sb3I6IHsgLy8gc2hvdWxkIGJlIG51bWVyaWMgdmFsdWVzIHRoYXQgYXJlIG1hcHBlZCBmcm9tIHRoZSBkYXRhXG4gICAgICAvLyAgIDA6ICdyZ2JhKDI1NSwyNTUsMjU1LDAuMjUpJywgLy8gJyM0QzU2NkEnLFxuICAgICAgLy8gICAxOiAncmdiYSgyNTUsMjU1LDI1NSwwLjUpJyxcbiAgICAgIC8vICAgMjogJ3JnYmEoMjU1LDI1NSwyNTUsMC43NSknLFxuICAgICAgLy8gICAzOiAncmdiYSgyNTUsMTk1LDE5NSwxKScsXG4gICAgICAvLyB9LFxuICAgICAgLy8gbGVnZW5kSXRlbXM6IHsgLy8gc2hvdWxkIGNvbnRhaW4gaXRlbXMgZnJvbSBzdHJpcENvbG9yXG4gICAgICAvLyAgIG51bGw6ICdubyBkYXRhJyxcbiAgICAgIC8vICAgc3RlcExlZ2VuZDoge1xuICAgICAgLy8gICAgIDA6ICd0YXJnZXRlZCcsXG4gICAgICAvLyAgICAgMTogJ25hdGlvbndpZGUnLFxuICAgICAgLy8gICB9LFxuICAgICAgLy8gICBpbmRleExlZ2VuZDoge1xuICAgICAgLy8gICAgIDA6ICdubyBtZWFzdXJlcycsXG4gICAgICAvLyAgICAgMTogJ3JlY29tbWVuZCBjbG9zaW5nJyxcbiAgICAgIC8vICAgICAyOiAncmVxdWlyZSBjbG9zaW5nIG9uIHNvbWUgbGV2ZWxzJyxcbiAgICAgIC8vICAgICAzOiAncmVxdWlyZSBjbG9zaW5nIGFsbCBsZXZlbHMnLFxuICAgICAgLy8gICB9LFxuICAgICAgLy8gfSxcbiAgICAgIC8vIGNoYXJ0VGl0bGU6ICdTY2hvb2wgY2xvc2luZyBtZWFzdXJlcycsXG4gICAgICBheGlzOiB0cnVlLFxuICAgICAgLy8gbWFya0RhdGVzOiBbJzIwMTktMTItMzEnLCAnMjAyMC0wMy0yNScsICcyMDIwLTA3LTA3J10sIC8vIHl5eXktbW0tZGRkZFxuICAgIH07XG5cbiAgICBkZWZhdWx0RGF0YSA9IGRlZmF1bHREYXRhO1xuXG4gICAgZHJhdygpIHtcbiAgICAgIGNvbnN0IGFsbERhdGEgPSB0aGlzLmRhdGEoKTtcbiAgICAgIGNvbnN0IHByb3BzID0gdGhpcy5wcm9wcygpO1xuICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuc2VsZWN0aW9uKCkubm9kZSgpO1xuXG4gICAgICAvLyBkYXRlIGZvcm1hdHRlcnNcbiAgICAgIGNvbnN0IGxvY2FsZSA9IG5ldyBEM0xvY2FsZShwcm9wcy5sb2NhbGUpO1xuICAgICAgY29uc3QgZGF0ZUZvcm1hdCA9IGxvY2FsZS5mb3JtYXRUaW1lKCclYiAlZScpO1xuXG4gICAgICAvLyBnZXQgZGF0ZSByYW5nZSB0byBiZSBwbG90dGVkXG4gICAgICBpZiAoIXByb3BzLmRhdGVTZXJpZXMpIHtcbiAgICAgICAgcHJvcHMuZGF0ZVNlcmllcyA9IFtkYXRlUGFyc2UoYWxsRGF0YVswXS5kYXRlKSwgZGF0ZVBhcnNlKGFsbERhdGFbYWxsRGF0YS5sZW5ndGggLSAxXS5kYXRlKV07XG4gICAgICB9XG4gICAgICBjb25zdCBkYXRlU2VyaWVzID0gZ2V0RGF0ZXMocHJvcHMuZGF0ZVNlcmllc1swXSwgcHJvcHMuZGF0ZVNlcmllc1sxXSk7ICAgXG4gICAgICAvLyBjb25zb2xlLmxvZygoZGF0ZVNlcmllcykpO1xuXG4gICAgICAvLyBzZXQgZGF0YSBmb3IgdGhlIGRhdGUgc2VyaWVzXG4gICAgICBjb25zdCBkYXRhID0gZGF0ZVNlcmllcy5tYXAoKGQpID0+IHtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSBhbGxEYXRhLmZpbmQoKGUpID0+IChlW3Byb3BzLmRhdGFQYXJhbXMuZGF0ZV0pID09PSAoZm9ybWF0RGF0ZU9iamVjdChkKSkpO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgICAgb2JqW3Byb3BzLmRhdGFQYXJhbXMuZGF0ZV0gPSBmb3JtYXREYXRlT2JqZWN0KGQpO1xuICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cbiAgICAgIH0pOyBcbiAgICAgIC8vIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgICAgLy8gZ2V0IGNvdW50cnkgZGV0YWlscyBmcm9tIEF0bGFzQ2xpZW50IGZyb20gSVNPLTJcbiAgICAgIC8vIHByb3BzLmNvdW50cnkgPSBhdGxhc3RDbGllbnQuZ2V0Q291bnRyeShwcm9wcy5jb3VudHJ5SVNPMik7XG5cbiAgICAgIGNvbnN0IHtcbiAgICAgICAgd2lkdGgsXG4gICAgICB9ID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgY29uc3QgdHJhbnNpdGlvbiA9IGQzLnRyYW5zaXRpb24oKVxuICAgICAgICAuZHVyYXRpb24oNzUwKTtcblxuICAgICAgY29uc3Qgc3RyaXBoZWlnaHQgPSBwcm9wcy5sZWdlbmRJdGVtcyA/IChwcm9wcy5zdHJpcEhlaWdodCAtIHByb3BzLm1hcmdpbi50b3ApIDogKHByb3BzLmhlaWdodCAtIHByb3BzLm1hcmdpbi50b3AgLSBwcm9wcy5tYXJnaW4uYm90dG9tKTtcblxuICAgICAgLy8gc2V0IHNjYWxlc1xuICBcbiAgICAgIGNvbnN0IHhTY2FsZSA9IGQzLnNjYWxlQmFuZCgpXG4gICAgICAgIC5kb21haW4oZGF0ZVNlcmllcylcbiAgICAgICAgLnJhbmdlKFswLCB3aWR0aCAtIHByb3BzLm1hcmdpbi5sZWZ0IC0gcHJvcHMubWFyZ2luLnJpZ2h0XSlcbiAgICAgICAgLnBhZGRpbmcoMCk7XG5cbiAgICAgIGNvbnN0IHlTY2FsZSA9IGQzLnNjYWxlTGluZWFyKClcbiAgICAgICAgLmRvbWFpbihbMCwgcHJvcHMuZGF0YVBhcmFtcy5zdGVwcyAtIDFdKVxuICAgICAgICAucmFuZ2UoW3N0cmlwaGVpZ2h0IC8gKHByb3BzLmRhdGFQYXJhbXMuc3RlcHMpLCBzdHJpcGhlaWdodF0pO1xuXG4gICAgICBjb25zdCBjb2xvckRvbWFpbiA9IHByb3BzLnN0cmlwQ29sb3IgPyAoT2JqZWN0LmtleXMocHJvcHMuc3RyaXBDb2xvcikpLm1hcChkID0+ICtkKSA6IGQzLmV4dGVudChkYXRhLm1hcChkID0+IGRbcHJvcHMuZGF0YVBhcmFtcy5pbmRleF0pKTtcbiAgXG4gICAgICBjb25zdCBjb2xvclJhbmdlID0gcHJvcHMuc3RyaXBDb2xvciA/IGNvbG9yRG9tYWluLm1hcChkID0+IHByb3BzLnN0cmlwQ29sb3JbYCR7ZH1gXSkgOiBbJyMzMzMzMzMnLCAnI2NjY2NjYyddO1xuICBcbiAgICAgIGNvbnN0IGNvbG9yU2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpXG4gICAgICAgIC5kb21haW4oY29sb3JEb21haW4pXG4gICAgICAgIC5yYW5nZShjb2xvclJhbmdlKVxuICAgICAgICAuaW50ZXJwb2xhdGUoaW50ZXJwb2xhdGVIY2wpO1xuXG4gICAgICAvLyBtYWluIGNoYXJ0IGNvbnRhaW5lclxuICAgICAgY29uc3QgY2hhcnREaXYgPSB0aGlzLnNlbGVjdGlvbigpXG4gICAgICAgIC5hcHBlbmRTZWxlY3QoJ2RpdicpIC8vIHNlZSBkb2NzIGluIC4vdXRpbHMvZDMuanNcbiAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ0NvdW50cnlMb2NrZG93bkluZGljYXRvclN0cmlwcycpXG4gICAgICAgIC5zdHlsZSgnd2lkdGgnLCBgJHt3aWR0aH1weGApXG4gICAgICAvLyAuc3R5bGUoJ2hlaWdodCcsIGAke3Byb3BzLmhlaWdodH1weGApXG4gICAgICAgIC5hcHBlbmRTZWxlY3QoJ2RpdicpXG4gICAgICAgIC5zdHlsZXMoe1xuICAgICAgICAgICdwYWRkaW5nLXRvcCc6IGAke3Byb3BzLm1hcmdpbi50b3B9cHhgLFxuICAgICAgICAgICdwYWRkaW5nLXJpZ2h0JzogYCR7cHJvcHMubWFyZ2luLnJpZ2h0fXB4YCxcbiAgICAgICAgICAncGFkZGluZy1ib3R0b20nOiBgJHtwcm9wcy5tYXJnaW4uYm90dG9tfXB4YCxcbiAgICAgICAgICAncGFkZGluZy1sZWZ0JzogYCR7cHJvcHMubWFyZ2luLmxlZnR9cHhgLFxuICAgICAgICB9KTtcblxuICAgICAgLy8gbWFrZSBiYXJzXG4gICAgICBjb25zdCBiYXJzID0gY2hhcnREaXYuYXBwZW5kU2VsZWN0KCdkaXYuYmFycy1jb250YWluZXInKVxuICAgICAgICAuc3R5bGVzKHtcbiAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgJ2FsaWduLWl0ZW1zJzogYCR7cHJvcHMudmFsaWdufWAsXG4gICAgICAgICAgJ2p1c3RpZnktY29udGVudCc6ICdjZW50ZXInLFxuICAgICAgICB9KVxuICAgICAgICAuc2VsZWN0QWxsKCcuYmFyJylcbiAgICAgICAgLmRhdGEoZGF0YSwgKGQsIGkpID0+IGRbcHJvcHMuZGF0YVBhcmFtcy5kYXRlXSk7IC8vIGZvciBzbW9vdGggZGF0YSB1cGRhdGlvblxuXG4gICAgICBiYXJzLmVudGVyKCkuYXBwZW5kKCdkaXYnKVxuICAgICAgICAuYXR0cignY2xhc3MnLCBkID0+IGBiYXIgJHtkW3Byb3BzLmRhdGFQYXJhbXMuZGF0ZV19YClcbiAgICAgICAgLnN0eWxlKCdkaXNwbGF5JywgJ2lubGluZS1ibG9jaycpXG4gICAgICAgIC5zdHlsZSgnaGVpZ2h0JywgZCA9PiB7XG4gICAgICAgICAgaWYgKGlzTmFOKGRbcHJvcHMuZGF0YVBhcmFtcy5zdGVwVmFsdWVdKSkge1xuICAgICAgICAgICAgcmV0dXJuIHlTY2FsZSgwKSArICdweCc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB5U2NhbGUoZFtwcm9wcy5kYXRhUGFyYW1zLnN0ZXBWYWx1ZV0pICsgJ3B4JztcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC5zdHlsZSgnd2lkdGgnLCB4U2NhbGUuYmFuZHdpZHRoKCkgKyAncHgnKVxuICAgICAgICAuc3R5bGUoJ2JhY2tncm91bmQnLCBkID0+IHtcbiAgICAgICAgICBjb25zdCB2YWwgPSBwYXJzZUZsb2F0KGRbcHJvcHMuZGF0YVBhcmFtcy5pbmRleF0pO1xuICAgICAgICAgIHJldHVybiAodmFsICE9PSBudWxsKSAmJiAhKGlzTmFOKHZhbCkpID8gY29sb3JTY2FsZSh2YWwpIDogcHJvcHMuYmFzZUNvbG9yO1xuICAgICAgICB9KVxuICAgICAgICAubWVyZ2UoYmFycylcbiAgICAgICAgLnRyYW5zaXRpb24odHJhbnNpdGlvbilcbiAgICAgICAgLnN0eWxlKCdkaXNwbGF5JywgJ2lubGluZS1ibG9jaycpXG4gICAgICAgIC5zdHlsZSgnaGVpZ2h0JywgZCA9PiB7XG4gICAgICAgICAgaWYgKGlzTmFOKGRbcHJvcHMuZGF0YVBhcmFtcy5zdGVwVmFsdWVdKSkge1xuICAgICAgICAgICAgcmV0dXJuIHlTY2FsZSgwKSArICdweCc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB5U2NhbGUoZFtwcm9wcy5kYXRhUGFyYW1zLnN0ZXBWYWx1ZV0pICsgJ3B4JztcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC5zdHlsZSgnd2lkdGgnLCB4U2NhbGUuYmFuZHdpZHRoKCkgKyAncHgnKVxuICAgICAgICAuc3R5bGUoJ2JhY2tncm91bmQnLCBkID0+IHtcbiAgICAgICAgICBjb25zdCB2YWwgPSBwYXJzZUZsb2F0KGRbcHJvcHMuZGF0YVBhcmFtcy5pbmRleF0pO1xuICAgICAgICAgIHJldHVybiAodmFsICE9PSBudWxsKSAmJiAhKGlzTmFOKHZhbCkpID8gY29sb3JTY2FsZSh2YWwpIDogcHJvcHMuYmFzZUNvbG9yO1xuICAgICAgICB9KTtcblxuICAgICAgYmFycy5leGl0KClcbiAgICAgICAgLnRyYW5zaXRpb24odHJhbnNpdGlvbilcbiAgICAgICAgLmF0dHIoJ2hlaWdodCcsIDApXG4gICAgICAgIC5yZW1vdmUoKTtcblxuICAgICAgLy8gYWRkIGF4aXNcbiAgICAgIC8vIGNvbnNvbGUubG9nKHhTY2FsZShkYXRlUGFyc2UoJzIwMjAtMDctMDcnKSkpO1xuICAgICAgaWYgKHByb3BzLmF4aXMpIHtcbiAgICAgICAgY29uc3Qgc3RlcENoYW5nZSA9IFtdO1xuICAgICAgICBpZiAocHJvcHMuZGF0YVBhcmFtcy5zdGVwcyA+IDEpIHtcbiAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHByb3BzLmRhdGFQYXJhbXMuc3RlcHM7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSBkYXRhLmZpbmQoKGUpID0+IChlW3Byb3BzLmRhdGFQYXJhbXMuc3RlcFZhbHVlXSkgPT09IGkpO1xuICAgICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICAgIHN0ZXBDaGFuZ2UucHVzaChkYXRlUGFyc2UobWF0Y2hbcHJvcHMuZGF0YVBhcmFtcy5kYXRlXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtYXJrRGF0ZXMgPSBwcm9wcy5tYXJrRGF0ZXMgPyBcbiAgICAgICAgICBwcm9wcy5tYXJrRGF0ZXMubWFwKGQgPT4ge1xuICAgICAgICAgICAgaWYgKCFpc05hTih4U2NhbGUoZGF0ZVBhcnNlKGQpKSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGRhdGVQYXJzZShkKTtcbiAgICAgICAgICAgIH0gXG4gICAgICAgICAgfSkuZmlsdGVyKGQgPT4gIWlzTmFOKGQpKSA6IFtkYXRlU2VyaWVzWzBdLCBkYXRlU2VyaWVzLnNsaWNlKC0xKVswXV0uY29uY2F0KHN0ZXBDaGFuZ2UpO1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhtYXJrRGF0ZXMpO1xuICAgICAgICBjb25zdCB4QXhpcyA9IGNoYXJ0RGl2LmFwcGVuZFNlbGVjdCgnc3ZnJylcbiAgICAgICAgICAuYXR0cignd2lkdGgnLCB3aWR0aCAtIHByb3BzLm1hcmdpbi5sZWZ0IC0gcHJvcHMubWFyZ2luLnJpZ2h0KVxuICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCAyNSlcbiAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgwLCAwKScpO1xuXG4gICAgICAgIHhBeGlzLmFwcGVuZFNlbGVjdCgnZy5heGlzLXgnKVxuICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdheGlzLXggYXhpcycpXG4gICAgICAgICAgLnRyYW5zaXRpb24odHJhbnNpdGlvbilcbiAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgwLDApJylcbiAgICAgICAgICAuY2FsbChcbiAgICAgICAgICAgIGQzLmF4aXNCb3R0b20oeFNjYWxlKVxuICAgICAgICAgICAgICAudGlja1ZhbHVlcyhtYXJrRGF0ZXMpXG4gICAgICAgICAgICAgIC50aWNrRm9ybWF0KGRhdGVGb3JtYXQpXG4gICAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIC8vIGFkZCBjaGFydCB0aXRsZVxuICAgICAgaWYgKHByb3BzLmNoYXJ0VGl0bGUpIHtcbiAgICAgICAgY2hhcnREaXYuYXBwZW5kU2VsZWN0KCdkaXYuY2hhcnQtdGl0bGUnKVxuICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdmb250LWRpc3BsYXkgY2hhcnQtdGl0bGUnKVxuICAgICAgICAgIC5odG1sKGA8aDY+JHtwcm9wcy5jaGFydFRpdGxlfTwvaDY+YCk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIGNoYXJ0IGxlZ2VuZFxuICAgICAgaWYgKHByb3BzLmxlZ2VuZEl0ZW1zKSB7XG4gICAgICAgIGlmIChwcm9wcy5sZWdlbmRJdGVtcy5pbmRleExlZ2VuZCkge1xuICAgICAgICBjb25zdCBpbmRleExlZ2VuZEl0ZW1zID0gW107XG4gICAgICAgIChPYmplY3Qua2V5cyhwcm9wcy5sZWdlbmRJdGVtcy5pbmRleExlZ2VuZCkpLmZvckVhY2goZCA9PiB7XG4gICAgICAgICAgY29uc3QgaXRlbSA9IHtcbiAgICAgICAgICAgIGtleTogZCxcbiAgICAgICAgICAgIHZhbHVlOiBwcm9wcy5sZWdlbmRJdGVtcy5pbmRleExlZ2VuZFtkXSxcbiAgICAgICAgICB9O1xuICAgICAgICAgIGluZGV4TGVnZW5kSXRlbXMucHVzaChpdGVtKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChwcm9wcy5sZWdlbmRJdGVtcy5udWxsKSB7XG4gICAgICAgICAgaW5kZXhMZWdlbmRJdGVtcy51bnNoaWZ0KHtcbiAgICAgICAgICAgIGtleTogJ251bGwnLFxuICAgICAgICAgICAgdmFsdWU6IHByb3BzLmxlZ2VuZEl0ZW1zLm51bGwsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY29uc3QgbGVnZW5kV2lkdGggPSAod2lkdGggLSBwcm9wcy5tYXJnaW4ucmlnaHQgLSBwcm9wcy5tYXJnaW4ubGVmdCkgLyBpbmRleExlZ2VuZEl0ZW1zLmxlbmd0aDtcblxuICAgICAgICAvLyBtYWtlIGxlZ2VuZFxuICAgICAgICBjb25zdCBsZWdlbmREaXYgPSBjaGFydERpdi5hcHBlbmRTZWxlY3QoJ2Rpdi5sZWdlbmQtY29udGFpbmVyJyk7XG5cbiAgICAgICAgY29uc3QgaW5kZXhMZWdlbmQgPSBsZWdlbmREaXYuYXBwZW5kU2VsZWN0KCdkaXYubGVnZW5kLmluZGV4TGVnZW5kJylcbiAgICAgICAgICAuc2VsZWN0QWxsKCcubGVnZW5kLWl0ZW0nKVxuICAgICAgICAgIC5kYXRhKGluZGV4TGVnZW5kSXRlbXMpOyAvLyBmb3Igc21vb3RoIGRhdGEgdXBkYXRpb25cblxuICAgICAgICBpbmRleExlZ2VuZC5lbnRlcigpLmFwcGVuZCgnZGl2JylcbiAgICAgICAgICAuYXR0cignY2xhc3MnLCAnbGVnZW5kLWl0ZW0nKVxuICAgICAgICAgIC5zdHlsZSgnZGlzcGxheScsICdmbGV4JylcbiAgICAgICAgICAuc3R5bGUoJ21hcmdpbicsIGQgPT4ge1xuICAgICAgICAgICAgaWYgKGQua2V5ID09PSAnbnVsbCcpIHsgcmV0dXJuICcxcmVtIDAnOyB9XG4gICAgICAgICAgfSlcbiAgICAgICAgICAvLyAuc3R5bGUoJ3dpZHRoJywgYCR7bGVnZW5kV2lkdGh9cHhgKVxuICAgICAgICAgIC5odG1sKGQgPT4ge1xuICAgICAgICAgICAgY29uc3QgY29sb3IgPSAoK2Qua2V5ICE9PSBudWxsKSAmJiAhKGlzTmFOKCtkLmtleSkpID8gY29sb3JTY2FsZSgrZC5rZXkpIDogcHJvcHMuYmFzZUNvbG9yO1xuICAgICAgICAgICAgcmV0dXJuIGA8c3BhbiBzdHlsZT1cIndpZHRoOjEuNXJlbTttaW4td2lkdGg6MXJlbTsgbWluLWhlaWdodDoxcmVtOyBiYWNrZ3JvdW5kOiAke2NvbG9yfVwiPjwvc3Bhbj4gPHAgc3R5bGU9XCJtYXJnaW46MCAwIDAgMC41cmVtO1wiPiR7ZC52YWx1ZX08L3A+YDtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5tZXJnZShpbmRleExlZ2VuZClcbiAgICAgICAgICAuc3R5bGUoJ2Rpc3BsYXknLCAnZmxleCcpXG4gICAgICAgICAgLy8gLnN0eWxlKCd3aWR0aCcsIGAke2xlZ2VuZFdpZHRofXB4YClcbiAgICAgICAgICAuaHRtbChkID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gKCtkLmtleSAhPT0gbnVsbCkgJiYgIShpc05hTigrZC5rZXkpKSA/IGNvbG9yU2NhbGUoK2Qua2V5KSA6IHByb3BzLmJhc2VDb2xvcjtcbiAgICAgICAgICAgIHJldHVybiBgPHNwYW4gc3R5bGU9XCJ3aWR0aDoxLjVyZW07IG1pbi13aWR0aDoxcmVtOyBtaW4taGVpZ2h0OjFyZW07IGJhY2tncm91bmQ6ICR7Y29sb3J9XCI+PC9zcGFuPiA8cCBzdHlsZT1cIm1hcmdpbjowIDAgMCAwLjVyZW07XCI+JHtkLnZhbHVlfTwvcD5gO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIGluZGV4TGVnZW5kLmV4aXQoKVxuICAgICAgICAgIC50cmFuc2l0aW9uKHRyYW5zaXRpb24pXG4gICAgICAgICAgLnJlbW92ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByb3BzLmxlZ2VuZEl0ZW1zLnN0ZXBMZWdlbmQpIHtcbiAgICAgICAgICAvLyBzdGVwIGxlZ2VuZCBzdHVmZlxuICAgICAgICAgIGNvbnN0IHN0ZXBMZWdlbmRJdGVtcyA9IFtdO1xuICAgICAgICAgIChPYmplY3Qua2V5cyhwcm9wcy5sZWdlbmRJdGVtcy5zdGVwTGVnZW5kKSkuZm9yRWFjaChkID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSB7XG4gICAgICAgICAgICAgIGtleTogZCxcbiAgICAgICAgICAgICAgdmFsdWU6IHByb3BzLmxlZ2VuZEl0ZW1zLnN0ZXBMZWdlbmRbZF0sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgc3RlcExlZ2VuZEl0ZW1zLnB1c2goaXRlbSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgLy8gY29uc29sZS5sb2coc3RlcExlZ2VuZEl0ZW1zKTtcblxuICAgICAgICAgIGNvbnN0IHN0ZXBMZWdlbmQgPSBsZWdlbmREaXYuYXBwZW5kU2VsZWN0KCdkaXYubGVnZW5kLnN0ZXBMZWdlbmQnKVxuICAgICAgICAgICAgLnN0eWxlKCdhbGlnbi1pdGVtcycsIGAke3Byb3BzLnZhbGlnbn1gKVxuICAgICAgICAgICAgLnNlbGVjdEFsbCgnLmxlZ2VuZC1pdGVtJylcbiAgICAgICAgICAgIC5kYXRhKHN0ZXBMZWdlbmRJdGVtcyk7IC8vIGZvciBzbW9vdGggZGF0YSB1cGRhdGlvblxuXG4gICAgICAgICAgc3RlcExlZ2VuZC5lbnRlcigpLmFwcGVuZCgnZGl2JylcbiAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdsZWdlbmQtaXRlbScpXG4gICAgICAgICAgICAuc3R5bGUoJ2Rpc3BsYXknLCAnZmxleCcpXG4gICAgICAgICAgICAuc3R5bGUoJ2ZsZXgtZmxvdycsICdjb2x1bW4tcmV2ZXJzZScpXG4gICAgICAgICAgICAvLyAuc3R5bGUoJ3dpZHRoJywgYCR7bGVnZW5kV2lkdGh9cHhgKVxuICAgICAgICAgICAgLmh0bWwoKGQsIGkpID0+IHtcbiAgICAgICAgICAgICAgY29uc3Qgc3RlcFNpemUgPSAoc3RyaXBoZWlnaHQpIC8gc3RlcExlZ2VuZEl0ZW1zLmxlbmd0aDtcbiAgICAgICAgICAgICAgcmV0dXJuIGA8c3BhbiBzdHlsZT1cIndpZHRoOjEwMCU7IGhlaWdodDokeygoK2Qua2V5KSArIDEpICogc3RlcFNpemV9cHg7IGJhY2tncm91bmQtY29sb3I6JHtwcm9wcy5iYXNlQ29sb3J9O1wiPjwvc3Bhbj48cCBzdHlsZT1cIm1hcmdpbjowIDAuNXJlbSAwLjVyZW0gMC41cmVtO1wiPiR7ZC52YWx1ZX08L3A+YDtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAubWVyZ2Uoc3RlcExlZ2VuZClcbiAgICAgICAgICAgIC5zdHlsZSgnZGlzcGxheScsICdmbGV4JylcbiAgICAgICAgICAgIC5zdHlsZSgnZmxleC1mbG93JywgJ2NvbHVtbi1yZXZlcnNlJylcbiAgICAgICAgICAgIC8vIC5zdHlsZSgnd2lkdGgnLCBgJHtsZWdlbmRXaWR0aH1weGApXG4gICAgICAgICAgICAuaHRtbCgoZCwgaSkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBzdGVwU2l6ZSA9IChzdHJpcGhlaWdodCkgLyBzdGVwTGVnZW5kSXRlbXMubGVuZ3RoO1xuICAgICAgICAgICAgICByZXR1cm4gYDxzcGFuIHN0eWxlPVwid2lkdGg6MTAwJTsgaGVpZ2h0OiR7KCgrZC5rZXkpICsgMSkgKiBzdGVwU2l6ZX1weDsgYmFja2dyb3VuZC1jb2xvcjoke3Byb3BzLmJhc2VDb2xvcn07XCI+PC9zcGFuPjxwIHN0eWxlPVwibWFyZ2luOjAgMC41cmVtIDAuNXJlbSAwLjVyZW07XCI+JHtkLnZhbHVlfTwvcD5gO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICBzdGVwTGVnZW5kLmV4aXQoKVxuICAgICAgICAgICAgLnRyYW5zaXRpb24odHJhbnNpdGlvbilcbiAgICAgICAgICAgIC5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuLy8gY29uc29sZS5sb2codGhpcy5kZWZhdWx0UHJvcHMpO1xuZXhwb3J0IGRlZmF1bHQgQ291bnRyeUxvY2tkb3duSW5kaWNhdG9yU3RyaXBzO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/lib/chart.js\n");

/***/ })

})