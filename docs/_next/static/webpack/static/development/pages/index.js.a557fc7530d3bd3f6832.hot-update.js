webpackHotUpdate("static/development/pages/index.js",{

/***/ "./node_modules/@babel/runtime/helpers/esm/readOnlyError.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/readOnlyError.js ***!
  \******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return _readOnlyError; });\nfunction _readOnlyError(name) {\n  throw new Error(\"\\\"\" + name + \"\\\" is read-only\");\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vcmVhZE9ubHlFcnJvci5qcz9iMWY4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBZTtBQUNmO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vcmVhZE9ubHlFcnJvci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9yZWFkT25seUVycm9yKG5hbWUpIHtcbiAgdGhyb3cgbmV3IEVycm9yKFwiXFxcIlwiICsgbmFtZSArIFwiXFxcIiBpcyByZWFkLW9ubHlcIik7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/esm/readOnlyError.js\n");

/***/ }),

/***/ "./src/lib/chart.js":
/*!**************************!*\
  !*** ./src/lib/chart.js ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _babel_runtime_helpers_esm_readOnlyError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/readOnlyError */ \"./node_modules/@babel/runtime/helpers/esm/readOnlyError.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/classCallCheck */ \"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/createClass */ \"./node_modules/@babel/runtime/helpers/esm/createClass.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/esm/assertThisInitialized */ \"./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/esm/inherits */ \"./node_modules/@babel/runtime/helpers/esm/inherits.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/esm/possibleConstructorReturn */ \"./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/esm/getPrototypeOf */ \"./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @babel/runtime/helpers/esm/defineProperty */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/utils */ \"./src/lib/utils/utils.js\");\n/* harmony import */ var _base_ChartComponent__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./base/ChartComponent */ \"./src/lib/base/ChartComponent.js\");\n/* harmony import */ var _reuters_graphics_d3_locale__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @reuters-graphics/d3-locale */ \"./node_modules/@reuters-graphics/d3-locale/dist/index.js\");\n/* harmony import */ var _reuters_graphics_d3_locale__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_reuters_graphics_d3_locale__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var _utils_d3__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./utils/d3 */ \"./src/lib/utils/d3.js\");\n/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! d3 */ \"./node_modules/d3/index.js\");\n\n\n\n\n\n\n\n\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return Object(_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n\n/* eslint-disable no-trailing-spaces */\n\n // import d3SelectionMulti from 'd3-selection-multi';\n\n\n\n // see docs on https://github.com/reuters-graphics/graphics-atlas-client\n// import AtlasMetadataClient from '@reuters-graphics/graphics-atlas-client';\n// const atlastClient = new AtlasMetadataClient();\n// const dateFormat_tt = d3.timeFormat('%B %e');\n// const numberFormat_tt = d3.format(',');\n\nvar dateParse = _utils_d3__WEBPACK_IMPORTED_MODULE_11__[\"default\"].timeParse('%Y-%m-%d');\n\nvar CountryLockdownIndicatorStrips = /*#__PURE__*/function (_ChartComponent) {\n  Object(_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(CountryLockdownIndicatorStrips, _ChartComponent);\n\n  var _super = _createSuper(CountryLockdownIndicatorStrips);\n\n  function CountryLockdownIndicatorStrips() {\n    var _this;\n\n    Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(this, CountryLockdownIndicatorStrips);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(Object(_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(_this), \"defaultProps\", {\n      locale: 'en',\n      // See docs https://github.com/reuters-graphics/d3-locale\n      // dateSeries: ['2019-12-31', '2020-07-07'], // yyyy-mm-dd format\n      // dataParams: {\n      //   date: 'date',\n      //   index: 'c1',\n      //   stepValue: 'flag',\n      //   steps: 2, // stepValue = 0, 1...\n      // },\n      height: 150,\n      stripHeight: 50,\n      margin: {\n        top: 10,\n        right: 18,\n        bottom: 10,\n        left: 18\n      },\n      valign: 'center',\n      // start, center, baseline\n      baseColor: 'rgba(255,255,255,0.1)',\n      // stripColor: { // should be numeric values that are mapped from the data\n      //   0: 'rgba(255,255,255,0.25)', // '#4C566A',\n      //   1: 'rgba(255,255,255,0.5)',\n      //   2: 'rgba(255,255,255,0.75)',\n      //   3: 'rgba(255,195,195,1)',\n      // },\n      // legendItems: { // should contain items from stripColor\n      //   null: 'no data',\n      //   stepLegend: {\n      //     0: 'targeted',\n      //     1: 'nationwide',\n      //   },\n      //   indexLegend: {\n      //     0: 'no measures',\n      //     1: 'recommend closing',\n      //     2: 'require closing on some levels',\n      //     3: 'require closing all levels',\n      //   },\n      // },\n      // chartTitle: 'School closing measures',\n      axis: true // markDates: ['2019-12-31', '2020-03-25', '2020-07-07'], // yyyy-mm-dddd\n\n    });\n\n    Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(Object(_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(_this), \"defaultData\", []);\n\n    return _this;\n  }\n\n  Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(CountryLockdownIndicatorStrips, [{\n    key: \"draw\",\n    value: function draw() {\n      var allData = this.data();\n      var props = this.props();\n      var node = this.selection().node(); // date formatters\n\n      var locale = new _reuters_graphics_d3_locale__WEBPACK_IMPORTED_MODULE_10___default.a(props.locale);\n      var dateFormat = locale.formatTime('%b %e'); // get date range to be plotted\n\n      if (!props.dateSeries) {\n        props.dateSeries = [dateParse(allData[0].date), dateParse(allData[allData.length - 1].date)];\n      }\n\n      var dateSeries = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_8__[\"getDates\"])(props.dateSeries[0], props.dateSeries[1]); // console.log((dateSeries));\n      // set data for the date series\n\n      var data = dateSeries.map(function (d) {\n        var match = allData.find(function (e) {\n          return e[props.dataParams.date] === Object(_utils_utils__WEBPACK_IMPORTED_MODULE_8__[\"formatDateObject\"])(d);\n        });\n\n        if (match) {\n          return match;\n        } else {\n          var obj = {};\n          obj[props.dataParams.date] = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_8__[\"formatDateObject\"])(d);\n          return obj;\n        }\n      }); // console.log(data);\n      // get country details from AtlasClient from ISO-2\n      // props.country = atlastClient.getCountry(props.countryISO2);\n\n      var _node$getBoundingClie = node.getBoundingClientRect(),\n          width = _node$getBoundingClie.width;\n\n      var transition = _utils_d3__WEBPACK_IMPORTED_MODULE_11__[\"default\"].transition().duration(750);\n      var stripheight = props.legendItems ? props.stripHeight - props.margin.top : props.height - props.margin.top - props.margin.bottom; // set scales\n\n      var xScale = _utils_d3__WEBPACK_IMPORTED_MODULE_11__[\"default\"].scaleBand().domain(dateSeries).range([0, width - props.margin.left - props.margin.right]).padding(0);\n      var yScale = _utils_d3__WEBPACK_IMPORTED_MODULE_11__[\"default\"].scaleLinear().domain([0, props.dataParams.steps - 1]).range([stripheight / props.dataParams.steps, stripheight]);\n      var colorDomain = props.stripColor ? Object.keys(props.stripColor).map(function (d) {\n        return +d;\n      }) : _utils_d3__WEBPACK_IMPORTED_MODULE_11__[\"default\"].extent(data.map(function (d) {\n        return d[props.dataParams.index];\n      }));\n      var colorRange = props.stripColor ? colorDomain.map(function (d) {\n        return props.stripColor[\"\".concat(d)];\n      }) : ['#333333', '#cccccc'];\n      var colorScale = _utils_d3__WEBPACK_IMPORTED_MODULE_11__[\"default\"].scaleLinear().domain(colorDomain).range(colorRange).interpolate(d3__WEBPACK_IMPORTED_MODULE_12__[\"interpolateHcl\"]); // main chart container\n\n      var chartDiv = this.selection().appendSelect('div') // see docs in ./utils/d3.js\n      .attr('class', 'CountryLockdownIndicatorStrips').style('width', \"\".concat(width, \"px\")) // .style('height', `${props.height}px`)\n      .appendSelect('div').style('padding-top', \"\".concat(props.margin.top, \"px\")).style('padding-right', \"\".concat(props.margin.right, \"px\")).style('padding-bottom', \"\".concat(props.margin.bottom, \"px\")).style('padding-left', \"\".concat(props.margin.left, \"px\")); // make bars\n\n      var bars = chartDiv.appendSelect('div.bars-container').style('display', 'flex').style('align-items', \"\".concat(props.valign)).style('justify-content', 'center').selectAll('.bar').data(data, function (d, i) {\n        return d[props.dataParams.date];\n      }); // for smooth data updation\n\n      bars.enter().append('div').attr('class', function (d) {\n        return \"bar \".concat(d[props.dataParams.date]);\n      }).style('display', 'inline-block').style('height', function (d) {\n        if (isNaN(d[props.dataParams.stepValue])) {\n          return yScale(0) + 'px';\n        } else {\n          return yScale(d[props.dataParams.stepValue]) + 'px';\n        }\n      }).style('width', xScale.bandwidth() + 'px').style('background', function (d) {\n        var val = parseFloat(d[props.dataParams.index]);\n        return val !== null && !isNaN(val) ? colorScale(val) : props.baseColor;\n      }).merge(bars).transition(transition).style('display', 'inline-block').style('height', function (d) {\n        if (isNaN(d[props.dataParams.stepValue])) {\n          return yScale(0) + 'px';\n        } else {\n          return yScale(d[props.dataParams.stepValue]) + 'px';\n        }\n      }).style('width', xScale.bandwidth() + 'px').style('background', function (d) {\n        var val = parseFloat(d[props.dataParams.index]);\n        return val !== null && !isNaN(val) ? colorScale(val) : props.baseColor;\n      });\n      bars.exit().transition(transition).attr('height', 0).remove(); // add axis\n      // console.log(xScale(dateParse('2020-07-07')));\n\n      if (props.axis) {\n        var stepChange = [];\n\n        if (props.dataParams.steps > 1) {\n          var _loop = function _loop(i) {\n            var match = data.find(function (e) {\n              return e[props.dataParams.stepValue] === i;\n            });\n\n            if (match) {\n              stepChange.push(dateParse(match[props.dataParams.date]));\n            }\n          };\n\n          for (var i = 1; i < props.dataParams.steps; i++) {\n            _loop(i);\n          }\n        }\n\n        var markDates = props.markDates ? props.markDates.map(function (d) {\n          if (!isNaN(xScale(dateParse(d)))) {\n            return dateParse(d);\n          }\n        }).filter(function (d) {\n          return !isNaN(d);\n        }) : [dateSeries[0], dateSeries.slice(-1)[0]].concat(stepChange); // console.log(markDates);\n\n        var xAxis = chartDiv.appendSelect('svg').attr('width', width - props.margin.left - props.margin.right).attr('height', 25).attr('transform', 'translate(0, 0)');\n        xAxis.appendSelect('g.axis-x').attr('class', 'axis-x axis').transition(transition).attr('transform', 'translate(0,0)').call(_utils_d3__WEBPACK_IMPORTED_MODULE_11__[\"default\"].axisBottom(xScale).tickValues(markDates).tickFormat(dateFormat));\n      } // add chart title\n\n\n      if (props.chartTitle) {\n        chartDiv.appendSelect('div.chart-title').attr('class', 'font-display chart-title').html(\"<h6>\".concat(props.chartTitle, \"</h6>\"));\n      } // chart legend\n\n\n      if (props.legendItems) {\n        // make legend\n        var legendDiv = chartDiv.appendSelect('div.legend-container');\n\n        if (props.legendItems.indexLegend) {\n          var indexLegendItems = [];\n          Object.keys(props.legendItems.indexLegend).forEach(function (d) {\n            var item = {\n              key: d,\n              value: props.legendItems.indexLegend[d]\n            };\n            indexLegendItems.push(item);\n          });\n\n          if (props.legendItems[\"null\"]) {\n            indexLegendItems.unshift({\n              key: 'null',\n              value: props.legendItems[\"null\"]\n            });\n          }\n\n          indexLegendItems = (Object(_babel_runtime_helpers_esm_readOnlyError__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"indexLegendItems\"), indexLegendItems.filter(function (d) {\n            return d.value === null;\n          })); // const legendWidth = (width - props.margin.right - props.margin.left) / indexLegendItems.length;\n\n          var indexLegend = legendDiv.appendSelect('div.legend.indexLegend').selectAll('.legend-item').data(indexLegendItems); // for smooth data updation\n\n          indexLegend.enter().append('div').attr('class', 'legend-item').style('display', 'flex').style('margin', function (d) {\n            if (d.key === 'null') {\n              return '1rem 0';\n            }\n          }) // .style('width', `${legendWidth}px`)\n          .html(function (d) {\n            var color = +d.key !== null && !isNaN(+d.key) ? colorScale(+d.key) : props.baseColor;\n            return \"<span style=\\\"width:1.5rem;min-width:1rem; min-height:1rem; background: \".concat(color, \"\\\"></span> <p style=\\\"margin:0 0 0 0.5rem;\\\">\").concat(d.value, \"</p>\");\n          }).merge(indexLegend).style('display', 'flex') // .style('width', `${legendWidth}px`)\n          .html(function (d) {\n            var color = +d.key !== null && !isNaN(+d.key) ? colorScale(+d.key) : props.baseColor;\n            return \"<span style=\\\"width:1.5rem; min-width:1rem; min-height:1rem; background: \".concat(color, \"\\\"></span> <p style=\\\"margin:0 0 0 0.5rem;\\\">\").concat(d.value, \"</p>\");\n          });\n          indexLegend.exit().transition(transition).remove();\n        }\n\n        if (props.legendItems.stepLegend) {\n          // step legend stuff\n          var stepLegendItems = Object.keys(props.legendItems.stepLegend).map(function (d) {\n            return {\n              key: d,\n              value: props.legendItems.stepLegend[d]\n            };\n          }); // console.log(stepLegendItems);\n\n          var stepLegend = legendDiv.appendSelect('div.legend.stepLegend').style('align-items', \"\".concat(props.valign)).selectAll('.legend-item').data(stepLegendItems); // for smooth data updation\n\n          stepLegend.enter().append('div').attr('class', 'legend-item').style('display', 'flex').style('flex-flow', 'column-reverse') // .style('width', `${legendWidth}px`)\n          .html(function (d, i) {\n            var stepSize = stripheight / stepLegendItems.length;\n            return \"<span style=\\\"width:100%; height:\".concat((+d.key + 1) * stepSize, \"px; background-color:\").concat(props.baseColor, \";\\\"></span><p style=\\\"margin:0 0.5rem 0.5rem 0.5rem;\\\">\").concat(d.value, \"</p>\");\n          }).merge(stepLegend).style('display', 'flex').style('flex-flow', 'column-reverse') // .style('width', `${legendWidth}px`)\n          .html(function (d, i) {\n            var stepSize = stripheight / stepLegendItems.length;\n            return \"<span style=\\\"width:100%; height:\".concat((+d.key + 1) * stepSize, \"px; background-color:\").concat(props.baseColor, \";\\\"></span><p style=\\\"margin:0 0.5rem 0.5rem 0.5rem;\\\">\").concat(d.value, \"</p>\");\n          });\n          stepLegend.exit().transition(transition).remove();\n        }\n      }\n\n      return this;\n    }\n  }]);\n\n  return CountryLockdownIndicatorStrips;\n}(_base_ChartComponent__WEBPACK_IMPORTED_MODULE_9__[\"default\"]); // console.log(this.defaultProps);\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (CountryLockdownIndicatorStrips);\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports_1 = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports_1, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports_1)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports_1;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports_1)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NoYXJ0LmpzPzdiYjgiXSwibmFtZXMiOlsiZGF0ZVBhcnNlIiwiZDMiLCJ0aW1lUGFyc2UiLCJDb3VudHJ5TG9ja2Rvd25JbmRpY2F0b3JTdHJpcHMiLCJsb2NhbGUiLCJoZWlnaHQiLCJzdHJpcEhlaWdodCIsIm1hcmdpbiIsInRvcCIsInJpZ2h0IiwiYm90dG9tIiwibGVmdCIsInZhbGlnbiIsImJhc2VDb2xvciIsImF4aXMiLCJhbGxEYXRhIiwiZGF0YSIsInByb3BzIiwibm9kZSIsInNlbGVjdGlvbiIsIkQzTG9jYWxlIiwiZGF0ZUZvcm1hdCIsImZvcm1hdFRpbWUiLCJkYXRlU2VyaWVzIiwiZGF0ZSIsImxlbmd0aCIsImdldERhdGVzIiwibWFwIiwiZCIsIm1hdGNoIiwiZmluZCIsImUiLCJkYXRhUGFyYW1zIiwiZm9ybWF0RGF0ZU9iamVjdCIsIm9iaiIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIndpZHRoIiwidHJhbnNpdGlvbiIsImR1cmF0aW9uIiwic3RyaXBoZWlnaHQiLCJsZWdlbmRJdGVtcyIsInhTY2FsZSIsInNjYWxlQmFuZCIsImRvbWFpbiIsInJhbmdlIiwicGFkZGluZyIsInlTY2FsZSIsInNjYWxlTGluZWFyIiwic3RlcHMiLCJjb2xvckRvbWFpbiIsInN0cmlwQ29sb3IiLCJPYmplY3QiLCJrZXlzIiwiZXh0ZW50IiwiaW5kZXgiLCJjb2xvclJhbmdlIiwiY29sb3JTY2FsZSIsImludGVycG9sYXRlIiwiaW50ZXJwb2xhdGVIY2wiLCJjaGFydERpdiIsImFwcGVuZFNlbGVjdCIsImF0dHIiLCJzdHlsZSIsImJhcnMiLCJzZWxlY3RBbGwiLCJpIiwiZW50ZXIiLCJhcHBlbmQiLCJpc05hTiIsInN0ZXBWYWx1ZSIsImJhbmR3aWR0aCIsInZhbCIsInBhcnNlRmxvYXQiLCJtZXJnZSIsImV4aXQiLCJyZW1vdmUiLCJzdGVwQ2hhbmdlIiwicHVzaCIsIm1hcmtEYXRlcyIsImZpbHRlciIsInNsaWNlIiwiY29uY2F0IiwieEF4aXMiLCJjYWxsIiwiYXhpc0JvdHRvbSIsInRpY2tWYWx1ZXMiLCJ0aWNrRm9ybWF0IiwiY2hhcnRUaXRsZSIsImh0bWwiLCJsZWdlbmREaXYiLCJpbmRleExlZ2VuZCIsImluZGV4TGVnZW5kSXRlbXMiLCJmb3JFYWNoIiwiaXRlbSIsImtleSIsInZhbHVlIiwidW5zaGlmdCIsImNvbG9yIiwic3RlcExlZ2VuZCIsInN0ZXBMZWdlbmRJdGVtcyIsInN0ZXBTaXplIiwiQ2hhcnRDb21wb25lbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUVBOztDQUVBOztBQUNBO0FBQ0E7Q0FHQTtBQUNBO0FBQ0E7QUFFQTtBQUNBOztBQUNBLElBQU1BLFNBQVMsR0FBR0Msa0RBQUUsQ0FBQ0MsU0FBSCxDQUFhLFVBQWIsQ0FBbEI7O0lBRU1DLDhCOzs7Ozs7Ozs7Ozs7Ozs7O3VOQUNhO0FBQ2JDLFlBQU0sRUFBRSxJQURLO0FBQ0M7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBQyxZQUFNLEVBQUUsR0FUSztBQVViQyxpQkFBVyxFQUFFLEVBVkE7QUFXYkMsWUFBTSxFQUFFO0FBQ05DLFdBQUcsRUFBRSxFQURDO0FBRU5DLGFBQUssRUFBRSxFQUZEO0FBR05DLGNBQU0sRUFBRSxFQUhGO0FBSU5DLFlBQUksRUFBRTtBQUpBLE9BWEs7QUFpQmJDLFlBQU0sRUFBRSxRQWpCSztBQWlCSztBQUNsQkMsZUFBUyxFQUFFLHVCQWxCRTtBQW1CYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FDLFVBQUksRUFBRSxJQXZDTyxDQXdDYjs7QUF4Q2EsSzs7c05BMkNELEU7Ozs7Ozs7MkJBRVA7QUFDTCxVQUFNQyxPQUFPLEdBQUcsS0FBS0MsSUFBTCxFQUFoQjtBQUNBLFVBQU1DLEtBQUssR0FB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bks7QUFDRCxXQVJILEVBU0d0QixLQVRILENBU1N5QixVQVRULEVBVUdwQyxLQVZILENBVVMsU0FWVCxFQVVvQixNQVZwQixFQVdHQSxLQVhILENBV1MsV0FYVCxFQVdzQixnQkFYdEIsRUFZRTtBQVpGLFdBYUcwQixJQWJILENBYVEsVUFBQzVELENBQUQsRUFBSXFDLENBQUosRUFBVTtBQUNkLGdCQUFNbUMsUUFBUSxHQUFJN0QsV0FBRCxHQUFnQjRELGVBQWUsQ0FBQzFFLE1BQWpEO0FBQ0EsOERBQTBDLENBQUUsQ0FBQ0csQ0FBQyxDQUFDa0UsR0FBSixHQUFXLENBQVosSUFBaUJNLFFBQTNELGtDQUEyRm5GLEtBQUssQ0FBQ0osU0FBakcsb0VBQWlLZSxDQUFDLENBQUNtRSxLQUFuSztBQUNELFdBaEJIO0FBa0JBRyxvQkFBVSxDQUFDeEIsSUFBWCxHQUNHckMsVUFESCxDQUNjQSxVQURkLEVBRUdzQyxNQUZIO0FBR0Q7QUFDRjs7QUFDRCxhQUFPLElBQVA7QUFDRDs7OztFQXJTd0MwQiw0RCxHQXVTN0M7OztBQUNlbEcsNkZBQWYiLCJmaWxlIjoiLi9zcmMvbGliL2NoYXJ0LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZm9ybWF0RGF0ZU9iamVjdCwgZ2V0RGF0ZXMgfSBmcm9tICcuL3V0aWxzL3V0aWxzJztcblxuLyogZXNsaW50LWRpc2FibGUgbm8tdHJhaWxpbmctc3BhY2VzICovXG5pbXBvcnQgQ2hhcnRDb21wb25lbnQgZnJvbSAnLi9iYXNlL0NoYXJ0Q29tcG9uZW50Jztcbi8vIGltcG9ydCBkM1NlbGVjdGlvbk11bHRpIGZyb20gJ2QzLXNlbGVjdGlvbi1tdWx0aSc7XG5pbXBvcnQgRDNMb2NhbGUgZnJvbSAnQHJldXRlcnMtZ3JhcGhpY3MvZDMtbG9jYWxlJztcbmltcG9ydCBkMyBmcm9tICcuL3V0aWxzL2QzJztcbmltcG9ydCB7IGludGVycG9sYXRlSGNsIH0gZnJvbSAnZDMnO1xuXG4vLyBzZWUgZG9jcyBvbiBodHRwczovL2dpdGh1Yi5jb20vcmV1dGVycy1ncmFwaGljcy9ncmFwaGljcy1hdGxhcy1jbGllbnRcbi8vIGltcG9ydCBBdGxhc01ldGFkYXRhQ2xpZW50IGZyb20gJ0ByZXV0ZXJzLWdyYXBoaWNzL2dyYXBoaWNzLWF0bGFzLWNsaWVudCc7XG4vLyBjb25zdCBhdGxhc3RDbGllbnQgPSBuZXcgQXRsYXNNZXRhZGF0YUNsaWVudCgpO1xuXG4vLyBjb25zdCBkYXRlRm9ybWF0X3R0ID0gZDMudGltZUZvcm1hdCgnJUIgJWUnKTtcbi8vIGNvbnN0IG51bWJlckZvcm1hdF90dCA9IGQzLmZvcm1hdCgnLCcpO1xuY29uc3QgZGF0ZVBhcnNlID0gZDMudGltZVBhcnNlKCclWS0lbS0lZCcpO1xuXG5jbGFzcyBDb3VudHJ5TG9ja2Rvd25JbmRpY2F0b3JTdHJpcHMgZXh0ZW5kcyBDaGFydENvbXBvbmVudCB7XG4gICAgZGVmYXVsdFByb3BzID0ge1xuICAgICAgbG9jYWxlOiAnZW4nLCAvLyBTZWUgZG9jcyBodHRwczovL2dpdGh1Yi5jb20vcmV1dGVycy1ncmFwaGljcy9kMy1sb2NhbGVcbiAgICAgIC8vIGRhdGVTZXJpZXM6IFsnMjAxOS0xMi0zMScsICcyMDIwLTA3LTA3J10sIC8vIHl5eXktbW0tZGQgZm9ybWF0XG4gICAgICAvLyBkYXRhUGFyYW1zOiB7XG4gICAgICAvLyAgIGRhdGU6ICdkYXRlJyxcbiAgICAgIC8vICAgaW5kZXg6ICdjMScsXG4gICAgICAvLyAgIHN0ZXBWYWx1ZTogJ2ZsYWcnLFxuICAgICAgLy8gICBzdGVwczogMiwgLy8gc3RlcFZhbHVlID0gMCwgMS4uLlxuICAgICAgLy8gfSxcbiAgICAgIGhlaWdodDogMTUwLFxuICAgICAgc3RyaXBIZWlnaHQ6IDUwLFxuICAgICAgbWFyZ2luOiB7XG4gICAgICAgIHRvcDogMTAsXG4gICAgICAgIHJpZ2h0OiAxOCxcbiAgICAgICAgYm90dG9tOiAxMCxcbiAgICAgICAgbGVmdDogMTgsXG4gICAgICB9LFxuICAgICAgdmFsaWduOiAnY2VudGVyJywgLy8gc3RhcnQsIGNlbnRlciwgYmFzZWxpbmVcbiAgICAgIGJhc2VDb2xvcjogJ3JnYmEoMjU1LDI1NSwyNTUsMC4xKScsXG4gICAgICAvLyBzdHJpcENvbG9yOiB7IC8vIHNob3VsZCBiZSBudW1lcmljIHZhbHVlcyB0aGF0IGFyZSBtYXBwZWQgZnJvbSB0aGUgZGF0YVxuICAgICAgLy8gICAwOiAncmdiYSgyNTUsMjU1LDI1NSwwLjI1KScsIC8vICcjNEM1NjZBJyxcbiAgICAgIC8vICAgMTogJ3JnYmEoMjU1LDI1NSwyNTUsMC41KScsXG4gICAgICAvLyAgIDI6ICdyZ2JhKDI1NSwyNTUsMjU1LDAuNzUpJyxcbiAgICAgIC8vICAgMzogJ3JnYmEoMjU1LDE5NSwxOTUsMSknLFxuICAgICAgLy8gfSxcbiAgICAgIC8vIGxlZ2VuZEl0ZW1zOiB7IC8vIHNob3VsZCBjb250YWluIGl0ZW1zIGZyb20gc3RyaXBDb2xvclxuICAgICAgLy8gICBudWxsOiAnbm8gZGF0YScsXG4gICAgICAvLyAgIHN0ZXBMZWdlbmQ6IHtcbiAgICAgIC8vICAgICAwOiAndGFyZ2V0ZWQnLFxuICAgICAgLy8gICAgIDE6ICduYXRpb253aWRlJyxcbiAgICAgIC8vICAgfSxcbiAgICAgIC8vICAgaW5kZXhMZWdlbmQ6IHtcbiAgICAgIC8vICAgICAwOiAnbm8gbWVhc3VyZXMnLFxuICAgICAgLy8gICAgIDE6ICdyZWNvbW1lbmQgY2xvc2luZycsXG4gICAgICAvLyAgICAgMjogJ3JlcXVpcmUgY2xvc2luZyBvbiBzb21lIGxldmVscycsXG4gICAgICAvLyAgICAgMzogJ3JlcXVpcmUgY2xvc2luZyBhbGwgbGV2ZWxzJyxcbiAgICAgIC8vICAgfSxcbiAgICAgIC8vIH0sXG4gICAgICAvLyBjaGFydFRpdGxlOiAnU2Nob29sIGNsb3NpbmcgbWVhc3VyZXMnLFxuICAgICAgYXhpczogdHJ1ZSxcbiAgICAgIC8vIG1hcmtEYXRlczogWycyMDE5LTEyLTMxJywgJzIwMjAtMDMtMjUnLCAnMjAyMC0wNy0wNyddLCAvLyB5eXl5LW1tLWRkZGRcbiAgICB9O1xuXG4gICAgZGVmYXVsdERhdGEgPSBbXTtcblxuICAgIGRyYXcoKSB7XG4gICAgICBjb25zdCBhbGxEYXRhID0gdGhpcy5kYXRhKCk7XG4gICAgICBjb25zdCBwcm9wcyA9IHRoaXMucHJvcHMoKTtcbiAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLnNlbGVjdGlvbigpLm5vZGUoKTtcblxuICAgICAgLy8gZGF0ZSBmb3JtYXR0ZXJzXG4gICAgICBjb25zdCBsb2NhbGUgPSBuZXcgRDNMb2NhbGUocHJvcHMubG9jYWxlKTtcbiAgICAgIGNvbnN0IGRhdGVGb3JtYXQgPSBsb2NhbGUuZm9ybWF0VGltZSgnJWIgJWUnKTtcblxuICAgICAgLy8gZ2V0IGRhdGUgcmFuZ2UgdG8gYmUgcGxvdHRlZFxuICAgICAgaWYgKCFwcm9wcy5kYXRlU2VyaWVzKSB7XG4gICAgICAgIHByb3BzLmRhdGVTZXJpZXMgPSBbZGF0ZVBhcnNlKGFsbERhdGFbMF0uZGF0ZSksIGRhdGVQYXJzZShhbGxEYXRhW2FsbERhdGEubGVuZ3RoIC0gMV0uZGF0ZSldO1xuICAgICAgfVxuICAgICAgY29uc3QgZGF0ZVNlcmllcyA9IGdldERhdGVzKHByb3BzLmRhdGVTZXJpZXNbMF0sIHByb3BzLmRhdGVTZXJpZXNbMV0pO1xuICAgICAgLy8gY29uc29sZS5sb2coKGRhdGVTZXJpZXMpKTtcblxuICAgICAgLy8gc2V0IGRhdGEgZm9yIHRoZSBkYXRlIHNlcmllc1xuICAgICAgY29uc3QgZGF0YSA9IGRhdGVTZXJpZXMubWFwKChkKSA9PiB7XG4gICAgICAgIGNvbnN0IG1hdGNoID0gYWxsRGF0YS5maW5kKChlKSA9PiAoZVtwcm9wcy5kYXRhUGFyYW1zLmRhdGVdKSA9PT0gKGZvcm1hdERhdGVPYmplY3QoZCkpKTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICAgIG9ialtwcm9wcy5kYXRhUGFyYW1zLmRhdGVdID0gZm9ybWF0RGF0ZU9iamVjdChkKTtcbiAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIC8vIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgICAgLy8gZ2V0IGNvdW50cnkgZGV0YWlscyBmcm9tIEF0bGFzQ2xpZW50IGZyb20gSVNPLTJcbiAgICAgIC8vIHByb3BzLmNvdW50cnkgPSBhdGxhc3RDbGllbnQuZ2V0Q291bnRyeShwcm9wcy5jb3VudHJ5SVNPMik7XG5cbiAgICAgIGNvbnN0IHtcbiAgICAgICAgd2lkdGgsXG4gICAgICB9ID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgY29uc3QgdHJhbnNpdGlvbiA9IGQzLnRyYW5zaXRpb24oKVxuICAgICAgICAuZHVyYXRpb24oNzUwKTtcblxuICAgICAgY29uc3Qgc3RyaXBoZWlnaHQgPSBwcm9wcy5sZWdlbmRJdGVtcyA/IChwcm9wcy5zdHJpcEhlaWdodCAtIHByb3BzLm1hcmdpbi50b3ApIDogKHByb3BzLmhlaWdodCAtIHByb3BzLm1hcmdpbi50b3AgLSBwcm9wcy5tYXJnaW4uYm90dG9tKTtcblxuICAgICAgLy8gc2V0IHNjYWxlc1xuXG4gICAgICBjb25zdCB4U2NhbGUgPSBkMy5zY2FsZUJhbmQoKVxuICAgICAgICAuZG9tYWluKGRhdGVTZXJpZXMpXG4gICAgICAgIC5yYW5nZShbMCwgd2lkdGggLSBwcm9wcy5tYXJnaW4ubGVmdCAtIHByb3BzLm1hcmdpbi5yaWdodF0pXG4gICAgICAgIC5wYWRkaW5nKDApO1xuXG4gICAgICBjb25zdCB5U2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpXG4gICAgICAgIC5kb21haW4oWzAsIHByb3BzLmRhdGFQYXJhbXMuc3RlcHMgLSAxXSlcbiAgICAgICAgLnJhbmdlKFtzdHJpcGhlaWdodCAvIChwcm9wcy5kYXRhUGFyYW1zLnN0ZXBzKSwgc3RyaXBoZWlnaHRdKTtcblxuICAgICAgY29uc3QgY29sb3JEb21haW4gPSBwcm9wcy5zdHJpcENvbG9yID8gKE9iamVjdC5rZXlzKHByb3BzLnN0cmlwQ29sb3IpKS5tYXAoZCA9PiArZCkgOiBkMy5leHRlbnQoZGF0YS5tYXAoZCA9PiBkW3Byb3BzLmRhdGFQYXJhbXMuaW5kZXhdKSk7XG5cbiAgICAgIGNvbnN0IGNvbG9yUmFuZ2UgPSBwcm9wcy5zdHJpcENvbG9yID8gY29sb3JEb21haW4ubWFwKGQgPT4gcHJvcHMuc3RyaXBDb2xvcltgJHtkfWBdKSA6IFsnIzMzMzMzMycsICcjY2NjY2NjJ107XG5cbiAgICAgIGNvbnN0IGNvbG9yU2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpXG4gICAgICAgIC5kb21haW4oY29sb3JEb21haW4pXG4gICAgICAgIC5yYW5nZShjb2xvclJhbmdlKVxuICAgICAgICAuaW50ZXJwb2xhdGUoaW50ZXJwb2xhdGVIY2wpO1xuXG4gICAgICAvLyBtYWluIGNoYXJ0IGNvbnRhaW5lclxuICAgICAgY29uc3QgY2hhcnREaXYgPSB0aGlzLnNlbGVjdGlvbigpXG4gICAgICAgIC5hcHBlbmRTZWxlY3QoJ2RpdicpIC8vIHNlZSBkb2NzIGluIC4vdXRpbHMvZDMuanNcbiAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ0NvdW50cnlMb2NrZG93bkluZGljYXRvclN0cmlwcycpXG4gICAgICAgIC5zdHlsZSgnd2lkdGgnLCBgJHt3aWR0aH1weGApXG4gICAgICAvLyAuc3R5bGUoJ2hlaWdodCcsIGAke3Byb3BzLmhlaWdodH1weGApXG4gICAgICAgIC5hcHBlbmRTZWxlY3QoJ2RpdicpXG4gICAgICAgIC5zdHlsZSgncGFkZGluZy10b3AnLCBgJHtwcm9wcy5tYXJnaW4udG9wfXB4YClcbiAgICAgICAgLnN0eWxlKCdwYWRkaW5nLXJpZ2h0JywgYCR7cHJvcHMubWFyZ2luLnJpZ2h0fXB4YClcbiAgICAgICAgLnN0eWxlKCdwYWRkaW5nLWJvdHRvbScsIGAke3Byb3BzLm1hcmdpbi5ib3R0b219cHhgKVxuICAgICAgICAuc3R5bGUoJ3BhZGRpbmctbGVmdCcsIGAke3Byb3BzLm1hcmdpbi5sZWZ0fXB4YCk7XG5cbiAgICAgIC8vIG1ha2UgYmFyc1xuICAgICAgY29uc3QgYmFycyA9IGNoYXJ0RGl2LmFwcGVuZFNlbGVjdCgnZGl2LmJhcnMtY29udGFpbmVyJylcbiAgICAgICAgLnN0eWxlKCdkaXNwbGF5JywgJ2ZsZXgnKVxuICAgICAgICAuc3R5bGUoJ2FsaWduLWl0ZW1zJywgYCR7cHJvcHMudmFsaWdufWApXG4gICAgICAgIC5zdHlsZSgnanVzdGlmeS1jb250ZW50JywgJ2NlbnRlcicpXG4gICAgICAgIC5zZWxlY3RBbGwoJy5iYXInKVxuICAgICAgICAuZGF0YShkYXRhLCAoZCwgaSkgPT4gZFtwcm9wcy5kYXRhUGFyYW1zLmRhdGVdKTsgLy8gZm9yIHNtb290aCBkYXRhIHVwZGF0aW9uXG5cbiAgICAgIGJhcnMuZW50ZXIoKS5hcHBlbmQoJ2RpdicpXG4gICAgICAgIC5hdHRyKCdjbGFzcycsIGQgPT4gYGJhciAke2RbcHJvcHMuZGF0YVBhcmFtcy5kYXRlXX1gKVxuICAgICAgICAuc3R5bGUoJ2Rpc3BsYXknLCAnaW5saW5lLWJsb2NrJylcbiAgICAgICAgLnN0eWxlKCdoZWlnaHQnLCBkID0+IHtcbiAgICAgICAgICBpZiAoaXNOYU4oZFtwcm9wcy5kYXRhUGFyYW1zLnN0ZXBWYWx1ZV0pKSB7XG4gICAgICAgICAgICByZXR1cm4geVNjYWxlKDApICsgJ3B4JztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHlTY2FsZShkW3Byb3BzLmRhdGFQYXJhbXMuc3RlcFZhbHVlXSkgKyAncHgnO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLnN0eWxlKCd3aWR0aCcsIHhTY2FsZS5iYW5kd2lkdGgoKSArICdweCcpXG4gICAgICAgIC5zdHlsZSgnYmFja2dyb3VuZCcsIGQgPT4ge1xuICAgICAgICAgIGNvbnN0IHZhbCA9IHBhcnNlRmxvYXQoZFtwcm9wcy5kYXRhUGFyYW1zLmluZGV4XSk7XG4gICAgICAgICAgcmV0dXJuICh2YWwgIT09IG51bGwpICYmICEoaXNOYU4odmFsKSkgPyBjb2xvclNjYWxlKHZhbCkgOiBwcm9wcy5iYXNlQ29sb3I7XG4gICAgICAgIH0pXG4gICAgICAgIC5tZXJnZShiYXJzKVxuICAgICAgICAudHJhbnNpdGlvbih0cmFuc2l0aW9uKVxuICAgICAgICAuc3R5bGUoJ2Rpc3BsYXknLCAnaW5saW5lLWJsb2NrJylcbiAgICAgICAgLnN0eWxlKCdoZWlnaHQnLCBkID0+IHtcbiAgICAgICAgICBpZiAoaXNOYU4oZFtwcm9wcy5kYXRhUGFyYW1zLnN0ZXBWYWx1ZV0pKSB7XG4gICAgICAgICAgICByZXR1cm4geVNjYWxlKDApICsgJ3B4JztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHlTY2FsZShkW3Byb3BzLmRhdGFQYXJhbXMuc3RlcFZhbHVlXSkgKyAncHgnO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLnN0eWxlKCd3aWR0aCcsIHhTY2FsZS5iYW5kd2lkdGgoKSArICdweCcpXG4gICAgICAgIC5zdHlsZSgnYmFja2dyb3VuZCcsIGQgPT4ge1xuICAgICAgICAgIGNvbnN0IHZhbCA9IHBhcnNlRmxvYXQoZFtwcm9wcy5kYXRhUGFyYW1zLmluZGV4XSk7XG4gICAgICAgICAgcmV0dXJuICh2YWwgIT09IG51bGwpICYmICEoaXNOYU4odmFsKSkgPyBjb2xvclNjYWxlKHZhbCkgOiBwcm9wcy5iYXNlQ29sb3I7XG4gICAgICAgIH0pO1xuXG4gICAgICBiYXJzLmV4aXQoKVxuICAgICAgICAudHJhbnNpdGlvbih0cmFuc2l0aW9uKVxuICAgICAgICAuYXR0cignaGVpZ2h0JywgMClcbiAgICAgICAgLnJlbW92ZSgpO1xuXG4gICAgICAvLyBhZGQgYXhpc1xuICAgICAgLy8gY29uc29sZS5sb2coeFNjYWxlKGRhdGVQYXJzZSgnMjAyMC0wNy0wNycpKSk7XG4gICAgICBpZiAocHJvcHMuYXhpcykge1xuICAgICAgICBjb25zdCBzdGVwQ2hhbmdlID0gW107XG4gICAgICAgIGlmIChwcm9wcy5kYXRhUGFyYW1zLnN0ZXBzID4gMSkge1xuICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgcHJvcHMuZGF0YVBhcmFtcy5zdGVwczsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBtYXRjaCA9IGRhdGEuZmluZCgoZSkgPT4gKGVbcHJvcHMuZGF0YVBhcmFtcy5zdGVwVmFsdWVdKSA9PT0gaSk7XG4gICAgICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgc3RlcENoYW5nZS5wdXNoKGRhdGVQYXJzZShtYXRjaFtwcm9wcy5kYXRhUGFyYW1zLmRhdGVdKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1hcmtEYXRlcyA9IHByb3BzLm1hcmtEYXRlcyA/XG4gICAgICAgICAgcHJvcHMubWFya0RhdGVzLm1hcChkID0+IHtcbiAgICAgICAgICAgIGlmICghaXNOYU4oeFNjYWxlKGRhdGVQYXJzZShkKSkpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBkYXRlUGFyc2UoZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkuZmlsdGVyKGQgPT4gIWlzTmFOKGQpKSA6IFtkYXRlU2VyaWVzWzBdLCBkYXRlU2VyaWVzLnNsaWNlKC0xKVswXV0uY29uY2F0KHN0ZXBDaGFuZ2UpO1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhtYXJrRGF0ZXMpO1xuICAgICAgICBjb25zdCB4QXhpcyA9IGNoYXJ0RGl2LmFwcGVuZFNlbGVjdCgnc3ZnJylcbiAgICAgICAgICAuYXR0cignd2lkdGgnLCB3aWR0aCAtIHByb3BzLm1hcmdpbi5sZWZ0IC0gcHJvcHMubWFyZ2luLnJpZ2h0KVxuICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCAyNSlcbiAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgwLCAwKScpO1xuXG4gICAgICAgIHhBeGlzLmFwcGVuZFNlbGVjdCgnZy5heGlzLXgnKVxuICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdheGlzLXggYXhpcycpXG4gICAgICAgICAgLnRyYW5zaXRpb24odHJhbnNpdGlvbilcbiAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgwLDApJylcbiAgICAgICAgICAuY2FsbChcbiAgICAgICAgICAgIGQzLmF4aXNCb3R0b20oeFNjYWxlKVxuICAgICAgICAgICAgICAudGlja1ZhbHVlcyhtYXJrRGF0ZXMpXG4gICAgICAgICAgICAgIC50aWNrRm9ybWF0KGRhdGVGb3JtYXQpXG4gICAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIC8vIGFkZCBjaGFydCB0aXRsZVxuICAgICAgaWYgKHByb3BzLmNoYXJ0VGl0bGUpIHtcbiAgICAgICAgY2hhcnREaXYuYXBwZW5kU2VsZWN0KCdkaXYuY2hhcnQtdGl0bGUnKVxuICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdmb250LWRpc3BsYXkgY2hhcnQtdGl0bGUnKVxuICAgICAgICAgIC5odG1sKGA8aDY+JHtwcm9wcy5jaGFydFRpdGxlfTwvaDY+YCk7XG4gICAgICB9XG5cbiAgICAgIC8vIGNoYXJ0IGxlZ2VuZFxuICAgICAgaWYgKHByb3BzLmxlZ2VuZEl0ZW1zKSB7XG4gICAgICAgIC8vIG1ha2UgbGVnZW5kXG4gICAgICAgIGNvbnN0IGxlZ2VuZERpdiA9IGNoYXJ0RGl2LmFwcGVuZFNlbGVjdCgnZGl2LmxlZ2VuZC1jb250YWluZXInKTtcbiAgICAgICAgaWYgKHByb3BzLmxlZ2VuZEl0ZW1zLmluZGV4TGVnZW5kKSB7XG4gICAgICAgICAgY29uc3QgaW5kZXhMZWdlbmRJdGVtcyA9IFtdO1xuICAgICAgICAgIChPYmplY3Qua2V5cyhwcm9wcy5sZWdlbmRJdGVtcy5pbmRleExlZ2VuZCkpLmZvckVhY2goZCA9PiB7XG4gICAgICAgICAgICBjb25zdCBpdGVtID0ge1xuICAgICAgICAgICAgICBrZXk6IGQsXG4gICAgICAgICAgICAgIHZhbHVlOiBwcm9wcy5sZWdlbmRJdGVtcy5pbmRleExlZ2VuZFtkXSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpbmRleExlZ2VuZEl0ZW1zLnB1c2goaXRlbSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKHByb3BzLmxlZ2VuZEl0ZW1zLm51bGwpIHtcbiAgICAgICAgICAgIGluZGV4TGVnZW5kSXRlbXMudW5zaGlmdCh7XG4gICAgICAgICAgICAgIGtleTogJ251bGwnLFxuICAgICAgICAgICAgICB2YWx1ZTogcHJvcHMubGVnZW5kSXRlbXMubnVsbCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGluZGV4TGVnZW5kSXRlbXMgPSBpbmRleExlZ2VuZEl0ZW1zLmZpbHRlcihkID0+IGQudmFsdWUgPT09IG51bGwpO1xuICAgICAgICAgIC8vIGNvbnN0IGxlZ2VuZFdpZHRoID0gKHdpZHRoIC0gcHJvcHMubWFyZ2luLnJpZ2h0IC0gcHJvcHMubWFyZ2luLmxlZnQpIC8gaW5kZXhMZWdlbmRJdGVtcy5sZW5ndGg7XG5cbiAgICAgICAgICBjb25zdCBpbmRleExlZ2VuZCA9IGxlZ2VuZERpdi5hcHBlbmRTZWxlY3QoJ2Rpdi5sZWdlbmQuaW5kZXhMZWdlbmQnKVxuICAgICAgICAgICAgLnNlbGVjdEFsbCgnLmxlZ2VuZC1pdGVtJylcbiAgICAgICAgICAgIC5kYXRhKGluZGV4TGVnZW5kSXRlbXMpOyAvLyBmb3Igc21vb3RoIGRhdGEgdXBkYXRpb25cblxuICAgICAgICAgIGluZGV4TGVnZW5kLmVudGVyKCkuYXBwZW5kKCdkaXYnKVxuICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2xlZ2VuZC1pdGVtJylcbiAgICAgICAgICAgIC5zdHlsZSgnZGlzcGxheScsICdmbGV4JylcbiAgICAgICAgICAgIC5zdHlsZSgnbWFyZ2luJywgZCA9PiB7XG4gICAgICAgICAgICAgIGlmIChkLmtleSA9PT0gJ251bGwnKSB7IHJldHVybiAnMXJlbSAwJzsgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAvLyAuc3R5bGUoJ3dpZHRoJywgYCR7bGVnZW5kV2lkdGh9cHhgKVxuICAgICAgICAgICAgLmh0bWwoZCA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gKCtkLmtleSAhPT0gbnVsbCkgJiYgIShpc05hTigrZC5rZXkpKSA/IGNvbG9yU2NhbGUoK2Qua2V5KSA6IHByb3BzLmJhc2VDb2xvcjtcbiAgICAgICAgICAgICAgcmV0dXJuIGA8c3BhbiBzdHlsZT1cIndpZHRoOjEuNXJlbTttaW4td2lkdGg6MXJlbTsgbWluLWhlaWdodDoxcmVtOyBiYWNrZ3JvdW5kOiAke2NvbG9yfVwiPjwvc3Bhbj4gPHAgc3R5bGU9XCJtYXJnaW46MCAwIDAgMC41cmVtO1wiPiR7ZC52YWx1ZX08L3A+YDtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAubWVyZ2UoaW5kZXhMZWdlbmQpXG4gICAgICAgICAgICAuc3R5bGUoJ2Rpc3BsYXknLCAnZmxleCcpXG4gICAgICAgICAgLy8gLnN0eWxlKCd3aWR0aCcsIGAke2xlZ2VuZFdpZHRofXB4YClcbiAgICAgICAgICAgIC5odG1sKGQgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBjb2xvciA9ICgrZC5rZXkgIT09IG51bGwpICYmICEoaXNOYU4oK2Qua2V5KSkgPyBjb2xvclNjYWxlKCtkLmtleSkgOiBwcm9wcy5iYXNlQ29sb3I7XG4gICAgICAgICAgICAgIHJldHVybiBgPHNwYW4gc3R5bGU9XCJ3aWR0aDoxLjVyZW07IG1pbi13aWR0aDoxcmVtOyBtaW4taGVpZ2h0OjFyZW07IGJhY2tncm91bmQ6ICR7Y29sb3J9XCI+PC9zcGFuPiA8cCBzdHlsZT1cIm1hcmdpbjowIDAgMCAwLjVyZW07XCI+JHtkLnZhbHVlfTwvcD5gO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpbmRleExlZ2VuZC5leGl0KClcbiAgICAgICAgICAgIC50cmFuc2l0aW9uKHRyYW5zaXRpb24pXG4gICAgICAgICAgICAucmVtb3ZlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocHJvcHMubGVnZW5kSXRlbXMuc3RlcExlZ2VuZCkge1xuICAgICAgICAgIC8vIHN0ZXAgbGVnZW5kIHN0dWZmXG4gICAgICAgICAgY29uc3Qgc3RlcExlZ2VuZEl0ZW1zID0gT2JqZWN0LmtleXMocHJvcHMubGVnZW5kSXRlbXMuc3RlcExlZ2VuZCkubWFwKGQgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAga2V5OiBkLFxuICAgICAgICAgICAgICB2YWx1ZTogcHJvcHMubGVnZW5kSXRlbXMuc3RlcExlZ2VuZFtkXSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgLy8gY29uc29sZS5sb2coc3RlcExlZ2VuZEl0ZW1zKTtcblxuICAgICAgICAgIGNvbnN0IHN0ZXBMZWdlbmQgPSBsZWdlbmREaXYuYXBwZW5kU2VsZWN0KCdkaXYubGVnZW5kLnN0ZXBMZWdlbmQnKVxuICAgICAgICAgICAgLnN0eWxlKCdhbGlnbi1pdGVtcycsIGAke3Byb3BzLnZhbGlnbn1gKVxuICAgICAgICAgICAgLnNlbGVjdEFsbCgnLmxlZ2VuZC1pdGVtJylcbiAgICAgICAgICAgIC5kYXRhKHN0ZXBMZWdlbmRJdGVtcyk7IC8vIGZvciBzbW9vdGggZGF0YSB1cGRhdGlvblxuXG4gICAgICAgICAgc3RlcExlZ2VuZC5lbnRlcigpLmFwcGVuZCgnZGl2JylcbiAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdsZWdlbmQtaXRlbScpXG4gICAgICAgICAgICAuc3R5bGUoJ2Rpc3BsYXknLCAnZmxleCcpXG4gICAgICAgICAgICAuc3R5bGUoJ2ZsZXgtZmxvdycsICdjb2x1bW4tcmV2ZXJzZScpXG4gICAgICAgICAgICAvLyAuc3R5bGUoJ3dpZHRoJywgYCR7bGVnZW5kV2lkdGh9cHhgKVxuICAgICAgICAgICAgLmh0bWwoKGQsIGkpID0+IHtcbiAgICAgICAgICAgICAgY29uc3Qgc3RlcFNpemUgPSAoc3RyaXBoZWlnaHQpIC8gc3RlcExlZ2VuZEl0ZW1zLmxlbmd0aDtcbiAgICAgICAgICAgICAgcmV0dXJuIGA8c3BhbiBzdHlsZT1cIndpZHRoOjEwMCU7IGhlaWdodDokeygoK2Qua2V5KSArIDEpICogc3RlcFNpemV9cHg7IGJhY2tncm91bmQtY29sb3I6JHtwcm9wcy5iYXNlQ29sb3J9O1wiPjwvc3Bhbj48cCBzdHlsZT1cIm1hcmdpbjowIDAuNXJlbSAwLjVyZW0gMC41cmVtO1wiPiR7ZC52YWx1ZX08L3A+YDtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAubWVyZ2Uoc3RlcExlZ2VuZClcbiAgICAgICAgICAgIC5zdHlsZSgnZGlzcGxheScsICdmbGV4JylcbiAgICAgICAgICAgIC5zdHlsZSgnZmxleC1mbG93JywgJ2NvbHVtbi1yZXZlcnNlJylcbiAgICAgICAgICAgIC8vIC5zdHlsZSgnd2lkdGgnLCBgJHtsZWdlbmRXaWR0aH1weGApXG4gICAgICAgICAgICAuaHRtbCgoZCwgaSkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBzdGVwU2l6ZSA9IChzdHJpcGhlaWdodCkgLyBzdGVwTGVnZW5kSXRlbXMubGVuZ3RoO1xuICAgICAgICAgICAgICByZXR1cm4gYDxzcGFuIHN0eWxlPVwid2lkdGg6MTAwJTsgaGVpZ2h0OiR7KCgrZC5rZXkpICsgMSkgKiBzdGVwU2l6ZX1weDsgYmFja2dyb3VuZC1jb2xvcjoke3Byb3BzLmJhc2VDb2xvcn07XCI+PC9zcGFuPjxwIHN0eWxlPVwibWFyZ2luOjAgMC41cmVtIDAuNXJlbSAwLjVyZW07XCI+JHtkLnZhbHVlfTwvcD5gO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICBzdGVwTGVnZW5kLmV4aXQoKVxuICAgICAgICAgICAgLnRyYW5zaXRpb24odHJhbnNpdGlvbilcbiAgICAgICAgICAgIC5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuLy8gY29uc29sZS5sb2codGhpcy5kZWZhdWx0UHJvcHMpO1xuZXhwb3J0IGRlZmF1bHQgQ291bnRyeUxvY2tkb3duSW5kaWNhdG9yU3RyaXBzO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/lib/chart.js\n");

/***/ })

})