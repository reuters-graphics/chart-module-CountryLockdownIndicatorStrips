webpackHotUpdate("static/development/pages/index.js",{

/***/ "./src/lib/chart.js":
/*!**************************!*\
  !*** ./src/lib/chart.js ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/classCallCheck */ \"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/createClass */ \"./node_modules/@babel/runtime/helpers/esm/createClass.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/assertThisInitialized */ \"./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/esm/inherits */ \"./node_modules/@babel/runtime/helpers/esm/inherits.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/esm/possibleConstructorReturn */ \"./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/esm/getPrototypeOf */ \"./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/esm/defineProperty */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var _base_ChartComponent__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./base/ChartComponent */ \"./src/lib/base/ChartComponent.js\");\n/* harmony import */ var _utils_d3__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/d3 */ \"./src/lib/utils/d3.js\");\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/utils */ \"./src/lib/utils/utils.js\");\n/* harmony import */ var _defaultData_json__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./defaultData.json */ \"./src/lib/defaultData.json\");\nvar _defaultData_json__WEBPACK_IMPORTED_MODULE_10___namespace = /*#__PURE__*/__webpack_require__.t(/*! ./defaultData.json */ \"./src/lib/defaultData.json\", 1);\n/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! d3 */ \"./node_modules/d3/index.js\");\n/* harmony import */ var d3_selection_multi__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! d3-selection-multi */ \"./node_modules/d3-selection-multi/index.js\");\n\n\n\n\n\n\n\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return Object(_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/* eslint-disable no-trailing-spaces */\n\n\n\n\n\n // see docs on https://github.com/reuters-graphics/graphics-atlas-client\n// import AtlasMetadataClient from '@reuters-graphics/graphics-atlas-client';\n// const atlastClient = new AtlasMetadataClient();\n\nvar dateParse = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].timeParse('%Y-%m-%d');\nvar dateFormat = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].timeFormat('%b %e');\nvar dateFormat_tt = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].timeFormat('%B %e');\nvar numberFormat_tt = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].format(',');\n\nvar CountryLockdownIndicatorStrips = /*#__PURE__*/function (_ChartComponent) {\n  Object(_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(CountryLockdownIndicatorStrips, _ChartComponent);\n\n  var _super = _createSuper(CountryLockdownIndicatorStrips);\n\n  function CountryLockdownIndicatorStrips() {\n    var _this;\n\n    Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, CountryLockdownIndicatorStrips);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(Object(_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_this), \"defaultProps\", {\n      dateSeries: ['2019-12-31', '2020-07-11'],\n      // yyyy-mm-dd format\n      dataParams: {\n        date: 'date',\n        index: 'c1',\n        stepValue: 'flag',\n        steps: 2 // stepValue = 0, 1...\n\n      },\n      height: 150,\n      stripHeight: 50,\n      margin: {\n        top: 10,\n        right: 16,\n        bottom: 10,\n        left: 16\n      },\n      valign: 'center',\n      // start, center, baseline\n      baseColor: '#ECEFF4',\n      stripColor: {\n        // should be numeric values that are mapped from the data\n        0: '#d1eeea',\n        1: '#ffe47f',\n        2: 'orange',\n        3: '#a50f15'\n      },\n      legendItems: {\n        // should contain items from stripColor\n        \"null\": 'no data',\n        stepLegend: {\n          0: 'targeted',\n          1: 'nationwide'\n        },\n        indexLegend: {\n          0: 'no measures',\n          1: 'recommend closing',\n          2: 'require closing on some levels',\n          3: 'require closing all levels'\n        }\n      },\n      axis: true // markDates: ['2019-12-31', '2020-03-25', '2020-07-10'], // yyyy-mm-dddd\n\n    });\n\n    Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(Object(_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_this), \"defaultData\", _defaultData_json__WEBPACK_IMPORTED_MODULE_10__);\n\n    return _this;\n  }\n\n  Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(CountryLockdownIndicatorStrips, [{\n    key: \"draw\",\n    value: function draw() {\n      var allData = this.data();\n      var props = this.props();\n      var node = this.selection().node();\n\n      if (!props.dateSeries) {\n        props.dateSeries = [dateParse(allData[0].date), dateParse(allData[allData.length - 1].date)];\n      }\n\n      var dateSeries = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_9__[\"getDates\"])(props.dateSeries[0], props.dateSeries[1]); // console.log((dateSeries));\n      // set data for the date series\n\n      var data = dateSeries.map(function (d) {\n        var match = allData.find(function (e) {\n          return e[props.dataParams.date] === Object(_utils_utils__WEBPACK_IMPORTED_MODULE_9__[\"formatDateObject\"])(d);\n        });\n\n        if (match) {\n          return match;\n        } else {\n          var obj = {};\n          obj[props.dataParams.date] = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_9__[\"formatDateObject\"])(d);\n          return obj;\n        }\n      }); // get country details from AtlasClient from ISO-2\n      // props.country = atlastClient.getCountry(props.countryISO2);\n\n      var _node$getBoundingClie = node.getBoundingClientRect(),\n          width = _node$getBoundingClie.width;\n\n      var transition = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].transition().duration(750); // main chart container\n\n      var chartDiv = this.selection().appendSelect('div') // see docs in ./utils/d3.js\n      .attr('class', 'CountryLockdownIndicatorStrips').style('width', \"\".concat(width, \"px\")) // .style('height', `${props.height}px`)\n      .appendSelect('div').styles({\n        'padding-top': \"\".concat(props.margin.top, \"px\"),\n        'padding-right': \"\".concat(props.margin.right, \"px\"),\n        'padding-bottom': \"\".concat(props.margin.bottom, \"px\"),\n        'padding-left': \"\".concat(props.margin.left, \"px\")\n      });\n      var stripheight = props.legendItems ? props.stripHeight - props.margin.top : props.height - props.margin.top - props.margin.bottom; // set scales\n\n      var yScale = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].scaleLinear().domain([0, props.dataParams.steps - 1]).range([stripheight, props.margin.top]);\n      var xScale = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].scaleBand().domain(dateSeries).range([0, width - props.margin.left - props.margin.right]).padding(0);\n      var colorDomain = props.stripColor ? Object.keys(props.stripColor).map(function (d) {\n        return +d;\n      }) : _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].extent(data.map(function (d) {\n        return d[props.dataParams.index];\n      }));\n      var colorRange = props.stripColor ? colorDomain.map(function (d) {\n        return props.stripColor[\"\".concat(d)];\n      }) : ['#cccccc', '#333333'];\n      var colorScale = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].scaleLinear().domain(colorDomain).range(colorRange).interpolate(d3__WEBPACK_IMPORTED_MODULE_11__[\"interpolateHcl\"]); // make bars\n\n      var bars = chartDiv.appendSelect('div.bars-container').styles({\n        display: 'flex',\n        'align-items': \"\".concat(props.valign)\n      }).selectAll('.bar').data(data, function (d, i) {\n        return d[props.dataParams.date];\n      }); // for smooth data updation\n\n      bars.enter().append('div').attr('class', function (d) {\n        return \"bar \".concat(d[props.dataParams.date]);\n      }).style('display', 'inline-block').style('height', function (d) {\n        var stepSize = stripheight / props.dataParams.steps;\n        var step = d[props.dataParams.stepValue] + 1;\n        return d[props.dataParams.index] ? step ? step * stepSize + 'px' : stepSize + 'px' : stepSize + 'px';\n      }).style('width', xScale.bandwidth() + 'px').style('background', function (d) {\n        var val = parseFloat(d[props.dataParams.index]);\n        return val !== null && !isNaN(val) ? colorScale(val) : props.baseColor;\n      }).merge(bars).transition(transition).style('display', 'inline-block').style('height', function (d) {\n        var stepSize = stripheight / props.dataParams.steps;\n        var step = d[props.dataParams.stepValue] + 1;\n        return d[props.dataParams.index] ? step ? step * stepSize + 'px' : stepSize + 'px' : stepSize + 'px';\n      }).style('width', xScale.bandwidth() + 'px').style('background', function (d) {\n        var val = parseFloat(d[props.dataParams.index]);\n        return val !== null && !isNaN(val) ? colorScale(val) : props.baseColor;\n      });\n      bars.exit().transition(transition).attr('height', 0).remove(); // add axis\n\n      if (props.axis) {\n        var markDates = props.markDates ? props.markDates.map(function (d) {\n          return dateParse(d);\n        }) : [dateSeries[0], dateSeries.slice(-1)[0]];\n        console.log(markDates);\n        var xAxis = chartDiv.appendSelect('svg').attr('width', width - props.margin.left - props.margin.right).attr('height', 25).attr('transform', 'translate(0, 0)');\n        xAxis.appendSelect('g.axis-x').attr('class', 'axis-x axis').transition(transition).attr('transform', 'translate(0,0)').call(_utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].axisBottom(xScale).tickValues(markDates).tickFormat(dateFormat));\n      } // chart legend\n\n\n      if (props.legendItems) {\n        var indexLegendItems = [];\n        Object.keys(props.legendItems.indexLegend).forEach(function (d) {\n          var item = {\n            key: d,\n            value: props.legendItems.indexLegend[d]\n          };\n          indexLegendItems.push(item);\n        });\n\n        if (props.legendItems[\"null\"]) {\n          indexLegendItems.push({\n            key: 'null',\n            value: props.legendItems[\"null\"]\n          });\n        }\n\n        var legendWidth = (width - props.margin.right - props.margin.left) / indexLegendItems.length; // make legend\n\n        var legendDiv = chartDiv.appendSelect('div.legend-container');\n        var indexLegend = legendDiv.appendSelect('div.legend.indexLegend') // .style('align-items', `${props.valign}`)\n        .selectAll('.legend-item').data(indexLegendItems); // for smooth data updation\n\n        indexLegend.enter().append('div').attr('class', 'legend-item').styles({\n          display: 'flex',\n          'align-items': 'start'\n        }) // .style('width', `${legendWidth}px`)\n        .html(function (d) {\n          var color = +d.key !== null && !isNaN(+d.key) ? props.stripColor[+d.key] : props.baseColor;\n          return \"<span style=\\\"width:1rem; height:1rem;min-width:1rem; min-height:1rem; background: \".concat(color, \"\\\"></span> <p style=\\\"margin:0 0 0 0.5rem;\\\">\").concat(d.value, \"</p>\");\n        }).merge(indexLegend).styles({\n          display: 'flex',\n          'align-items': 'start'\n        }).style('width', \"\".concat(legendWidth, \"px\")).html(function (d) {\n          var color = +d.key !== null && !isNaN(+d.key) ? props.stripColor[+d.key] : props.baseColor;\n          return \"<span style=\\\"width:1rem; height:1rem;min-width:1rem; min-height:1rem; background: \".concat(color, \"\\\"></span> <p style=\\\"margin:0 0 0 0.5rem;\\\">\").concat(d.value, \"</p>\");\n        });\n        indexLegend.exit().transition(transition).remove();\n\n        if (props.legendItems.stepLegend) {\n          // step legend stuff\n          var stepLegendItems = [];\n          Object.keys(props.legendItems.stepLegend).forEach(function (d) {\n            var item = {\n              key: d,\n              value: props.legendItems.stepLegend[d]\n            };\n            stepLegendItems.push(item);\n          });\n          console.log(stepLegendItems);\n          var stepLegend = legendDiv.appendSelect('div.legend.stepLegend').selectAll('.legend-item').data(stepLegendItems); // for smooth data updation\n\n          stepLegend.enter().append('div').attr('class', 'legend-item').styles({\n            display: 'flex',\n            'align-items': 'center'\n          }).html(function (d, i) {\n            var stepSize = stripheight / stepLegendItems.length;\n            return \"<span style=\\\"width:\".concat(8, \"px; height:\", (+d.key + 1) * stepSize, \"px; background:transparent; border: 0.5px solid #333333;\\\"></span><p style=\\\"margin:0 0 0 0.5rem;\\\">\").concat(d.value, \"</p>\");\n          }).merge(stepLegend).styles({\n            display: 'flex',\n            'align-items': 'center'\n          }).html(function (d, i) {\n            var stepSize = stripheight / stepLegendItems.length;\n            return \"<span style=\\\"width:\".concat(8, \"px; height:\", (+d.key + 1) * stepSize, \"px; background:transparent; border: 0.5px solid #333333;\\\"></span><p style=\\\"margin:0 0 0 0.5rem;\\\">\").concat(d.value, \"</p>\");\n          });\n          stepLegend.exit().transition(transition).remove();\n        }\n      }\n\n      return this;\n    }\n  }]);\n\n  return CountryLockdownIndicatorStrips;\n}(_base_ChartComponent__WEBPACK_IMPORTED_MODULE_7__[\"default\"]); // console.log(this.defaultProps);\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (CountryLockdownIndicatorStrips);\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports_1 = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports_1, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports_1)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports_1;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports_1)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NoYXJ0LmpzPzdiYjgiXSwibmFtZXMiOlsiZGF0ZVBhcnNlIiwiZDMiLCJ0aW1lUGFyc2UiLCJkYXRlRm9ybWF0IiwidGltZUZvcm1hdCIsImRhdGVGb3JtYXRfdHQiLCJudW1iZXJGb3JtYXRfdHQiLCJmb3JtYXQiLCJDb3VudHJ5TG9ja2Rvd25JbmRpY2F0b3JTdHJpcHMiLCJkYXRlU2VyaWVzIiwiZGF0YVBhcmFtcyIsImRhdGUiLCJpbmRleCIsInN0ZXBWYWx1ZSIsInN0ZXBzIiwiaGVpZ2h0Iiwic3RyaXBIZWlnaHQiLCJtYXJnaW4iLCJ0b3AiLCJyaWdodCIsImJvdHRvbSIsImxlZnQiLCJ2YWxpZ24iLCJiYXNlQ29sb3IiLCJzdHJpcENvbG9yIiwibGVnZW5kSXRlbXMiLCJzdGVwTGVnZW5kIiwiaW5kZXhMZWdlbmQiLCJheGlzIiwiZGVmYXVsdERhdGEiLCJhbGxEYXRhIiwiZGF0YSIsInByb3BzIiwibm9kZSIsInNlbGVjdGlvbiIsImxlbmd0aCIsImdldERhdGVzIiwibWFwIiwiZCIsIm1hdGNoIiwiZmluZCIsImUiLCJmb3JtYXREYXRlT2JqZWN0Iiwib2JqIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwid2lkdGgiLCJ0cmFuc2l0aW9uIiwiZHVyYXRpb24iLCJjaGFydERpdiIsImFwcGVuZFNlbGVjdCIsImF0dHIiLCJzdHlsZSIsInN0eWxlcyIsInN0cmlwaGVpZ2h0IiwieVNjYWxlIiwic2NhbGVMaW5lYXIiLCJkb21haW4iLCJyYW5nZSIsInhTY2FsZSIsInNjYWxlQmFuZCIsInBhZGRpbmciLCJjb2xvckRvbWFpbiIsIk9iamVjdCIsImtleXMiLCJleHRlbnQiLCJjb2xvclJhbmdlIiwiY29sb3JTY2FsZSIsImludGVycG9sYXRlIiwiaW50ZXJwb2xhdGVIY2wiLCJiYXJzIiwiZGlzcGxheSIsInNlbGVjdEFsbCIsImkiLCJlbnRlciIsImFwcGVuZCIsInN0ZXBTaXplIiwic3RlcCIsImJhbmR3aWR0aCIsInZhbCIsInBhcnNlRmxvYXQiLCJpc05hTiIsIm1lcmdlIiwiZXhpdCIsInJlbW92ZSIsIm1hcmtEYXRlcyIsInNsaWNlIiwiY29uc29sZSIsImxvZyIsInhBeGlzIiwiY2FsbCIsImF4aXNCb3R0b20iLCJ0aWNrVmFsdWVzIiwidGlja0Zvcm1hdCIsImluZGV4TGVnZW5kSXRlbXMiLCJmb3JFYWNoIiwiaXRlbSIsImtleSIsInZhbHVlIiwicHVzaCIsImxlZ2VuZFdpZHRoIiwibGVnZW5kRGl2IiwiaHRtbCIsImNvbG9yIiwic3RlcExlZ2VuZEl0ZW1zIiwiQ2hhcnRDb21wb25lbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUVBO0FBQ0E7QUFDQTs7QUFFQSxJQUFNQSxTQUFTLEdBQUdDLGlEQUFFLENBQUNDLFNBQUgsQ0FBYSxVQUFiLENBQWxCO0FBQ0EsSUFBTUMsVUFBVSxHQUFHRixpREFBRSxDQUFDRyxVQUFILENBQWMsT0FBZCxDQUFuQjtBQUNBLElBQU1DLGFBQWEsR0FBR0osaURBQUUsQ0FBQ0csVUFBSCxDQUFjLE9BQWQsQ0FBdEI7QUFDQSxJQUFNRSxlQUFlLEdBQUdMLGlEQUFFLENBQUNNLE1BQUgsQ0FBVSxHQUFWLENBQXhCOztJQUVNQyw4Qjs7Ozs7Ozs7Ozs7Ozs7Ozt1TkFDYTtBQUNiQyxnQkFBVSxFQUFFLENBQUMsWUFBRCxFQUFlLFlBQWYsQ0FEQztBQUM2QjtBQUMxQ0MsZ0JBQVUsRUFBRTtBQUNWQyxZQUFJLEVBQUUsTUFESTtBQUVWQyxhQUFLLEVBQUUsSUFGRztBQUdWQyxpQkFBUyxFQUFFLE1BSEQ7QUFJVkMsYUFBSyxFQUFFLENBSkcsQ0FJQTs7QUFKQSxPQUZDO0FBUWJDLFlBQU0sRUFBRSxHQVJLO0FBU2JDLGlCQUFXLEVBQUUsRUFUQTtBQVViQyxZQUFNLEVBQUU7QUFDTkMsV0FBRyxFQUFFLEVBREM7QUFFTkMsYUFBSyxFQUFFLEVBRkQ7QUFHTkMsY0FBTSxFQUFFLEVBSEY7QUFJTkMsWUFBSSxFQUFFO0FBSkEsT0FWSztBQWdCYkMsWUFBTSxFQUFFLFFBaEJLO0FBZ0JLO0FBQ2xCQyxlQUFTLEVBQUUsU0FqQkU7QUFrQmJDLGdCQUFVLEVBQUU7QUFBRTtBQUNaLFdBQUcsU0FETztBQUVWLFdBQUcsU0FGTztBQUdWLFdBQUcsUUFITztBQUlWLFdBQUc7QUFKTyxPQWxCQztBQXdCYkMsaUJBQVcsRUFBRTtBQUFFO0FBQ2IsZ0JBQU0sU0FESztBQUVYQyxrQkFBVSxFQUFFO0FBQ1YsYUFBRyxVQURPO0FBRVYsYUFBRztBQUZPLFNBRkQ7QUFNWEMsbUJBQVcsRUFBRTtBQUNYLGFBQUcsYUFEUTtBQUVYLGFBQUcsbUJBRlE7QUFHWCxhQUFHLGdDQUhRO0FBSVgsYUFBRztBQUpRO0FBTkYsT0F4QkE7QUFxQ2JDLFVBQUksRUFBRSxJQXJDTyxDQXNDYjs7QUF0Q2EsSzs7c05BeUNEQywrQzs7Ozs7OzsyQkFFUDtBQUNMLFVBQU1DLE9BQU8sR0FBRyxLQUFLQyxJQUFMLEVBQWhCO0FBQ0EsVUFBTUMsS0FBSyxHQUFHLEtBQUtBLEtBQUwsRUFBZDtBQUNBLFVBQU1DLElBQUksR0FBRyxLQUFLQyxTQUFMLEdBQWlCRCxJQUFqQixFQUFiOztBQUVBLFVBQUksQ0FBQ0QsS0FBSyxDQUFDdkIsVUFBWCxFQUF1QjtBQUNyQnVCLGFBQUssQ0FBQ3ZCLFVBQU4sR0FBbUIsQ0FBQ1QsU0FBUyxDQUFDOEIsT0FBTyxDQUFDLENBQUQsQ0FBUCxDQUFXbkIsSUFBWixDQUFWLEVBQTZCWCxTQUFTLENBQUM4QixPQUFPLENBQUNBLE9BQU8sQ0FBQ0ssTUFBUixHQUFpQixDQUFsQixDQUFQLENBQTRCeEIsSUFBN0IsQ0FBdEMsQ0FBbkI7QUFDRDs7QUFDRCxVQUFNRixVQUFVLEdBQUcyQiw2REFBUSxDQUFDSixLQUFLLENBQUN2QixVQUFOLENBQWlCLENBQWpCLENBQUQsRUFBc0J1QixLQUFLLENBQUN2QixVQUFOLENBQWlCLENBQWpCLENBQXRCLENBQTNCLENBUkssQ0FTTDtBQUVBOztBQUNBLFVBQU1zQixJQUFJLEdBQUd0QixVQUFVLENBQUM0QixHQUFYLENBQWUsVUFBQ0MsQ0FBRCxFQUFPO0FBQ2pDLFlBQU1DLEtBQUssR0FBR1QsT0FBTyxDQUFDVSxJQUFSLENBQWEsVUFBQ0MsQ0FBRDtBQUFBLGlCQUFRQSxDQUFDLENBQUNULEtBQUssQ0FBQ3RCLFVBQU4sQ0FBaUJDLElBQWxCLENBQUYsS0FBZ0MrQixxRUFBZ0IsQ0FBQ0osQ0FBRCxDQUF2RDtBQUFBLFNBQWIsQ0FBZDs7QUFDQSxZQUFJQyxLQUFKLEVBQVc7QUFDVCxpQkFBT0EsS0FBUDtBQUNELFNBRkQsTUFFTztBQUNMLGNBQU1JLEdBQUcsR0FBRyxFQUFaO0FBQ0FBLGFBQUcsQ0FBQ1gsS0FBSyxDQUFDdEIsVUFBTixDQUFpQkMsSUFBbEIsQ0FBSCxHQUE2QitCLHFFQUFnQixDQUFDSixDQUFELENBQTdDO0FBQ0EsaUJBQU9LLEdBQVA7QUFDRDtBQUNGLE9BVFksQ0FBYixDQVpLLENBdUJMO0FBQ0E7O0FBeEJLLGtDQTRCRFYsSUFBSSxDQUFDVyxxQkFBTCxFQTVCQztBQUFBLFVBMkJIQyxLQTNCRyx5QkEyQkhBLEtBM0JHOztBQThCTCxVQUFNQyxVQUFVLEdBQUc3QyxpREFBRSxDQUFDNkMsVUFBSCxHQUNoQkMsUUFEZ0IsQ0FDUCxHQURPLENBQW5CLENBOUJLLENBaUNMOztBQUNBLFVBQU1DLFFBQVEsR0FBRyxLQUFLZCxTQUFMLEdBQ2RlLFlBRGMsQ0FDRCxLQURDLEVBQ007QUFETixPQUVkQyxJQUZjLENBRVQsT0FGUyxFQUVBLGdDQUZBLEVBR2RDLEtBSGMsQ0FHUixPQUhRLFlBR0lOLEtBSEosU0FJakI7QUFKaUIsT0FLZEksWUFMYyxDQUtELEtBTEMsRUFNZEcsTUFOYyxDQU1QO0FBQ04saUNBQWtCcEIsS0FBSyxDQUFDZixNQUFOLENBQWFDLEdBQS9CLE9BRE07QUFFTixtQ0FBb0JjLEtBQUssQ0FBQ2YsTUFBTixDQUFhRSxLQUFqQyxPQUZNO0FBR04sb0NBQXFCYSxLQUFLLENBQUNmLE1BQU4sQ0FBYUcsTUFBbEMsT0FITTtBQUlOLGtDQUFtQlksS0FBSyxDQUFDZixNQUFOLENBQWFJLElBQWhDO0FBSk0sT0FOTyxDQUFqQjtBQWFBLFVBQU1nQyxXQUFXLEdBQUdyQixLQUFLLENBQUNQLFdBQU4sR0FBcUJPLEtBQUssQ0FBQ2hCLFdBQU4sR0FBb0JnQixLQUFLLENBQUNmLE1BQU4sQ0FBYUMsR0FBdEQsR0FBOERjLEtBQUssQ0FBQ2pCLE1BQU4sR0FBZWlCLEtBQUssQ0FBQ2YsTUFBTixDQUFhQyxHQUE1QixHQUFrQ2MsS0FBSyxDQUFDZixNQUFOLENBQWFHLE1BQWpJLENBL0NLLENBaURMOztBQUNBLFVBQU1rQyxNQUFNLEdBQUdyRCxpREFBRSxDQUFDc0QsV0FBSCxHQUNaQyxNQURZLENBQ0wsQ0FBQyxDQUFELEVBQUl4QixLQUFLLENBQUN0QixVQUFOLENBQWlCSSxLQUFqQixHQUF5QixDQUE3QixDQURLLEVBRVoyQyxLQUZZLENBRU4sQ0FBQ0osV0FBRCxFQUFjckIsS0FBSyxDQUFDZixNQUFOLENBQWFDLEdBQTNCLENBRk0sQ0FBZjtBQUlBLFVBQU13QyxNQUFNLEdBQUd6RCxpREFBRSxDQUFDMEQsU0FBSCxHQUNaSCxNQURZLENBQ0wvQyxVQURLLEVBRVpnRCxLQUZZLENBRU4sQ0FBQyxDQUFELEVBQUlaLEtBQUssR0FBR2IsS0FBSyxDQUFDZixNQUFOLENBQWFJLElBQXJCLEdBQTRCVyxLQUFLLENBQUNmLE1BQU4sQ0FBYUUsS0FBN0MsQ0FGTSxFQUdaeUMsT0FIWSxDQUdKLENBSEksQ0FBZjtBQUtBLFVBQU1DLFdBQVcsR0FBRzdCLEtBQUssQ0FBQ1IsVUFBTixHQUFvQnNDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZL0IsS0FBSyxDQUFDUixVQUFsQixDQUFELENBQWdDYSxHQUFoQyxDQUFvQyxVQUFBQyxDQUFDO0FBQUEsZUFBSSxDQUFDQSxDQUFMO0FBQUEsT0FBckMsQ0FBbkIsR0FBa0VyQyxpREFBRSxDQUFDK0QsTUFBSCxDQUFVakMsSUFBSSxDQUFDTSxHQUFMLENBQVMsVUFBQUMsQ0FBQztBQUFBLGVBQUlBLENBQUMsQ0FBQ04sS0FBSyxDQUFDdEIsVUFBTixDQUFpQkUsS0FBbEIsQ0FBTDtBQUFBLE9BQVYsQ0FBVixDQUF0RjtBQUVBLFVBQU1xRCxVQUFVLEdBQUdqQyxLQUFLLENBQUNSLFVBQU4sR0FBbUJxQyxXQUFXLENBQUN4QixHQUFaLENBQWdCLFVBQUFDLENBQUM7QUFBQSxlQUFJTixLQUFLLENBQUNSLFVBQU4sV0FBb0JjLENBQXBCLEVBQUo7QUFBQSxPQUFqQixDQUFuQixHQUFvRSxDQUFDLFNBQUQsRUFBWSxTQUFaLENBQXZGO0FBRUEsVUFBTTRCLFVBQVUsR0FBR2pFLGlEQUFFLENBQUNzRCxXQUFILEdBQ2hCQyxNQURnQixDQUNUSyxXQURTLEVBRWhCSixLQUZnQixDQUVWUSxVQUZVLEVBR2hCRSxXQUhnQixDQUdKQyxrREFISSxDQUFuQixDQS9ESyxDQW9FTDs7QUFDQSxVQUFNQyxJQUFJLEdBQUdyQixRQUFRLENBQUNDLFlBQVQsQ0FBc0Isb0JBQXRCLEVBQ1ZHLE1BRFUsQ0FDSDtBQUNOa0IsZUFBTyxFQUFFLE1BREg7QUFFTixpQ0FBa0J0QyxLQUFLLENBQUNWLE1BQXhCO0FBRk0sT0FERyxFQUtWaUQsU0FMVSxDQUtBLE1BTEEsRUFNVnhDLElBTlUsQ0FNTEEsSUFOSyxFQU1DLFVBQUNPLENBQUQsRUFBSWtDLENBQUo7QUFBQSxlQUFVbEMsQ0FBQyxDQUFDTixLQUFLLENBQUN0QixVQUFOLENBQWlCQyxJQUFsQixDQUFYO0FBQUEsT0FORCxDQUFiLENBckVLLENBMkU4Qzs7QUFFbkQwRCxVQUFJLENBQUNJLEtBQUwsR0FBYUMsTUFBYixDQUFvQixLQUFwQixFQUNHeEIsSUFESCxDQUNRLE9BRFIsRUFDaUIsVUFBQVosQ0FBQztBQUFBLDZCQUFXQSxDQUFDLENBQUNOLEtBQUssQ0FBQ3RCLFVBQU4sQ0FBaUJDLElBQWxCLENBQVo7QUFBQSxPQURsQixFQUVHd0MsS0FGSCxDQUVTLFNBRlQsRUFFb0IsY0FGcEIsRUFHR0EsS0FISCxDQUdTLFFBSFQsRUFHbUIsVUFBQWIsQ0FBQyxFQUFJO0FBQ3BCLFlBQU1xQyxRQUFRLEdBQUl0QixXQUFELEdBQWdCckIsS0FBSyxDQUFDdEIsVUFBTixDQUFpQkksS0FBbEQ7QUFDQSxZQUFNOEQsSUFBSSxHQUFHdEMsQ0FBQyxDQUFDTixLQUFLLENBQUN0QixVQUFOLENBQWlCRyxTQUFsQixDQUFELEdBQWdDLENBQTdDO0FBQ0EsZUFBT3lCLENBQUMsQ0FBQ04sS0FBSyxDQUFDdEIsVUFBTixDQUFpQkUsS0FBbEIsQ0FBRCxHQUE2QmdFLElBQUksR0FBR0EsSUFBSSxHQUFHRCxRQUFQLEdBQWtCLElBQXJCLEdBQTRCQSxRQUFRLEdBQUcsSUFBeEUsR0FBZ0ZBLFFBQVEsR0FBRyxJQUFsRztBQUNELE9BUEgsRUFRR3hCLEtBUkgsQ0FRUyxPQVJULEVBUWtCTyxNQUFNLENBQUNtQixTQUFQLEtBQXFCLElBUnZDLEVBU0cxQixLQVRILENBU1MsWUFUVCxFQVN1QixVQUFBYixDQUFDLEVBQUk7QUFDeEIsWUFBTXdDLEdBQUcsR0FBR0MsVUFBVSxDQUFDekMsQ0FBQyxDQUFDTixLQUFLLENBQUN0QixVQUFOLENBQWlCRSxLQUFsQixDQUFGLENBQXRCO0FBQ0EsZUFBUWtFLEdBQUcsS0FBSyxJQUFULElBQWtCLENBQUVFLEtBQUssQ0FBQ0YsR0FBRCxDQUF6QixHQUFrQ1osVUFBVSxDQUFDWSxHQUFELENBQTVDLEdBQW9EOUMsS0FBSyxDQUFDVCxTQUFqRTtBQUNELE9BWkgsRUFhRzBELEtBYkgsQ0FhU1osSUFiVCxFQWNHdkIsVUFkSCxDQWNjQSxVQWRkLEVBZUdLLEtBZkgsQ0FlUyxTQWZULEVBZW9CLGNBZnBCLEVBZ0JHQSxLQWhCSCxDQWdCUyxRQWhCVCxFQWdCbUIsVUFBQWIsQ0FBQyxFQUFJO0FBQ3BCLFlBQU1xQyxRQUFRLEdBQUl0QixXQUFELEdBQWdCckIsS0FBSyxDQUFDdEIsVUFBTixDQUFpQkksS0FBbEQ7QUFDQSxZQUFNOEQsSUFBSSxHQUFHdEMsQ0FBQyxDQUFDTixLQUFLLENBQUN0QixVQUFOLENBQWlCRyxTQUFsQixDQUFELEdBQWdDLENBQTdDO0FBQ0EsZUFBT3lCLENBQUMsQ0FBQ04sS0FBSyxDQUFDdEIsVUFBTixDQUFpQkUsS0FBbEIsQ0FBRCxHQUE2QmdFLElBQUksR0FBR0EsSUFBSSxHQUFHRCxRQUFQLEdBQWtCLElBQXJCLEdBQTRCQSxRQUFRLEdBQUcsSUFBeEUsR0FBZ0ZBLFFBQVEsR0FBRyxJQUFsRztBQUNELE9BcEJILEVBcUJHeEIsS0FyQkgsQ0FxQlMsT0FyQlQsRUFxQmtCTyxNQUFNLENBQUNtQixTQUFQLEtBQXFCLElBckJ2QyxFQXNCRzFCLEtBdEJILENBc0JTLFlBdEJULEVBc0J1QixVQUFBYixDQUFDLEVBQUk7QUFDeEIsWUFBTXdDLEdBQUcsR0FBR0MsVUFBVSxDQUFDekMsQ0FBQyxDQUFDTixLQUFLLENBQUN0QixVQUFOLENBQWlCRSxLQUFsQixDQUFGLENBQXRCO0FBQ0EsZUFBUWtFLEdBQUcsS0FBSyxJQUFULElBQWtCLENBQUVFLEtBQUssQ0FBQ0YsR0FBRCxDQUF6QixHQUFrQ1osVUFBVSxDQUFDWSxHQUFELENBQTVDLEdBQW9EOUMsS0FBSyxDQUFDVCxTQUFqRTtBQUNELE9BekJIO0FBMkJBOEMsVUFBSSxDQUFDYSxJQUFMLEdBQ0dwQyxVQURILENBQ2NBLFVBRGQsRUFFR0ksSUFGSCxDQUVRLFFBRlIsRUFFa0IsQ0FGbEIsRUFHR2lDLE1BSEgsR0F4R0ssQ0E2R0w7O0FBQ0EsVUFBSW5ELEtBQUssQ0FBQ0osSUFBVixFQUFnQjtBQUNkLFlBQU13RCxTQUFTLEdBQUdwRCxLQUFLLENBQUNvRCxTQUFOLEdBQWtCcEQsS0FBSyxDQUFDb0QsU0FBTixDQUFnQi9DLEdBQWhCLENBQW9CLFVBQUFDLENBQUM7QUFBQSxpQkFBSXRDLFNBQVMsQ0FBQ3NDLENBQUQsQ0FBYjtBQUFBLFNBQXJCLENBQWxCLEdBQTJELENBQUM3QixVQUFVLENBQUMsQ0FBRCxDQUFYLEVBQWdCQSxVQUFVLENBQUM0RSxLQUFYLENBQWlCLENBQUMsQ0FBbEIsRUFBcUIsQ0FBckIsQ0FBaEIsQ0FBN0U7QUFFQUMsZUFBTyxDQUFDQyxHQUFSLENBQVlILFNBQVo7QUFFQSxZQUFNSSxLQUFLLEdBQUd4QyxRQUFRLENBQUNDLFlBQVQsQ0FBc0IsS0FBdEIsRUFDWEMsSUFEVyxDQUNOLE9BRE0sRUFDR0wsS0FBSyxHQUFHYixLQUFLLENBQUNmLE1BQU4sQ0FBYUksSUFBckIsR0FBNEJXLEtBQUssQ0FBQ2YsTUFBTixDQUFhRSxLQUQ1QyxFQUVYK0IsSUFGVyxDQUVOLFFBRk0sRUFFSSxFQUZKLEVBR1hBLElBSFcsQ0FHTixXQUhNLEVBR08saUJBSFAsQ0FBZDtBQUtBc0MsYUFBSyxDQUFDdkMsWUFBTixDQUFtQixVQUFuQixFQUNHQyxJQURILENBQ1EsT0FEUixFQUNpQixhQURqQixFQUVHSixVQUZILENBRWNBLFVBRmQsRUFHR0ksSUFISCxDQUdRLFdBSFIsRUFHcUIsZ0JBSHJCLEVBSUd1QyxJQUpILENBS0l4RixpREFBRSxDQUFDeUYsVUFBSCxDQUFjaEMsTUFBZCxFQUNHaUMsVUFESCxDQUNjUCxTQURkLEVBRUdRLFVBRkgsQ0FFY3pGLFVBRmQsQ0FMSjtBQVNELE9BaklJLENBbUlMOzs7QUFDQSxVQUFJNkIsS0FBSyxDQUFDUCxXQUFWLEVBQXVCO0FBQ3JCLFlBQU1vRSxnQkFBZ0IsR0FBRyxFQUF6QjtBQUNDL0IsY0FBTSxDQUFDQyxJQUFQLENBQVkvQixLQUFLLENBQUNQLFdBQU4sQ0FBa0JFLFdBQTlCLENBQUQsQ0FBNkNtRSxPQUE3QyxDQUFxRCxVQUFBeEQsQ0FBQyxFQUFJO0FBQ3hELGNBQU15RCxJQUFJLEdBQUc7QUFDWEMsZUFBRyxFQUFFMUQsQ0FETTtBQUVYMkQsaUJBQUssRUFBRWpFLEtBQUssQ0FBQ1AsV0FBTixDQUFrQkUsV0FBbEIsQ0FBOEJXLENBQTlCO0FBRkksV0FBYjtBQUlBdUQsMEJBQWdCLENBQUNLLElBQWpCLENBQXNCSCxJQUF0QjtBQUNELFNBTkQ7O0FBT0EsWUFBSS9ELEtBQUssQ0FBQ1AsV0FBTixRQUFKLEVBQTRCO0FBQzFCb0UsMEJBQWdCLENBQUNLLElBQWpCLENBQXNCO0FBQ3BCRixlQUFHLEVBQUUsTUFEZTtBQUVwQkMsaUJBQUssRUFBRWpFLEtBQUssQ0FBQ1AsV0FBTjtBQUZhLFdBQXRCO0FBSUQ7O0FBQ0QsWUFBTTBFLFdBQVcsR0FBRyxDQUFDdEQsS0FBSyxHQUFHYixLQUFLLENBQUNmLE1BQU4sQ0FBYUUsS0FBckIsR0FBNkJhLEtBQUssQ0FBQ2YsTUFBTixDQUFhSSxJQUEzQyxJQUFtRHdFLGdCQUFnQixDQUFDMUQsTUFBeEYsQ0FmcUIsQ0FpQnJCOztBQUNBLFlBQU1pRSxTQUFTLEdBQUdwRCxRQUFRLENBQUNDLFlBQVQsQ0FBc0Isc0JBQXRCLENBQWxCO0FBRUEsWUFBTXRCLFdBQVcsR0FBR3lFLFNBQVMsQ0FBQ25ELFlBQVYsQ0FBdUIsd0JBQXZCLEVBQ3BCO0FBRG9CLFNBRWpCc0IsU0FGaUIsQ0FFUCxjQUZPLEVBR2pCeEMsSUFIaUIsQ0FHWjhELGdCQUhZLENBQXBCLENBcEJxQixDQXVCTTs7QUFFM0JsRSxtQkFBVyxDQUFDOEMsS0FBWixHQUFvQkMsTUFBcEIsQ0FBMkIsS0FBM0IsRUFDR3hCLElBREgsQ0FDUSxPQURSLEVBQ2lCLGFBRGpCLEVBRUdFLE1BRkgsQ0FFVTtBQUNOa0IsaUJBQU8sRUFBRSxNQURIO0FBRU4seUJBQWU7QUFGVCxTQUZWLEVBTUE7QUFOQSxTQU9HK0IsSUFQSCxDQU9RLFVBQUEvRCxDQUFDLEVBQUk7QUFDVCxjQUFNZ0UsS0FBSyxHQUFJLENBQUNoRSxDQUFDLENBQUMwRCxHQUFILEtBQVcsSUFBWixJQUFxQixDQUFFaEIsS0FBSyxDQUFDLENBQUMxQyxDQUFDLENBQUMwRCxHQUFKLENBQTVCLEdBQXdDaEUsS0FBSyxDQUFDUixVQUFOLENBQWlCLENBQUNjLENBQUMsQ0FBQzBELEdBQXBCLENBQXhDLEdBQW1FaEUsS0FBSyxDQUFDVCxTQUF2RjtBQUNBLDhHQUE0RitFLEtBQTVGLDBEQUE4SWhFLENBQUMsQ0FBQzJELEtBQWhKO0FBQ0QsU0FWSCxFQVdHaEIsS0FYSCxDQVdTdEQsV0FYVCxFQVlHeUIsTUFaSCxDQVlVO0FBQ05rQixpQkFBTyxFQUFFLE1BREg7QUFFTix5QkFBZTtBQUZULFNBWlYsRUFnQkduQixLQWhCSCxDQWdCUyxPQWhCVCxZQWdCcUJnRCxXQWhCckIsU0FpQkdFLElBakJILENBaUJRLFVBQUEvRCxDQUFDLEVBQUk7QUFDVCxjQUFNZ0UsS0FBSyxHQUFJLENBQUNoRSxDQUFDLENBQUMwRCxHQUFILEtBQVcsSUFBWixJQUFxQixDQUFFaEIsS0FBSyxDQUFDLENBQUMxQyxDQUFDLENBQUMwRCxHQUFKLENBQTVCLEdBQXdDaEUsS0FBSyxDQUFDUixVQUFOLENBQWlCLENBQUNjLENBQUMsQ0FBQzBELEdBQXBCLENBQXhDLEdBQW1FaEUsS0FBSyxDQUFDVCxTQUF2RjtBQUNBLDhHQUE0RitFLEtBQTVGLDBEQUE4SWhFLENBQUMsQ0FBQzJELEtBQWhKO0FBQ0QsU0FwQkg7QUFzQkF0RSxtQkFBVyxDQUFDdUQsSUFBWixHQUNHcEMsVUFESCxDQUNjQSxVQURkLEVBRUdxQyxNQUZIOztBQUlBLFlBQUluRCxLQUFLLENBQUNQLFdBQU4sQ0FBa0JDLFVBQXRCLEVBQWtDO0FBQ2hDO0FBQ0EsY0FBTTZFLGVBQWUsR0FBRyxFQUF4QjtBQUNDekMsZ0JBQU0sQ0FBQ0MsSUFBUCxDQUFZL0IsS0FBSyxDQUFDUCxXQUFOLENBQWtCQyxVQUE5QixDQUFELENBQTRDb0UsT0FBNUMsQ0FBb0QsVUFBQXhELENBQUMsRUFBSTtBQUN2RCxnQkFBTXlELElBQUksR0FBRztBQUNYQyxpQkFBRyxFQUFFMUQsQ0FETTtBQUVYMkQsbUJBQUssRUFBRWpFLEtBQUssQ0FBQ1AsV0FBTixDQUFrQkMsVUFBbEIsQ0FBNkJZLENBQTdCO0FBRkksYUFBYjtBQUlBaUUsMkJBQWUsQ0FBQ0wsSUFBaEIsQ0FBcUJILElBQXJCO0FBQ0QsV0FORDtBQU9BVCxpQkFBTyxDQUFDQyxHQUFSLENBQVlnQixlQUFaO0FBRUEsY0FBTTdFLFVBQVUsR0FBRzBFLFNBQVMsQ0FBQ25ELFlBQVYsQ0FBdUIsdUJBQXZCLEVBQ2hCc0IsU0FEZ0IsQ0FDTixjQURNLEVBRWhCeEMsSUFGZ0IsQ0FFWHdFLGVBRlcsQ0FBbkIsQ0FaZ0MsQ0FjTjs7QUFFMUI3RSxvQkFBVSxDQUFDK0MsS0FBWCxHQUFtQkMsTUFBbkIsQ0FBMEIsS0FBMUIsRUFDR3hCLElBREgsQ0FDUSxPQURSLEVBQ2lCLGFBRGpCLEVBRUdFLE1BRkgsQ0FFVTtBQUNOa0IsbUJBQU8sRUFBRSxNQURIO0FBRU4sMkJBQWU7QUFGVCxXQUZWLEVBTUcrQixJQU5ILENBTVEsVUFBQy9ELENBQUQsRUFBSWtDLENBQUosRUFBVTtBQUNkLGdCQUFNRyxRQUFRLEdBQUl0QixXQUFELEdBQWdCa0QsZUFBZSxDQUFDcEUsTUFBakQ7QUFDQSxpREFBNkIsQ0FBN0IsaUJBQTRDLENBQUUsQ0FBQ0csQ0FBQyxDQUFDMEQsR0FBSixHQUFXLENBQVosSUFBaUJyQixRQUE3RCxpSEFBeUtyQyxDQUFDLENBQUMyRCxLQUEzSztBQUNELFdBVEgsRUFVR2hCLEtBVkgsQ0FVU3ZELFVBVlQsRUFXRzBCLE1BWEgsQ0FXVTtBQUNOa0IsbUJBQU8sRUFBRSxNQURIO0FBRU4sMkJBQWU7QUFGVCxXQVhWLEVBZUcrQixJQWZILENBZVEsVUFBQy9ELENBQUQsRUFBSWtDLENBQUosRUFBVTtBQUNkLGdCQUFNRyxRQUFRLEdBQUl0QixXQUFELEdBQWdCa0QsZUFBZSxDQUFDcEUsTUFBakQ7QUFDQSxpREFBNkIsQ0FBN0IsaUJBQTRDLENBQUUsQ0FBQ0csQ0FBQyxDQUFDMEQsR0FBSixHQUFXLENBQVosSUFBaUJyQixRQUE3RCxpSEFBeUtyQyxDQUFDLENBQUMyRCxLQUEzSztBQUNELFdBbEJIO0FBb0JBdkUsb0JBQVUsQ0FBQ3dELElBQVgsR0FDR3BDLFVBREgsQ0FDY0EsVUFEZCxFQUVHcUMsTUFGSDtBQUdEO0FBQ0Y7O0FBQ0QsYUFBTyxJQUFQO0FBQ0Q7Ozs7RUE3UXdDcUIsNEQsR0ErUTdDOzs7QUFDZWhHLDZGQUFmIiwiZmlsZSI6Ii4vc3JjL2xpYi9jaGFydC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIG5vLXRyYWlsaW5nLXNwYWNlcyAqL1xuaW1wb3J0IENoYXJ0Q29tcG9uZW50IGZyb20gJy4vYmFzZS9DaGFydENvbXBvbmVudCc7XG5pbXBvcnQgZDMgZnJvbSAnLi91dGlscy9kMyc7XG5pbXBvcnQgeyBnZXREYXRlcywgZm9ybWF0RGF0ZU9iamVjdCB9IGZyb20gJy4vdXRpbHMvdXRpbHMnO1xuaW1wb3J0IGRlZmF1bHREYXRhIGZyb20gJy4vZGVmYXVsdERhdGEuanNvbic7XG5pbXBvcnQgeyBpbnRlcnBvbGF0ZUhjbCB9IGZyb20gJ2QzJztcbmltcG9ydCBkM1NlbGVjdGlvbk11bHRpIGZyb20gJ2QzLXNlbGVjdGlvbi1tdWx0aSc7XG4vLyBzZWUgZG9jcyBvbiBodHRwczovL2dpdGh1Yi5jb20vcmV1dGVycy1ncmFwaGljcy9ncmFwaGljcy1hdGxhcy1jbGllbnRcbi8vIGltcG9ydCBBdGxhc01ldGFkYXRhQ2xpZW50IGZyb20gJ0ByZXV0ZXJzLWdyYXBoaWNzL2dyYXBoaWNzLWF0bGFzLWNsaWVudCc7XG4vLyBjb25zdCBhdGxhc3RDbGllbnQgPSBuZXcgQXRsYXNNZXRhZGF0YUNsaWVudCgpO1xuXG5jb25zdCBkYXRlUGFyc2UgPSBkMy50aW1lUGFyc2UoJyVZLSVtLSVkJyk7XG5jb25zdCBkYXRlRm9ybWF0ID0gZDMudGltZUZvcm1hdCgnJWIgJWUnKTtcbmNvbnN0IGRhdGVGb3JtYXRfdHQgPSBkMy50aW1lRm9ybWF0KCclQiAlZScpO1xuY29uc3QgbnVtYmVyRm9ybWF0X3R0ID0gZDMuZm9ybWF0KCcsJyk7XG5cbmNsYXNzIENvdW50cnlMb2NrZG93bkluZGljYXRvclN0cmlwcyBleHRlbmRzIENoYXJ0Q29tcG9uZW50IHtcbiAgICBkZWZhdWx0UHJvcHMgPSB7XG4gICAgICBkYXRlU2VyaWVzOiBbJzIwMTktMTItMzEnLCAnMjAyMC0wNy0xMSddLCAvLyB5eXl5LW1tLWRkIGZvcm1hdFxuICAgICAgZGF0YVBhcmFtczoge1xuICAgICAgICBkYXRlOiAnZGF0ZScsXG4gICAgICAgIGluZGV4OiAnYzEnLFxuICAgICAgICBzdGVwVmFsdWU6ICdmbGFnJyxcbiAgICAgICAgc3RlcHM6IDIsIC8vIHN0ZXBWYWx1ZSA9IDAsIDEuLi5cbiAgICAgIH0sXG4gICAgICBoZWlnaHQ6IDE1MCxcbiAgICAgIHN0cmlwSGVpZ2h0OiA1MCxcbiAgICAgIG1hcmdpbjoge1xuICAgICAgICB0b3A6IDEwLFxuICAgICAgICByaWdodDogMTYsXG4gICAgICAgIGJvdHRvbTogMTAsXG4gICAgICAgIGxlZnQ6IDE2LFxuICAgICAgfSxcbiAgICAgIHZhbGlnbjogJ2NlbnRlcicsIC8vIHN0YXJ0LCBjZW50ZXIsIGJhc2VsaW5lXG4gICAgICBiYXNlQ29sb3I6ICcjRUNFRkY0JyxcbiAgICAgIHN0cmlwQ29sb3I6IHsgLy8gc2hvdWxkIGJlIG51bWVyaWMgdmFsdWVzIHRoYXQgYXJlIG1hcHBlZCBmcm9tIHRoZSBkYXRhXG4gICAgICAgIDA6ICcjZDFlZWVhJyxcbiAgICAgICAgMTogJyNmZmU0N2YnLFxuICAgICAgICAyOiAnb3JhbmdlJyxcbiAgICAgICAgMzogJyNhNTBmMTUnLFxuICAgICAgfSxcbiAgICAgIGxlZ2VuZEl0ZW1zOiB7IC8vIHNob3VsZCBjb250YWluIGl0ZW1zIGZyb20gc3RyaXBDb2xvclxuICAgICAgICBudWxsOiAnbm8gZGF0YScsXG4gICAgICAgIHN0ZXBMZWdlbmQ6IHtcbiAgICAgICAgICAwOiAndGFyZ2V0ZWQnLFxuICAgICAgICAgIDE6ICduYXRpb253aWRlJyxcbiAgICAgICAgfSxcbiAgICAgICAgaW5kZXhMZWdlbmQ6IHtcbiAgICAgICAgICAwOiAnbm8gbWVhc3VyZXMnLFxuICAgICAgICAgIDE6ICdyZWNvbW1lbmQgY2xvc2luZycsXG4gICAgICAgICAgMjogJ3JlcXVpcmUgY2xvc2luZyBvbiBzb21lIGxldmVscycsXG4gICAgICAgICAgMzogJ3JlcXVpcmUgY2xvc2luZyBhbGwgbGV2ZWxzJyxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICBheGlzOiB0cnVlLFxuICAgICAgLy8gbWFya0RhdGVzOiBbJzIwMTktMTItMzEnLCAnMjAyMC0wMy0yNScsICcyMDIwLTA3LTEwJ10sIC8vIHl5eXktbW0tZGRkZFxuICAgIH07XG5cbiAgICBkZWZhdWx0RGF0YSA9IGRlZmF1bHREYXRhO1xuXG4gICAgZHJhdygpIHtcbiAgICAgIGNvbnN0IGFsbERhdGEgPSB0aGlzLmRhdGEoKTtcbiAgICAgIGNvbnN0IHByb3BzID0gdGhpcy5wcm9wcygpO1xuICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuc2VsZWN0aW9uKCkubm9kZSgpO1xuXG4gICAgICBpZiAoIXByb3BzLmRhdGVTZXJpZXMpIHtcbiAgICAgICAgcHJvcHMuZGF0ZVNlcmllcyA9IFtkYXRlUGFyc2UoYWxsRGF0YVswXS5kYXRlKSwgZGF0ZVBhcnNlKGFsbERhdGFbYWxsRGF0YS5sZW5ndGggLSAxXS5kYXRlKV07XG4gICAgICB9XG4gICAgICBjb25zdCBkYXRlU2VyaWVzID0gZ2V0RGF0ZXMocHJvcHMuZGF0ZVNlcmllc1swXSwgcHJvcHMuZGF0ZVNlcmllc1sxXSk7ICAgXG4gICAgICAvLyBjb25zb2xlLmxvZygoZGF0ZVNlcmllcykpO1xuICAgICAgXG4gICAgICAvLyBzZXQgZGF0YSBmb3IgdGhlIGRhdGUgc2VyaWVzXG4gICAgICBjb25zdCBkYXRhID0gZGF0ZVNlcmllcy5tYXAoKGQpID0+IHtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSBhbGxEYXRhLmZpbmQoKGUpID0+IChlW3Byb3BzLmRhdGFQYXJhbXMuZGF0ZV0pID09PSAoZm9ybWF0RGF0ZU9iamVjdChkKSkpO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgICAgb2JqW3Byb3BzLmRhdGFQYXJhbXMuZGF0ZV0gPSBmb3JtYXREYXRlT2JqZWN0KGQpO1xuICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cbiAgICAgIH0pOyBcblxuICAgICAgLy8gZ2V0IGNvdW50cnkgZGV0YWlscyBmcm9tIEF0bGFzQ2xpZW50IGZyb20gSVNPLTJcbiAgICAgIC8vIHByb3BzLmNvdW50cnkgPSBhdGxhc3RDbGllbnQuZ2V0Q291bnRyeShwcm9wcy5jb3VudHJ5SVNPMik7XG5cbiAgICAgIGNvbnN0IHtcbiAgICAgICAgd2lkdGgsXG4gICAgICB9ID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgY29uc3QgdHJhbnNpdGlvbiA9IGQzLnRyYW5zaXRpb24oKVxuICAgICAgICAuZHVyYXRpb24oNzUwKTtcblxuICAgICAgLy8gbWFpbiBjaGFydCBjb250YWluZXJcbiAgICAgIGNvbnN0IGNoYXJ0RGl2ID0gdGhpcy5zZWxlY3Rpb24oKVxuICAgICAgICAuYXBwZW5kU2VsZWN0KCdkaXYnKSAvLyBzZWUgZG9jcyBpbiAuL3V0aWxzL2QzLmpzXG4gICAgICAgIC5hdHRyKCdjbGFzcycsICdDb3VudHJ5TG9ja2Rvd25JbmRpY2F0b3JTdHJpcHMnKVxuICAgICAgICAuc3R5bGUoJ3dpZHRoJywgYCR7d2lkdGh9cHhgKVxuICAgICAgLy8gLnN0eWxlKCdoZWlnaHQnLCBgJHtwcm9wcy5oZWlnaHR9cHhgKVxuICAgICAgICAuYXBwZW5kU2VsZWN0KCdkaXYnKVxuICAgICAgICAuc3R5bGVzKHtcbiAgICAgICAgICAncGFkZGluZy10b3AnOiBgJHtwcm9wcy5tYXJnaW4udG9wfXB4YCxcbiAgICAgICAgICAncGFkZGluZy1yaWdodCc6IGAke3Byb3BzLm1hcmdpbi5yaWdodH1weGAsXG4gICAgICAgICAgJ3BhZGRpbmctYm90dG9tJzogYCR7cHJvcHMubWFyZ2luLmJvdHRvbX1weGAsXG4gICAgICAgICAgJ3BhZGRpbmctbGVmdCc6IGAke3Byb3BzLm1hcmdpbi5sZWZ0fXB4YCxcbiAgICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHN0cmlwaGVpZ2h0ID0gcHJvcHMubGVnZW5kSXRlbXMgPyAocHJvcHMuc3RyaXBIZWlnaHQgLSBwcm9wcy5tYXJnaW4udG9wKSA6IChwcm9wcy5oZWlnaHQgLSBwcm9wcy5tYXJnaW4udG9wIC0gcHJvcHMubWFyZ2luLmJvdHRvbSk7XG5cbiAgICAgIC8vIHNldCBzY2FsZXNcbiAgICAgIGNvbnN0IHlTY2FsZSA9IGQzLnNjYWxlTGluZWFyKClcbiAgICAgICAgLmRvbWFpbihbMCwgcHJvcHMuZGF0YVBhcmFtcy5zdGVwcyAtIDFdKVxuICAgICAgICAucmFuZ2UoW3N0cmlwaGVpZ2h0LCBwcm9wcy5tYXJnaW4udG9wXSk7XG5cbiAgICAgIGNvbnN0IHhTY2FsZSA9IGQzLnNjYWxlQmFuZCgpXG4gICAgICAgIC5kb21haW4oZGF0ZVNlcmllcylcbiAgICAgICAgLnJhbmdlKFswLCB3aWR0aCAtIHByb3BzLm1hcmdpbi5sZWZ0IC0gcHJvcHMubWFyZ2luLnJpZ2h0XSlcbiAgICAgICAgLnBhZGRpbmcoMCk7XG5cbiAgICAgIGNvbnN0IGNvbG9yRG9tYWluID0gcHJvcHMuc3RyaXBDb2xvciA/IChPYmplY3Qua2V5cyhwcm9wcy5zdHJpcENvbG9yKSkubWFwKGQgPT4gK2QpIDogZDMuZXh0ZW50KGRhdGEubWFwKGQgPT4gZFtwcm9wcy5kYXRhUGFyYW1zLmluZGV4XSkpO1xuXG4gICAgICBjb25zdCBjb2xvclJhbmdlID0gcHJvcHMuc3RyaXBDb2xvciA/IGNvbG9yRG9tYWluLm1hcChkID0+IHByb3BzLnN0cmlwQ29sb3JbYCR7ZH1gXSkgOiBbJyNjY2NjY2MnLCAnIzMzMzMzMyddO1xuXG4gICAgICBjb25zdCBjb2xvclNjYWxlID0gZDMuc2NhbGVMaW5lYXIoKVxuICAgICAgICAuZG9tYWluKGNvbG9yRG9tYWluKVxuICAgICAgICAucmFuZ2UoY29sb3JSYW5nZSlcbiAgICAgICAgLmludGVycG9sYXRlKGludGVycG9sYXRlSGNsKTtcblxuICAgICAgLy8gbWFrZSBiYXJzXG4gICAgICBjb25zdCBiYXJzID0gY2hhcnREaXYuYXBwZW5kU2VsZWN0KCdkaXYuYmFycy1jb250YWluZXInKVxuICAgICAgICAuc3R5bGVzKHtcbiAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgJ2FsaWduLWl0ZW1zJzogYCR7cHJvcHMudmFsaWdufWAsXG4gICAgICAgIH0pXG4gICAgICAgIC5zZWxlY3RBbGwoJy5iYXInKVxuICAgICAgICAuZGF0YShkYXRhLCAoZCwgaSkgPT4gZFtwcm9wcy5kYXRhUGFyYW1zLmRhdGVdKTsgLy8gZm9yIHNtb290aCBkYXRhIHVwZGF0aW9uXG5cbiAgICAgIGJhcnMuZW50ZXIoKS5hcHBlbmQoJ2RpdicpXG4gICAgICAgIC5hdHRyKCdjbGFzcycsIGQgPT4gYGJhciAke2RbcHJvcHMuZGF0YVBhcmFtcy5kYXRlXX1gKVxuICAgICAgICAuc3R5bGUoJ2Rpc3BsYXknLCAnaW5saW5lLWJsb2NrJylcbiAgICAgICAgLnN0eWxlKCdoZWlnaHQnLCBkID0+IHtcbiAgICAgICAgICBjb25zdCBzdGVwU2l6ZSA9IChzdHJpcGhlaWdodCkgLyBwcm9wcy5kYXRhUGFyYW1zLnN0ZXBzO1xuICAgICAgICAgIGNvbnN0IHN0ZXAgPSBkW3Byb3BzLmRhdGFQYXJhbXMuc3RlcFZhbHVlXSArIDE7XG4gICAgICAgICAgcmV0dXJuIGRbcHJvcHMuZGF0YVBhcmFtcy5pbmRleF0gPyAoc3RlcCA/IHN0ZXAgKiBzdGVwU2l6ZSArICdweCcgOiBzdGVwU2l6ZSArICdweCcpIDogc3RlcFNpemUgKyAncHgnO1xuICAgICAgICB9KVxuICAgICAgICAuc3R5bGUoJ3dpZHRoJywgeFNjYWxlLmJhbmR3aWR0aCgpICsgJ3B4JylcbiAgICAgICAgLnN0eWxlKCdiYWNrZ3JvdW5kJywgZCA9PiB7XG4gICAgICAgICAgY29uc3QgdmFsID0gcGFyc2VGbG9hdChkW3Byb3BzLmRhdGFQYXJhbXMuaW5kZXhdKTtcbiAgICAgICAgICByZXR1cm4gKHZhbCAhPT0gbnVsbCkgJiYgIShpc05hTih2YWwpKSA/IGNvbG9yU2NhbGUodmFsKSA6IHByb3BzLmJhc2VDb2xvcjtcbiAgICAgICAgfSlcbiAgICAgICAgLm1lcmdlKGJhcnMpXG4gICAgICAgIC50cmFuc2l0aW9uKHRyYW5zaXRpb24pXG4gICAgICAgIC5zdHlsZSgnZGlzcGxheScsICdpbmxpbmUtYmxvY2snKVxuICAgICAgICAuc3R5bGUoJ2hlaWdodCcsIGQgPT4ge1xuICAgICAgICAgIGNvbnN0IHN0ZXBTaXplID0gKHN0cmlwaGVpZ2h0KSAvIHByb3BzLmRhdGFQYXJhbXMuc3RlcHM7XG4gICAgICAgICAgY29uc3Qgc3RlcCA9IGRbcHJvcHMuZGF0YVBhcmFtcy5zdGVwVmFsdWVdICsgMTtcbiAgICAgICAgICByZXR1cm4gZFtwcm9wcy5kYXRhUGFyYW1zLmluZGV4XSA/IChzdGVwID8gc3RlcCAqIHN0ZXBTaXplICsgJ3B4JyA6IHN0ZXBTaXplICsgJ3B4JykgOiBzdGVwU2l6ZSArICdweCc7XG4gICAgICAgIH0pXG4gICAgICAgIC5zdHlsZSgnd2lkdGgnLCB4U2NhbGUuYmFuZHdpZHRoKCkgKyAncHgnKVxuICAgICAgICAuc3R5bGUoJ2JhY2tncm91bmQnLCBkID0+IHtcbiAgICAgICAgICBjb25zdCB2YWwgPSBwYXJzZUZsb2F0KGRbcHJvcHMuZGF0YVBhcmFtcy5pbmRleF0pO1xuICAgICAgICAgIHJldHVybiAodmFsICE9PSBudWxsKSAmJiAhKGlzTmFOKHZhbCkpID8gY29sb3JTY2FsZSh2YWwpIDogcHJvcHMuYmFzZUNvbG9yO1xuICAgICAgICB9KTtcblxuICAgICAgYmFycy5leGl0KClcbiAgICAgICAgLnRyYW5zaXRpb24odHJhbnNpdGlvbilcbiAgICAgICAgLmF0dHIoJ2hlaWdodCcsIDApXG4gICAgICAgIC5yZW1vdmUoKTtcblxuICAgICAgLy8gYWRkIGF4aXNcbiAgICAgIGlmIChwcm9wcy5heGlzKSB7XG4gICAgICAgIGNvbnN0IG1hcmtEYXRlcyA9IHByb3BzLm1hcmtEYXRlcyA/IHByb3BzLm1hcmtEYXRlcy5tYXAoZCA9PiBkYXRlUGFyc2UoZCkpIDogW2RhdGVTZXJpZXNbMF0sIGRhdGVTZXJpZXMuc2xpY2UoLTEpWzBdXTtcblxuICAgICAgICBjb25zb2xlLmxvZyhtYXJrRGF0ZXMpO1xuXG4gICAgICAgIGNvbnN0IHhBeGlzID0gY2hhcnREaXYuYXBwZW5kU2VsZWN0KCdzdmcnKVxuICAgICAgICAgIC5hdHRyKCd3aWR0aCcsIHdpZHRoIC0gcHJvcHMubWFyZ2luLmxlZnQgLSBwcm9wcy5tYXJnaW4ucmlnaHQpXG4gICAgICAgICAgLmF0dHIoJ2hlaWdodCcsIDI1KVxuICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKDAsIDApJyk7XG5cbiAgICAgICAgeEF4aXMuYXBwZW5kU2VsZWN0KCdnLmF4aXMteCcpXG4gICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2F4aXMteCBheGlzJylcbiAgICAgICAgICAudHJhbnNpdGlvbih0cmFuc2l0aW9uKVxuICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKDAsMCknKVxuICAgICAgICAgIC5jYWxsKFxuICAgICAgICAgICAgZDMuYXhpc0JvdHRvbSh4U2NhbGUpXG4gICAgICAgICAgICAgIC50aWNrVmFsdWVzKG1hcmtEYXRlcylcbiAgICAgICAgICAgICAgLnRpY2tGb3JtYXQoZGF0ZUZvcm1hdClcbiAgICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICAvLyBjaGFydCBsZWdlbmRcbiAgICAgIGlmIChwcm9wcy5sZWdlbmRJdGVtcykge1xuICAgICAgICBjb25zdCBpbmRleExlZ2VuZEl0ZW1zID0gW107XG4gICAgICAgIChPYmplY3Qua2V5cyhwcm9wcy5sZWdlbmRJdGVtcy5pbmRleExlZ2VuZCkpLmZvckVhY2goZCA9PiB7XG4gICAgICAgICAgY29uc3QgaXRlbSA9IHtcbiAgICAgICAgICAgIGtleTogZCxcbiAgICAgICAgICAgIHZhbHVlOiBwcm9wcy5sZWdlbmRJdGVtcy5pbmRleExlZ2VuZFtkXSxcbiAgICAgICAgICB9O1xuICAgICAgICAgIGluZGV4TGVnZW5kSXRlbXMucHVzaChpdGVtKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChwcm9wcy5sZWdlbmRJdGVtcy5udWxsKSB7XG4gICAgICAgICAgaW5kZXhMZWdlbmRJdGVtcy5wdXNoKHtcbiAgICAgICAgICAgIGtleTogJ251bGwnLFxuICAgICAgICAgICAgdmFsdWU6IHByb3BzLmxlZ2VuZEl0ZW1zLm51bGwsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGVnZW5kV2lkdGggPSAod2lkdGggLSBwcm9wcy5tYXJnaW4ucmlnaHQgLSBwcm9wcy5tYXJnaW4ubGVmdCkgLyBpbmRleExlZ2VuZEl0ZW1zLmxlbmd0aDtcblxuICAgICAgICAvLyBtYWtlIGxlZ2VuZFxuICAgICAgICBjb25zdCBsZWdlbmREaXYgPSBjaGFydERpdi5hcHBlbmRTZWxlY3QoJ2Rpdi5sZWdlbmQtY29udGFpbmVyJyk7XG5cbiAgICAgICAgY29uc3QgaW5kZXhMZWdlbmQgPSBsZWdlbmREaXYuYXBwZW5kU2VsZWN0KCdkaXYubGVnZW5kLmluZGV4TGVnZW5kJylcbiAgICAgICAgLy8gLnN0eWxlKCdhbGlnbi1pdGVtcycsIGAke3Byb3BzLnZhbGlnbn1gKVxuICAgICAgICAgIC5zZWxlY3RBbGwoJy5sZWdlbmQtaXRlbScpXG4gICAgICAgICAgLmRhdGEoaW5kZXhMZWdlbmRJdGVtcyk7IC8vIGZvciBzbW9vdGggZGF0YSB1cGRhdGlvblxuXG4gICAgICAgIGluZGV4TGVnZW5kLmVudGVyKCkuYXBwZW5kKCdkaXYnKVxuICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdsZWdlbmQtaXRlbScpXG4gICAgICAgICAgLnN0eWxlcyh7XG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAnYWxpZ24taXRlbXMnOiAnc3RhcnQnLFxuICAgICAgICAgIH0pXG4gICAgICAgIC8vIC5zdHlsZSgnd2lkdGgnLCBgJHtsZWdlbmRXaWR0aH1weGApXG4gICAgICAgICAgLmh0bWwoZCA9PiB7XG4gICAgICAgICAgICBjb25zdCBjb2xvciA9ICgrZC5rZXkgIT09IG51bGwpICYmICEoaXNOYU4oK2Qua2V5KSkgPyBwcm9wcy5zdHJpcENvbG9yWytkLmtleV0gOiBwcm9wcy5iYXNlQ29sb3I7XG4gICAgICAgICAgICByZXR1cm4gYDxzcGFuIHN0eWxlPVwid2lkdGg6MXJlbTsgaGVpZ2h0OjFyZW07bWluLXdpZHRoOjFyZW07IG1pbi1oZWlnaHQ6MXJlbTsgYmFja2dyb3VuZDogJHtjb2xvcn1cIj48L3NwYW4+IDxwIHN0eWxlPVwibWFyZ2luOjAgMCAwIDAuNXJlbTtcIj4ke2QudmFsdWV9PC9wPmA7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAubWVyZ2UoaW5kZXhMZWdlbmQpXG4gICAgICAgICAgLnN0eWxlcyh7XG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAnYWxpZ24taXRlbXMnOiAnc3RhcnQnLFxuICAgICAgICAgIH0pXG4gICAgICAgICAgLnN0eWxlKCd3aWR0aCcsIGAke2xlZ2VuZFdpZHRofXB4YClcbiAgICAgICAgICAuaHRtbChkID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gKCtkLmtleSAhPT0gbnVsbCkgJiYgIShpc05hTigrZC5rZXkpKSA/IHByb3BzLnN0cmlwQ29sb3JbK2Qua2V5XSA6IHByb3BzLmJhc2VDb2xvcjtcbiAgICAgICAgICAgIHJldHVybiBgPHNwYW4gc3R5bGU9XCJ3aWR0aDoxcmVtOyBoZWlnaHQ6MXJlbTttaW4td2lkdGg6MXJlbTsgbWluLWhlaWdodDoxcmVtOyBiYWNrZ3JvdW5kOiAke2NvbG9yfVwiPjwvc3Bhbj4gPHAgc3R5bGU9XCJtYXJnaW46MCAwIDAgMC41cmVtO1wiPiR7ZC52YWx1ZX08L3A+YDtcbiAgICAgICAgICB9KTtcblxuICAgICAgICBpbmRleExlZ2VuZC5leGl0KClcbiAgICAgICAgICAudHJhbnNpdGlvbih0cmFuc2l0aW9uKVxuICAgICAgICAgIC5yZW1vdmUoKTtcblxuICAgICAgICBpZiAocHJvcHMubGVnZW5kSXRlbXMuc3RlcExlZ2VuZCkge1xuICAgICAgICAgIC8vIHN0ZXAgbGVnZW5kIHN0dWZmXG4gICAgICAgICAgY29uc3Qgc3RlcExlZ2VuZEl0ZW1zID0gW107XG4gICAgICAgICAgKE9iamVjdC5rZXlzKHByb3BzLmxlZ2VuZEl0ZW1zLnN0ZXBMZWdlbmQpKS5mb3JFYWNoKGQgPT4ge1xuICAgICAgICAgICAgY29uc3QgaXRlbSA9IHtcbiAgICAgICAgICAgICAga2V5OiBkLFxuICAgICAgICAgICAgICB2YWx1ZTogcHJvcHMubGVnZW5kSXRlbXMuc3RlcExlZ2VuZFtkXSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBzdGVwTGVnZW5kSXRlbXMucHVzaChpdGVtKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBjb25zb2xlLmxvZyhzdGVwTGVnZW5kSXRlbXMpO1xuXG4gICAgICAgICAgY29uc3Qgc3RlcExlZ2VuZCA9IGxlZ2VuZERpdi5hcHBlbmRTZWxlY3QoJ2Rpdi5sZWdlbmQuc3RlcExlZ2VuZCcpXG4gICAgICAgICAgICAuc2VsZWN0QWxsKCcubGVnZW5kLWl0ZW0nKVxuICAgICAgICAgICAgLmRhdGEoc3RlcExlZ2VuZEl0ZW1zKTsgLy8gZm9yIHNtb290aCBkYXRhIHVwZGF0aW9uXG5cbiAgICAgICAgICBzdGVwTGVnZW5kLmVudGVyKCkuYXBwZW5kKCdkaXYnKVxuICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2xlZ2VuZC1pdGVtJylcbiAgICAgICAgICAgIC5zdHlsZXMoe1xuICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgICdhbGlnbi1pdGVtcyc6ICdjZW50ZXInLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5odG1sKChkLCBpKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IHN0ZXBTaXplID0gKHN0cmlwaGVpZ2h0KSAvIHN0ZXBMZWdlbmRJdGVtcy5sZW5ndGg7XG4gICAgICAgICAgICAgIHJldHVybiBgPHNwYW4gc3R5bGU9XCJ3aWR0aDokezh9cHg7IGhlaWdodDokeygoK2Qua2V5KSArIDEpICogc3RlcFNpemV9cHg7IGJhY2tncm91bmQ6dHJhbnNwYXJlbnQ7IGJvcmRlcjogMC41cHggc29saWQgIzMzMzMzMztcIj48L3NwYW4+PHAgc3R5bGU9XCJtYXJnaW46MCAwIDAgMC41cmVtO1wiPiR7ZC52YWx1ZX08L3A+YDtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAubWVyZ2Uoc3RlcExlZ2VuZClcbiAgICAgICAgICAgIC5zdHlsZXMoe1xuICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgICdhbGlnbi1pdGVtcyc6ICdjZW50ZXInLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5odG1sKChkLCBpKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IHN0ZXBTaXplID0gKHN0cmlwaGVpZ2h0KSAvIHN0ZXBMZWdlbmRJdGVtcy5sZW5ndGg7XG4gICAgICAgICAgICAgIHJldHVybiBgPHNwYW4gc3R5bGU9XCJ3aWR0aDokezh9cHg7IGhlaWdodDokeygoK2Qua2V5KSArIDEpICogc3RlcFNpemV9cHg7IGJhY2tncm91bmQ6dHJhbnNwYXJlbnQ7IGJvcmRlcjogMC41cHggc29saWQgIzMzMzMzMztcIj48L3NwYW4+PHAgc3R5bGU9XCJtYXJnaW46MCAwIDAgMC41cmVtO1wiPiR7ZC52YWx1ZX08L3A+YDtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgc3RlcExlZ2VuZC5leGl0KClcbiAgICAgICAgICAgIC50cmFuc2l0aW9uKHRyYW5zaXRpb24pXG4gICAgICAgICAgICAucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cbi8vIGNvbnNvbGUubG9nKHRoaXMuZGVmYXVsdFByb3BzKTtcbmV4cG9ydCBkZWZhdWx0IENvdW50cnlMb2NrZG93bkluZGljYXRvclN0cmlwcztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/lib/chart.js\n");

/***/ })

})