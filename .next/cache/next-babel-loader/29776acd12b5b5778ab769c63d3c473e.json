{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport ChartComponent from './base/ChartComponent';\nimport d3 from './utils/d3';\nimport defaultData from './defaultData.json'; // see docs on https://github.com/reuters-graphics/graphics-atlas-client\n\nimport AtlasMetadataClient from '@reuters-graphics/graphics-atlas-client';\nimport { interpolate, interpolateHsl, interpolateHcl } from 'd3';\nconst atlastClient = new AtlasMetadataClient();\nconst dateParse = d3.timeParse('%Y-%m-%d');\nconst dateFormat = d3.timeFormat('%b %e');\nconst dateFormat_tt = d3.timeFormat('%B %e');\nconst numberFormat_tt = d3.format(',');\n\nclass CountryLockdownIndicatorStrips extends ChartComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"defaultProps\", {\n      locale: 'en',\n      countryISO2: 'IN',\n      dataParams: {\n        date: 'date',\n        index: 'c1',\n        steps: 2,\n        // stepValue = 0, 1...\n        stepValue: 'flag'\n      },\n      height: 50,\n      margin: {\n        top: 10,\n        right: 10,\n        bottom: 10,\n        left: 10\n      },\n      valign: 'center',\n      // start, center, baseline\n      baseColor: '#ECEFF4',\n      stripColor: {\n        0: '#ECEFF4',\n        1: '#d1eeea',\n        2: '#ffe47f',\n        3: '#a50f15'\n      }\n    });\n\n    _defineProperty(this, \"defaultData\", defaultData);\n  }\n\n  draw() {\n    const data = this.data();\n    const props = this.props();\n    const node = this.selection().node(); // get country details from AtlasClient from ISO-2\n\n    props.country = atlastClient.getCountry(props.countryISO2);\n    const {\n      width\n    } = node.getBoundingClientRect();\n    const transition = d3.transition().duration(750); // main chart container\n\n    const chartDiv = this.selection().appendSelect('div') // see docs in ./utils/d3.js\n    .attr('class', 'CountryLockdownIndicatorStrips').style('width', `${width}px`).style('height', `${props.height}px`).appendSelect('div').style('transform', `translate(${props.margin.left}px, ${props.margin.top}px)`); // set scales\n\n    const yScale = d3.scaleLinear().domain([0, props.dataParams.steps - 1]).range([props.height - props.margin.bottom, props.margin.top]);\n    const xScale = d3.scaleBand().domain(data.map(d => dateParse(d[props.dataParams.date]))).range([props.margin.left, width - props.margin.right]).padding(0);\n    const colorDomain = props.stripColor ? Object.keys(props.stripColor).map(d => +d) : d3.extent(data.map(d => d[props.dataParams.index]));\n    const colorRange = props.stripColor ? colorDomain.map(d => props.stripColor[`${d}`]) : ['#cccccc', '#333333'];\n    const colorScale = d3.scaleLinear().domain(colorDomain).range(colorRange).interpolate(interpolateHcl); // make bars\n\n    const bars = chartDiv.appendSelect('div.bars-container').style('display', 'flex').style('align-items', `${props.valign}`).selectAll('.bar').data(data, (d, i) => d[props.dataParams.date]); // for smooth data updation\n\n    bars.enter().append('div').attr('class', d => `bar ${d[props.dataParams.date]}`).style('display', 'inline-block').style('height', d => {\n      const stepSize = (props.height - props.margin.top - props.margin.bottom) / props.dataParams.steps;\n      const step = d[props.dataParams.stepValue] + 1;\n      return d[props.dataParams.index] ? step ? step * stepSize + 'px' : stepSize + 'px' : stepSize + 'px';\n    }).style('width', xScale.bandwidth() + 'px').style('background', d => {\n      let val = parseFloat(d[props.dataParams.index]);\n      console.log(val === null || isNaN(val));\n      return val !== null && !isNaN(val) ? colorScale(val) : props.baseColor;\n    }).merge(bars).transition(transition).style('display', 'inline-block').style('height', d => {\n      const stepSize = (props.height - props.margin.top - props.margin.bottom) / props.dataParams.steps;\n      const step = d[props.dataParams.stepValue] + 1;\n      return d[props.dataParams.index] ? step ? step * stepSize + 'px' : stepSize + 'px' : stepSize + 'px';\n    }).style('width', xScale.bandwidth() + 'px').style('background', d => {\n      let val = parseFloat(d[props.dataParams.index]);\n      console.log(val === null || isNaN(val));\n      return val !== null && !isNaN(val) ? colorScale(val) : props.baseColor;\n    });\n    bars.exit().transition(transition).attr('height', 0).remove(); // const circles = g.selectAll('circle')\n    //   .data(data, (d, i) => d[props.dataParams.date]);\n    // circles\n    //   .style('fill', props.fill)\n    //   .style('stroke', props.stroke);\n    // circles.enter().append('circle')\n    //   .style('fill', props.fill)\n    //   .style('stroke', props.stroke)\n    //   .style('stroke-width', props.strokeWidth)\n    //   .attr('cy', props.height / 2)\n    //   .attr('cx', (d, i) =>\n    //     data.slice(0, i).reduce((a, b) => a + b, 0) + (d / 2)\n    //   )\n    //   .merge(circles)\n    //   .transition(transition)\n    //   .attr('cx', (d, i) =>\n    //     data.slice(0, i).reduce((a, b) => a + b, 0) + (d / 2)\n    //   )\n    //   .attr('r', d => d / 2);\n    // circles.exit()\n    //   .transition(transition)\n    //   .attr('r', 0)\n    //   .remove();\n\n    return this;\n  }\n\n} // console.log(this.defaultProps);\n\n\nexport default CountryLockdownIndicatorStrips;","map":{"version":3,"sources":["/Users/prasanta/ReutersWork/INTERACTIVES/COVID-APP/chart-module-CountryLockdownIndicatorStrips/src/lib/chart.js"],"names":["ChartComponent","d3","defaultData","AtlasMetadataClient","interpolate","interpolateHsl","interpolateHcl","atlastClient","dateParse","timeParse","dateFormat","timeFormat","dateFormat_tt","numberFormat_tt","format","CountryLockdownIndicatorStrips","locale","countryISO2","dataParams","date","index","steps","stepValue","height","margin","top","right","bottom","left","valign","baseColor","stripColor","draw","data","props","node","selection","country","getCountry","width","getBoundingClientRect","transition","duration","chartDiv","appendSelect","attr","style","yScale","scaleLinear","domain","range","xScale","scaleBand","map","d","padding","colorDomain","Object","keys","extent","colorRange","colorScale","bars","selectAll","i","enter","append","stepSize","step","bandwidth","val","parseFloat","console","log","isNaN","merge","exit","remove"],"mappings":"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","sourcesContent":["import ChartComponent from './base/ChartComponent';\nimport d3 from './utils/d3';\nimport defaultData from './defaultData.json';\n\n// see docs on https://github.com/reuters-graphics/graphics-atlas-client\nimport AtlasMetadataClient from '@reuters-graphics/graphics-atlas-client';\nimport { interpolate, interpolateHsl, interpolateHcl } from 'd3';\nconst atlastClient = new AtlasMetadataClient();\n\nconst dateParse = d3.timeParse('%Y-%m-%d');\nconst dateFormat = d3.timeFormat('%b %e');\nconst dateFormat_tt = d3.timeFormat('%B %e');\nconst numberFormat_tt = d3.format(',');\n\nclass CountryLockdownIndicatorStrips extends ChartComponent {\n    defaultProps = {\n        locale: 'en',\n        countryISO2: 'IN',\n        dataParams: {\n            date: 'date',\n            index: 'c1',\n            steps: 2, // stepValue = 0, 1...\n            stepValue: 'flag',\n        },\n        height: 50,\n        margin: {\n            top: 10,\n            right: 10,\n            bottom: 10,\n            left: 10,\n        },\n        valign: 'center', // start, center, baseline\n        baseColor: '#ECEFF4',\n        stripColor: {\n            0: '#ECEFF4',\n            1: '#d1eeea',\n            2: '#ffe47f',\n            3: '#a50f15',\n        },\n    };\n\n    defaultData = defaultData;\n\n    draw() {\n        const data = this.data();\n        const props = this.props();\n        const node = this.selection().node();\n\n        // get country details from AtlasClient from ISO-2\n        props.country = atlastClient.getCountry(props.countryISO2);\n\n        const {\n            width,\n        } = node.getBoundingClientRect();\n\n        const transition = d3.transition()\n            .duration(750);\n\n        // main chart container\n        const chartDiv = this.selection()\n            .appendSelect('div') // see docs in ./utils/d3.js\n            .attr('class', 'CountryLockdownIndicatorStrips')\n            .style('width', `${width}px`)\n            .style('height', `${props.height}px`)\n            .appendSelect('div')\n            .style('transform', `translate(${props.margin.left}px, ${props.margin.top}px)`);\n\n        // set scales\n        const yScale = d3.scaleLinear()\n            .domain([0, props.dataParams.steps - 1])\n            .range([props.height - props.margin.bottom, props.margin.top]);\n\n        const xScale = d3.scaleBand()\n            .domain(data.map(d => dateParse(d[props.dataParams.date])))\n            .range([props.margin.left, width - props.margin.right])\n            .padding(0);\n\n        const colorDomain = props.stripColor ? (Object.keys(props.stripColor)).map(d => +d) : d3.extent(data.map(d => d[props.dataParams.index]));\n\n        const colorRange = props.stripColor ? colorDomain.map(d => props.stripColor[`${d}`]) : ['#cccccc', '#333333']\n\n        const colorScale = d3.scaleLinear()\n            .domain(colorDomain)\n            .range(colorRange)\n            .interpolate(interpolateHcl);\n\n        // make bars\n        const bars = chartDiv.appendSelect('div.bars-container')\n            .style('display', 'flex')\n            .style('align-items', `${props.valign}`)\n            .selectAll('.bar')\n            .data(data, (d, i) => d[props.dataParams.date]); // for smooth data updation\n\n        bars.enter().append('div')\n            .attr('class', d => `bar ${d[props.dataParams.date]}`)\n            .style('display', 'inline-block')\n            .style('height', d => {\n                const stepSize = (props.height - props.margin.top - props.margin.bottom) / props.dataParams.steps;\n                const step = d[props.dataParams.stepValue] + 1;\n                return d[props.dataParams.index] ? (step ? step * stepSize + 'px' : stepSize + 'px') : stepSize + 'px';\n            })\n            .style('width', xScale.bandwidth() + 'px')\n            .style('background', d => {\n                let val = parseFloat(d[props.dataParams.index]);\n                console.log((val === null) || (isNaN(val)))\n                return (val !== null) && !(isNaN(val)) ? colorScale(val) : props.baseColor;\n            })\n            .merge(bars)\n            .transition(transition)\n            .style('display', 'inline-block')\n            .style('height', d => {\n                const stepSize = (props.height - props.margin.top - props.margin.bottom) / props.dataParams.steps;\n                const step = d[props.dataParams.stepValue] + 1;\n                return d[props.dataParams.index] ? (step ? step * stepSize + 'px' : stepSize + 'px') : stepSize + 'px';\n            })\n            .style('width', xScale.bandwidth() + 'px')\n            .style('background', d => {\n                let val = parseFloat(d[props.dataParams.index]);\n                console.log((val === null) || (isNaN(val)))\n                return (val !== null) && !(isNaN(val)) ? colorScale(val) : props.baseColor;\n            });\n\n        bars.exit()\n            .transition(transition)\n            .attr('height', 0)\n            .remove();\n\n        // const circles = g.selectAll('circle')\n        //   .data(data, (d, i) => d[props.dataParams.date]);\n\n        // circles\n        //   .style('fill', props.fill)\n        //   .style('stroke', props.stroke);\n\n        // circles.enter().append('circle')\n        //   .style('fill', props.fill)\n        //   .style('stroke', props.stroke)\n        //   .style('stroke-width', props.strokeWidth)\n        //   .attr('cy', props.height / 2)\n        //   .attr('cx', (d, i) =>\n        //     data.slice(0, i).reduce((a, b) => a + b, 0) + (d / 2)\n        //   )\n        //   .merge(circles)\n        //   .transition(transition)\n        //   .attr('cx', (d, i) =>\n        //     data.slice(0, i).reduce((a, b) => a + b, 0) + (d / 2)\n        //   )\n        //   .attr('r', d => d / 2);\n\n        // circles.exit()\n        //   .transition(transition)\n        //   .attr('r', 0)\n        //   .remove();\n\n        return this;\n    }\n}\n// console.log(this.defaultProps);\nexport default CountryLockdownIndicatorStrips;"]},"metadata":{},"sourceType":"module"}